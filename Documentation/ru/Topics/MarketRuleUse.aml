<?xml version="1.0" encoding="utf-8"?>
<topic id="12ef8365-1bd1-426d-afc5-5eee33d554a6" revisionNumber="1">
	<developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
	<introduction>
		<list class="bullet">
  			<listItem>
  				<para><legacyBold>Создание правила на условие регистрации заявки:</legacyBold></para>
  				<code language="C#">
				<![CDATA[
private void btnBuy_Click(object sender, RoutedEventArgs e)
{
   var order = new Order
   { 
       Portfolio = Portfolio.SelectedPortfolio,
       Price = _instr1.BestAsk.Price,
       Security = _instr1,
       Volume = 1,
       Direction = Sides.Buy,
   };

   order
       .WhenRegistered(Connector)
       .Do(() => Connector.AddInfoLog("Заявка успешно зарегистрирована"))
       .Once()
       .Apply(this);

    
	// регистрация заявки
   Connector.RegisterOrder(order);
}
	  	  		]]>
				</code>
				<para>
					Теперь, когда сработает событие (заявка будет зарегистрирована на бирже), указанное через метод
					<codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.IMarketRule.Do(System.Action)</codeEntityReference>
					действие будет вызвано.
				</para>
				<para>
					В конце формирования правила вызывается метод <codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.MarketRuleHelper.Apply(StockSharp.Algo.IMarketRule)</codeEntityReference>.
					До тех пор, пока метод не будет вызван для правила - оно неактивно (обработчик в <codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.IMarketRule.Do(System.Action)</codeEntityReference> не будет вызываться).
				</para>
  			</listItem>
  			
  			<listItem>
  				<para><legacyBold>Создание правил внутри стратегии:</legacyBold></para>
  				<code language="C#">
				<![CDATA[
class FirstStrategy : Strategy
{
	...
	
	protected override void OnStarting()
	{
		_connector
			.WhenCandlesFinished(_series)
			.Do(FinishCandle)
			.Apply(this);

		Security
			.WhenNewTrade(_connector)
			.Do(NewTrade)
			.Apply(this);

		base.OnStarting();
	}
    
    ...
}    
	  	  		]]>
				</code>	  				
  			</listItem>
  			
  			<listItem>
  				<para><legacyBold>Удаление ненужных правил.</legacyBold></para>
  				
				<para>У <codeEntityReference qualifyHint="false">T:StockSharp.Algo.IMarketRule</codeEntityReference> есть
				<codeEntityReference qualifyHint="false">P:StockSharp.Algo.IMarketRule.Token</codeEntityReference> - токен правила, с которым он ассоциирован. Например, для правила 
				<codeEntityReference qualifyHint="false" autoUpgrade="true">M:StockSharp.Algo.MarketRuleHelper.WhenCanceled(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.ITransactionProvider)</codeEntityReference>
				токеном будет являться заявка.</para>  				
  				
  				<para>Когда сработало правило успешной отмены заявки, то лучше удалить все остальные правила, связанные с этой заявкой:</para>
  				<code language="C#">
				<![CDATA[
var order = this.CreateOrder(direction, (decimal) Security.GetCurrentPrice(direction), Volume);

var ruleCanceled = order.WhenCanceled(Connector);

ruleCanceled
    .Do(() =>
    {
        this.AddInfoLog("Заявка успешно отменена");

        // удаление всех правил связанных с order
        Rules.RemoveRulesByToken(ruleCanceled, (IMarketRule) ruleCanceled.Token);
    })
    .Once()
    .Apply(this);

order
    .WhenRegistered(Connector)
    .Do(() => this.AddInfoLog("Заявка успешно зарегистрирована"))
    .Once()
    .Apply(this);

order
    .WhenRegisterFailed(Connector)
    .Do(() => this.AddInfoLog("Заявка не принята биржей"))
    .Once()
    .Apply(this);

order
    .WhenMatched(Connector)
    .Do(() => this.AddInfoLog("Заявка полностью исполнена"))
    .Once()
    .Apply(this);

// регистрирация заявки
RegisterOrder(order);

	  	  		]]>
				</code>	  				
  			</listItem>  
  			
  			<listItem>
  				<para><legacyBold>Oбъединение правил по условию 
  				<codeEntityReference qualifyHint="false" autoUpgrade="true">M:StockSharp.Algo.MarketRuleHelper.Or(StockSharp.Algo.IMarketRule,StockSharp.Algo.IMarketRule[])</codeEntityReference>
  				/
  				<codeEntityReference qualifyHint="false" autoUpgrade="true">M:StockSharp.Algo.MarketRuleHelper.And(StockSharp.Algo.IMarketRule,StockSharp.Algo.IMarketRule[])</codeEntityReference>.</legacyBold></para>

  				<para>Когда выйдет время <legacyBold>ИЛИ</legacyBold> закроется свеча:</para>
  				
  				<code language="C#">
				<![CDATA[
CandleSeries _series;
TimeSpan _holdTimeToOpen = TimeSpan.FromMilliseconds(5000);

...

_connector
	.WhenIntervalElapsed(_holdTimeToOpen)
	.Or(_connector.WhenCandlesStarted(_series))
	.Do(() => this.AddInfoLog("Свеча закрыта или вышло время"))
	.Once()
	.Apply(this);
	  	  		]]>
				</code>	  	
				
  				<para>Или такой формат записи:</para>
  				
  				<code language="C#">
				<![CDATA[
MarketRuleHelper
	.Or(new IMarketRule[] {_connector.WhenIntervalElapsed(_holdTimeToOpen), _connector.WhenCandlesStarted(_series)})
	.Do(() => this.AddInfoLog("Свеча закрыта или вышло время"))
	.Once()
	.Apply(this);
	  	  		]]>
				</code>	  				
  				
  				<para>Когда цена последней сделки будет выше 135000 <legacyBold>И</legacyBold> ниже 140000:</para>
  				<code language="C#">
				<![CDATA[
var priceMore = new Unit(135000m, UnitTypes.Limit);
var priceLess = new Unit(140000m, UnitTypes.Limit);
				
MarketRuleHelper
	.And(new IMarketRule[] {Security.WhenLastTradePriceMore(Connector, Connector, priceMore), Security.WhenLastTradePriceLess(Connector, Connector, priceLess)})
	.Do(() => this.AddInfoLog(string.Format("Цена последней сделки находится в диапазоне от {0} до {1}", priceMore, priceLess)))
	.Apply(this);
	  	  		]]>
				</code>

				<alert class="note">
					<para>Обработчик в 
					<codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.IMarketRule.Do(System.Action)</codeEntityReference>
					вызовется после того, как сработает последнее правило добавленное через 
					<codeEntityReference qualifyHint="false" autoUpgrade="true">M:StockSharp.Algo.MarketRuleHelper.And(StockSharp.Algo.IMarketRule,StockSharp.Algo.IMarketRule[])</codeEntityReference>.</para>
				</alert>
  			</listItem> 
  			
  			<listItem>
  				<para><legacyBold>Периодичность работы правила - <codeEntityReference qualifyHint="false" autoUpgrade="true">M:StockSharp.Algo.IMarketRule.Until(System.Func{System.Boolean})</codeEntityReference>:</legacyBold></para>
  				<code language="C#">
				<![CDATA[
bool flag = false;

...
				
Security
	.WhenNewTrade(Connector)
	.Do(() =>
			{
				if(условие) flag = true;
			})
	.Until(() => flag)			
	.Apply(this);
	  	  		]]>
				</code>	  				
  			</listItem>  			
		</list>
	</introduction>
	</developerWalkthroughDocument>
</topic>