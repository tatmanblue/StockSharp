<?xml version="1.0" encoding="utf-8"?>
<topic id="1d5b1223-15ba-4364-a31f-2e5592f76fe3" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>
      	<link xlink:href="e0f9d08e-5dba-4d5d-9248-4d37eba61b22" /> 
      	provides an opportunity to receive historical candles, which can be used both for testing and for building 
      	<link xlink:href="8b9125ee-9d74-444f-82d6-5dea51266fd4"/>.
	  </para>
    </introduction>
    
    <procedure>
      <title>Working with historical candles through Connector</title>
      <steps class="ordered">
       <step>
          <content>
            	<para>To get candles through 
            	<codeEntityReference>T:StockSharp.Algo.Connector</codeEntityReference>
            	, you need to create 
            	<codeEntityReference>T:StockSharp.Algo.Connector</codeEntityReference> 
            	and add the corresponding 
            	<codeEntityReference>T:StockSharp.Messages.MessageAdapter</codeEntityReference> to it. 
            	How to do this using a special control, see <link xlink:href="0e99f0d7-9d8a-4bb5-a914-6461677b267b" />.</para>
<para>You can also add the corresponding 
            	<codeEntityReference>T:StockSharp.Messages.MessageAdapter</codeEntityReference> to the 
            	<codeEntityReference>T:StockSharp.Algo.Connector</codeEntityReference> through the code. 
            	For example, adapter initialization for 
            	<link xlink:href="bae7b613-dcf6-4abb-b595-6c61fc4e5c46" /> is described in 
            	<link xlink:href="7c23b480-d472-43df-aabf-f743ad09fded" /> and looks like this:</para>
          <code language="C#">
            				<![CDATA[
Connector Connector = new Connector();				
...				
var messageAdapter = new InteractiveBrokersMessageAdapter(Connector.TransactionIdGenerator)
{
	Address = "<Your Address>".To<EndPoint>(),
};

Connector.Adapter.InnerAdapters.Add(messageAdapter);
...	

Connector.Connect();

...
							]]>
					</code>
          </content>
        </step>
        <step>
          <content>
            <para>
            	In order to get historical candles, you need to call the 
            	<codeEntityReference qualifyHint="false">M:StockSharp.Algo.Connector.SubscribeCandles(StockSharp.Algo.Candles.CandleSeries,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int64},System.Nullable{System.Int64},StockSharp.Messages.IMessageAdapter)</codeEntityReference> 
            	method:
       		</para>
            <code language="C#">
            <![CDATA[
...
var tf = (TimeSpan)CandlesPeriods.SelectedItem;
var series = new CandleSeries(typeof(TimeFrameCandle), SelectedSecurity, tf);
Connector.SubscribeCandles(SelectedSecurity, DateTime.Now.Subtract(TimeSpan.FromTicks(tf.Ticks * 100)), DateTime.Now);
...
			]]>
			</code>
          </content>
        </step>
        <step>
        	<para>
            	Historical candles are passed through the 
            	<codeEntityReference qualifyHint="false">E:StockSharp.Algo.Connector.CandleSeriesProcessing</codeEntityReference>
            	event:
       		</para>
          <code language="C#">
            <![CDATA[
...
Connector.CandleSeriesProcessing += ProcessCandle;
...
			]]>
			</code>
        </step>
        <step>
          <content>
            <para>Candles that appear can be rendered through the 
            <link xlink:href="287125e1-7c7e-4be3-a8ce-5018538e613f"/>.</para>
          </content>
        </step>
      </steps>
    
            <title>Working with historical candles through MessageAdapter</title>
      <steps class="ordered">
       <step>
          <content>
            	<para>To get candles through the 
            	<codeEntityReference>T:StockSharp.Messages.MessageAdapter</codeEntityReference>, 
            	you need to create the corresponding
            	<codeEntityReference>T:StockSharp.Messages.MessageAdapter</codeEntityReference>.</para>
<para>For example, adapter initialization for 
<link xlink:href="bae7b613-dcf6-4abb-b595-6c61fc4e5c46" /> is described in 
            	<link xlink:href="7c23b480-d472-43df-aabf-f743ad09fded" /> and looks like this:</para>
          <code language="C#">
            				<![CDATA[		
...         
var messageAdapter = new InteractiveBrokersMessageAdapter(Connector.TransactionIdGenerator)
{
	Address = "<Your Address>".To<EndPoint>(),
};
...
							]]>
					</code>
          </content>
        </step>
               <step>
          <content>
            	<para>We wrap the 
            	<link xlink:href="bae7b613-dcf6-4abb-b595-6c61fc4e5c46" /> 
adapter in the 
<codeEntityReference>T:StockSharp.Algo.SecurityNativeIdMessageAdapter</codeEntityReference>.
security system identifier adapter. This is necessary if the trading system works with numeric or any other security identifiers other than the usual string representation.</para>
          <code language="C#">
            				<![CDATA[	
...
SecurityNativeIdMessageAdapter _securityAdapter;

if (adapter.IsNativeIdentifiers)
	_securityAdapter = new SecurityNativeIdMessageAdapter(adapter, new InMemoryNativeIdStorage());

var securities = _securityAdapter.GetSecurities(new SecurityLookupMessage
{
	SecurityId = new SecurityId
	{
		SecurityCode = "EUR"
	}
});

SecurityMessage eurUsd = null;

foreach (var security in securities)
{
	if (security.SecurityId.SecurityCode.CompareIgnoreCase("EURUSD"))
		eurUsd = security;
}
...
							]]>
					</code>
          </content>
        </step>
        <step>
        	<para>
Now, using the received security identifier, we get candles from the adapter:
       		</para>
          <code language="C#">
            <![CDATA[
...
var candles = adapter.GetCandles(eurUsd.SecurityId, TimeSpan.FromDays(1), DateTimeOffset.Now.AddDays(-100), DateTimeOffset.Now);

foreach (var candle in candles)
{
	Console.WriteLine(candle);
}
...
			]]>
			</code>
        </step>
      </steps>
    </procedure>

    <relatedTopics>
      <link xlink:href="cd52cfcf-938c-4fce-9a56-4e9a001f0792"/>
    </relatedTopics>
  </developerConceptualDocument>
</topic>
