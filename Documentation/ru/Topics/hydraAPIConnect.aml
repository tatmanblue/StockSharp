<?xml version="1.0" encoding="utf-8"?>
<topic id="28c61dc6-f1f3-4c02-906b-e0cf0e9ceb00" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
<para><token>hydra</token> может использоваться в серверном режиме, в данном режиме можно 
удаленно подключиться к <token>hydra</token> и получить имеющиеся данные в хранилище. 
Включение серверного режима <token>hydra</token> описано в 
пункте <link xlink:href="7d845e99-6bde-437e-b7f4-059be0438894" />.</para>

<para>Для подключения через <link xlink:href="b0198d6a-0667-45d4-b172-698afd3ca310" /> необходимо создать и настроить Fix подключение (<link xlink:href="4d00c89b-59d8-4e69-9ea2-db92f6d08a43" />).</para>
<code language="C#" title="C#"><![CDATA[
...
private readonly Connector _connector = new Connector();
...
var marketDataAdapter = new FixMessageAdapter(Connector.TransactionIdGenerator)
{
    Address = new IPEndPoint(IPAddress.Parse("127.0.0.1"), 5002),
    SenderCompId = "hydra_user",
    TargetCompId = "StockSharpHydraMD",
    Login = "hydra_user",
    Password = "qwerty".To<SecureString>(),
};
_connector.Adapter.InnerAdapters.Add(marketDataAdapter);

var transactionDataAdapter = new FixMessageAdapter(Connector.TransactionIdGenerator)
{
    Address = new IPEndPoint(IPAddress.Parse("127.0.0.1"), 5002),
    SenderCompId = "hydra_user",
    TargetCompId = "StockSharpHydraMD",
    Login = "hydra_user",
    Password = "qwerty".To<SecureString>(),
};
_connector.Adapter.InnerAdapters.Add(transactionDataAdapter);
...
]]></code>
<para>Подписаться на события получения данных и подключиться</para>
<code language="C#" title="C#"><![CDATA[
...
_connector.Connected += () =>
{
    Console.WriteLine("_connector.Connected");
    _connector.LookupSecurities(new Security ());
    
    
};
_connector.Disconnected += () =>
{
    Console.WriteLine("_connector.Disconnected");
};

_connector.NewSecurity += security =>
{
    Console.Write("_connector.NewSecurity: ");
    Console.WriteLine(security);
    BuffeSecurity.Add(security);
    if (security.Id == seid)
    {
        _connector.SubscribeMarketDepth(security);
        _connector.SubscribeTrades(security);
        series.CandleType = typeof (TimeFrameCandle);
        series.Security = security;
        series.Arg = TimeSpan.FromMinutes(5);
        _connector.SubscribeCandles(series, DateTime.Today.Subtract(TimeSpan.FromDays(30)), DateTime.Now);
    }
};

_connector.NewTrade += trade =>
{
    Console.WriteLine("_connector.NewTrade");
    Console.WriteLine(trade);
};
_connector.MarketDepthChanged+= depth =>
{
    Console.WriteLine("_connector.MarketDepthChanged");
    Console.WriteLine(depth);
};

_connector.ConnectionError += error =>
{
    Console.WriteLine("_connector.ConnectionError");
    Console.WriteLine(error.Message);
};

_connector.Error += error =>
{
    Console.WriteLine("_connector.Error");
    Console.WriteLine(error.Message);
};

_connector.MarketDataSubscriptionFailed += (security, msg, error) =>
{
    Console.WriteLine("_connector.MarketDataSubscriptionFailed");
    Console.WriteLine(security);
    Console.WriteLine(msg);
    Console.WriteLine(error);
};
...
_connector.Connect();
...
]]></code>
    </introduction>
  
    <relatedTopics>
    </relatedTopics>
  </developerConceptualDocument>
</topic>