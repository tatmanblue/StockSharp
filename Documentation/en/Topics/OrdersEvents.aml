<?xml version="1.0" encoding="utf-8"?>
<topic id="718fbbc7-efa5-45ed-80ef-e0a32fd4a8e2" revisionNumber="1">
	<developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
	<introduction>
		<para>The <codeEntityReference qualifyHint="false">T:StockSharp.BusinessEntities.IConnector</codeEntityReference> events related to orders listed below:</para>
		
		<list class="bullet">
			<listItem>
				<codeEntityReference qualifyHint="false">E:StockSharp.BusinessEntities.ITransactionProvider.NewOrder</codeEntityReference> - the new order received event.
			</listItem>
			<listItem>
				<codeEntityReference qualifyHint="false">E:StockSharp.Algo.Connector.OrderCancelFailed</codeEntityReference> - the event on errors related to orders cancel.
			</listItem>
			<listItem>
				<codeEntityReference qualifyHint="false">E:StockSharp.Algo.Connector.OrderChanged</codeEntityReference> - the order state change event (cancelled, matched).
			</listItem>
			<listItem>
				<codeEntityReference qualifyHint="false">E:StockSharp.Algo.Connector.OrderRegisterFailed</codeEntityReference> - the event on errors related to orders registration.
			</listItem>
			
			<listItem>
				<codeEntityReference qualifyHint="false">E:StockSharp.Algo.Connector.NewStopOrder</codeEntityReference> - the new stop order received event.
			</listItem>
			<listItem>
				<codeEntityReference qualifyHint="false">E:StockSharp.Algo.Connector.StopOrderCancelFailed</codeEntityReference> - the event on errors related to stop orders cancelling.
			</listItem>
			<listItem>
				<codeEntityReference qualifyHint="false">E:StockSharp.Algo.Connector.StopOrderChanged</codeEntityReference> - the stop orders state change event.
			</listItem>
			<listItem>
				<codeEntityReference qualifyHint="false">E:StockSharp.Algo.Connector.StopOrderRegisterFailed</codeEntityReference> - the event on errors related to stop orders registration.
			</listItem>
		</list>

		<para>
			Transactions (orders registration, replacement or cancelling) are sent in asynchronous mode. Asynchronous mode allows the trading program not to wait for
			transaction delivery confirmation by the exchange and continues to work further. That reduces program wait time and increases the speed of response to the
			market situation changes.
		</para>
		<para>
			To find out in the program when the exchange has assigned the <codeEntityReference qualifyHint="true">P:StockSharp.BusinessEntities.Order.Id</codeEntityReference>
			to the order, you need to subscribe for the <codeEntityReference qualifyHint="true">E:StockSharp.Algo.Connector.OrderChanged</codeEntityReference>
			event (or the <codeEntityReference qualifyHint="true">E:StockSharp.Algo.Connector.StopOrderChanged</codeEntityReference> for stop orders).
			To determine the registration failed the <codeEntityReference qualifyHint="true">E:StockSharp.Algo.Connector.OrderRegisterFailed</codeEntityReference>
			event is used (or the <codeEntityReference qualifyHint="true">E:StockSharp.Algo.Connector.StopOrderRegisterFailed</codeEntityReference> for stop orders).
		</para>
		<alert class="caution">
			<para>
				If at the start of the application the previously registered orders have been passed from the connector, they all passed through the
				<codeEntityReference qualifyHint="false">E:StockSharp.BusinessEntities.ITransactionProvider.NewOrder</codeEntityReference> events, regardless of their state (except the
				<codeEntityReference>F:StockSharp.Messages.OrderStates.Failed</codeEntityReference> state). This is because the
				<codeEntityReference qualifyHint="false">E:StockSharp.Algo.Connector.NewOrder</codeEntityReference> event shows the new orders receiving
				in the program, not the event of order successful registration.
			</para>
		</alert>
	</introduction>
    <relatedTopics>
      <link xlink:href="cbce846a-dd31-4baa-ba77-2bac3eb38b2f">Transaction number</link>
    </relatedTopics>	
    </developerWalkthroughDocument>
</topic>
