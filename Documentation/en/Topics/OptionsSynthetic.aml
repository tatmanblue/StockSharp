<?xml version="1.0" encoding="utf-8"?>
<topic id="efad2861-7392-4ed6-957d-f7fde651a48f" revisionNumber="0">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--<summary>
      <para>Optional abstract</para>
    </summary>-->

    <introduction>
		<para>
			To create the synthetic positions by options (or, vice versa, option positions by the base instrument) you can use the special
			<codeEntityReference>T:StockSharp.Algo.Derivatives.Synthetic</codeEntityReference> class. This class through
			<codeEntityReference qualifyHint="true">M:StockSharp.Algo.Derivatives.Synthetic.Buy</codeEntityReference> and
			<codeEntityReference qualifyHint="true">M:StockSharp.Algo.Derivatives.Synthetic.Sell</codeEntityReference> methods returns a combination of synthetic
			instruments to determine their possible position.
		</para>
		<para>
			The synthetic combination can be used together with the degree of liquidity by the option determination (when it is impossible to get the required position).
			To do this you can use the order book liquidity analysis methods <codeEntityReference qualifyHint="true">Overload:StockSharp.Algo.TraderHelper.GetTheoreticalTrades</codeEntityReference>:
		</para>
		<code language="C#"><![CDATA[// order book of the option
var depth = _connector.GetMarketDepth(option);

// calc theoretical price for 100 contracts
var trades = depth.GetTheoreticalTrades(Sides.Buy, 100);

// calc matched size
var matchedVolume = trades.Sum(t => t.Trade.Volume);

// a new order for the option
_connector.RegisterOrder(new Order
{
	Security = option,
	Volume = matchedVolume,
	Direction = Sides.Buy,
	// using max price
	Price = trades.Max(t => t.Trade.Price),
});

// calc elapsed size
var elapsedVolume = 100 - matchedVolume;

if (elapsedVolume > 0)
{
	// creating synthetic instruments
	var syntheticBuy = new Synthetic(option).Buy();

	// registering orders with elapsed volumes
	foreach (var pair in syntheticBuy)
	{
		_connector.RegisterOrder(new Order
		{
			Security = pair.Key,
			Volume = elapsedVolume,
			Direction = pair.Value,
			Price = pair.Key.LastTrade.Price,
		});
	}
}]]></code>
		<para>
			Similarly to options, you can also get the option position for the base instrument through
			<codeEntityReference qualifyHint="true">M:StockSharp.Algo.Derivatives.Synthetic.Buy(System.Decimal)</codeEntityReference> and
			<codeEntityReference qualifyHint="true">M:StockSharp.Algo.Derivatives.Synthetic.Sell(System.Decimal)</codeEntityReference> methods.
		</para>
    </introduction>

    <!--<section>
      <title>A topic section</title>

      <content>
        <para>Some topic content</para>
      </content>
    </section>-->

    <relatedTopics>
      <!-- Supported Link Types
    
         All of the following linking mechanisms may be used in the topic's content 
         as well as in the related topics section.
    
    Linking to API reference documentation: 
    
		    <codeEntityReference>API reference ID</codeEntityReference>

    Linking to external resources and custom HTML topics: 

        <externalLink>
          <linkText>  Required hyperlink text  </linkText>
          <linkAlternateText>  Optional link title  </linkAlternateText>
          <linkUri>  Required URI  </linkUri>
        </externalLink>
    
    Linking to other conceptual topics: 
    
        <link xlink:href="GUID topic name (without file extension)" />
        
    Linking to named references:
    
        (Refer to the project's Help\Settings\links.xml file for more information)
    
        <link xref="id"> Optional link text </link>
        <link vref="id or URI"> Optional link text </link>
        
    -->

      <!-- Example Usage 

      <codeEntityReference>T:MyNamespace.MyClass</codeEntityReference>
      <codeEntityReference>P:MyNamespace.MyClass.MyProp</codeEntityReference>
      <codeEntityReference>M:System.IO.File.OpenText(System.String)</codeEntityReference>

      <externalLink>
        <linkText>Sandcastle Styles</linkText>
        <linkAlternateText>Sandcastle Styles on CodePlex</linkAlternateText>
        <linkUri>http://www.codeplex.com/SandcastleStyles</linkUri>
      </externalLink>

      <externalLink>
        <linkText>Change Log</linkText>
        <linkUri>ChangeLog.html</linkUri>
      </externalLink>

      <link xlink:href="2BFD9215-1216-403d-8C46-8420A4D01B83"/>
      
      <link xref="home">Our Home Page</link>
      <link vref="/controls/design.aspx">Control Architecture</link>
      -->
    </relatedTopics>

  </developerConceptualDocument>
</topic>
