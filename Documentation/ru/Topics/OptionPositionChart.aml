<?xml version="1.0" encoding="utf-8"?>
<topic id="5d9f8c0d-d05c-4a39-9fad-7148df4411ad" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
   <introduction>
      <para>
      	    Графический компонент <codeEntityReference>T:StockSharp.Xaml.Charting.OptionPositionChart</codeEntityReference> - это график, показывающий позицию
      	    и греки опционов относительно базового актива.
      </para>
      <para>
            Далее показан пример SampleOptionQuoting, в котором используется этот график. Исходные коды примера можно найти в папке <legacyItalic>Samples/Misc/SampleOptionQuoting</legacyItalic>.
      </para>
      
      <mediaLink><image placement="left" xlink:href="option_volsmile" /></mediaLink>
   </introduction>
    
               
   <procedure>
	<title>Пример SampleOptionQuoting</title>
		<steps class="ordered">
			<step>
				<content>
					<para>В коде XAML добавляем элемент <codeEntityReference>T:StockSharp.Xaml.Charting.OptionPositionChart</codeEntityReference>
							и присваиваем ему имя <legacyBold>PosChart</legacyBold>.</para>
            		<code title="XAML" language="XAML">
	  				<![CDATA[
<Window x:Class="OptionCalculator.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:loc="clr-namespace:StockSharp.Localization;assembly=StockSharp.Localization"
        xmlns:xaml="http://schemas.stocksharp.com/xaml"
        xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
        Title="{x:Static loc:LocalizedStrings.XamlStr396}" Height="400" Width="1030">
    <Grid Margin="5,5,5,5">
    
	    .........................................................
	    
	    <xaml:OptionPositionChart x:Name="PosChart" Grid.Row="7" Grid.Column="0" Grid.ColumnSpan="6" />

	</Grid>
</Window>
				]]>
                  	</code>
				</content>
			</step>
			<step>
				<content>
					<para>В коде C# создаем подключение, и подписываемся на необходимые события.</para>
            		<code title="C#" language="C#">
<![CDATA[
...                 
public readonly Connector Connector = new Connector();
...                 
// subscribe on connection successfully event
Connector.Connected += () =>
{
	// update gui labels
	this.GuiAsync(() => ChangeConnectStatus(true));
};

// subscribe on disconnection event
Connector.Disconnected += () =>
{
	// update gui labels
	this.GuiAsync(() => ChangeConnectStatus(false));
};

// subscribe on connection error event
Connector.ConnectionError += error => this.GuiAsync(() =>
{
	// update gui labels
	ChangeConnectStatus(false);

	MessageBox.Show(this, error.ToString(), LocalizedStrings.Str2959);
});

// fill underlying asset's list
Connector.NewSecurity += security =>
{
	if (security.Type == SecurityTypes.Future)
		_assets.Add(security);
};

Connector.SecurityChanged += security =>
{
	if (_model.UnderlyingAsset == security || _model.UnderlyingAsset.Id == security.UnderlyingSecurityId)
		_isDirty = true;
};

// subscribing on tick prices and updating asset price
Connector.NewTrade += trade =>
{
	if (_model.UnderlyingAsset == trade.Security || _model.UnderlyingAsset.Id == trade.Security.UnderlyingSecurityId)
		_isDirty = true;
};

Connector.NewPosition += position => this.GuiAsync(() =>
{
	var asset = SelectedAsset;

	if (asset == null)
		return;

	var assetPos = position.Security == asset;
	var newPos = position.Security.UnderlyingSecurityId == asset.Id;

	if (!assetPos && !newPos)
		return;

	RefreshChart();
});

Connector.PositionChanged += position => this.GuiAsync(() =>
{
	if ((PosChart.AssetPosition != null && PosChart.AssetPosition == position) || PosChart.Positions.Cache.Contains(position))
		RefreshChart();
});

try
{
	if (File.Exists(_settingsFile))
		Connector.Load(new XmlSerializer<SettingsStorage>().Deserialize(_settingsFile));
}
...
]]>
                  	</code>
				</content>
			</step>
			<step>
				<content>
					<para>При подключении задаем первоначальные установки контрола:</para>
						<list class="ordered">
  							<listItem>
  								Обнуляем базовый актив
								<codeEntityReference>P:StockSharp.Xaml.Charting.OptionPositionChart.UnderlyingAsset</codeEntityReference> контрола;
							</listItem>
  							<listItem>
  								Перерисовываем график с начальными значениями
								<codeEntityReference>M:StockSharp.Xaml.Charting.OptionPositionChart.Refresh(System.Nullable{System.Decimal},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})</codeEntityReference>;
							</listItem>
							  	<listItem>Задаем провайдера сообщений для рыночных данных и инструментов.</listItem>
						</list>
            			<code title="C#" language="C#">
                  <![CDATA[
private void ConnectClick(object sender, RoutedEventArgs e)
{
	if (!_isConnected)
	{
		ConnectBtn.IsEnabled = false;
...

		PosChart.UnderlyingAsset = null;

...

		PosChart.MarketDataProvider = Connector;
		PosChart.SecurityProvider = Connector;
		PosChart.PositionProvider = Connector;

		Connector.Connect();
	}
	else
		Connector.Disconnect();
}

]]>
                  		</code>
					</content>
				</step>
				<step>
					<content>
						<para>При получении инструментов добавляем базовые активы в список.</para>
            			<code title="C#" language="C#">
                  <![CDATA[
Connector.NewSecurity += security =>
{
	if (security.Type == SecurityTypes.Future)
		_assets.Add(security);
};
]]>
                  		</code>
					</content>
				</step>
				<step>
					<content>
						<para>При изменении Level1 базового инструмента или опционов, а также при получении новой сделки возводим флаг _isDirty. 
							Это позволяет в событии таймера (код, которого опущен) вызывать метод RefreshChart (см. ниже) для перерисовки графика.
							Таким образом мы контролируем частоту перерисовки.</para>
            			<code title="C#" language="C#">
                  <![CDATA[
Connector.SecurityChanged += security =>
{
	if (_model.UnderlyingAsset == security || _model.UnderlyingAsset.Id == security.UnderlyingSecurityId)
		_isDirty = true;
};

// подписываемся на событие новых сделок чтобы обновить текущую цену фьючерса
Connector.NewTrade += trade =>
{
	if (_model.UnderlyingAsset == trade.Security || _model.UnderlyingAsset.Id == trade.Security.UnderlyingSecurityId)
		_isDirty = true;
};

]]>
                  		</code>
					</content>
				</step>
				<step>
					<content>
						<para>В обработчике события появления новой позиции обновляем вызываем перерисовку графика.</para>
            			<code title="C#" language="C#">
                  <![CDATA[
Connector.NewPosition += position => this.GuiAsync(() =>
{
	var asset = SelectedAsset;

	if (asset == null)
		return;

	var assetPos = position.Security == asset;
	var newPos = position.Security.UnderlyingSecurityId == asset.Id;

	if (!assetPos && !newPos)
		return;

	RefreshChart();
});

Connector.PositionChanged += position => this.GuiAsync(() =>
{
	if ((PosChart.AssetPosition != null && PosChart.AssetPosition == position) || PosChart.Positions.Cache.Contains(position))
		RefreshChart();
});
]]>
                 			</code>
						</content>
					</step>
					<step>
					<content>
						<para>Метод вызывает перерисовку графика.</para>
            			<code title="C#" language="C#">
                  <![CDATA[
private void RefreshChart()
{
	var asset = SelectedAsset;
	var trade = asset.LastTrade;

	if (trade != null)
		PosChart.Refresh(trade.Price);
}
]]>
               		</code>
				</content>
			</step>
		</steps>
 	</procedure>

    <relatedTopics>
		<link xlink:href="6fe5b321-a23d-415d-b3e3-af9de9212a20">Котирование по волатильности</link>
    </relatedTopics>
  </developerConceptualDocument>
</topic>