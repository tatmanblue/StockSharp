<?xml version="1.0" encoding="utf-8"?>
<topic id="ac584200-f06a-49e6-b2fd-141b5fc898f9" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
   	<introduction>
					<para>
Along with the use of trading object storages, you can use message storages. Work with these storages is also carried out through the 
<codeEntityReference>T:StockSharp.Algo.Storages.IMarketDataStorage`1</codeEntityReference>. interface. For example, to work with candles, you can use the storage of the 
IMarketDataStorage&lt;CandleMessage&gt; type. 
<codeEntityReference qualifyHint="false">T:StockSharp.Algo.Storages.IStorageRegistry</codeEntityReference> 
also contains a set of methods for obtaining the required message storages. 
So, the time candle storage can be obtained, as shown in the following code snippet.
    </para>
    <code language="C#">
	<![CDATA[
   var security = new Security() { Id = "ESM5@NYSE" };
   var candleMessageStorage = _storage.GetCandleMessageStorage(typeof(TimeFrameCandleMessage), security, TimeSpan.FromMinutes(1));
	]]>
</code>
	<para>
Then you can work with the storage using 	    
<codeEntityReference qualifyHint="true">M:StockSharp.Algo.Storages.IMarketDataStorage.Load(System.DateTime)</codeEntityReference> and/or  
<codeEntityReference qualifyHint="true">M:StockSharp.Algo.Storages.IMarketDataStorage.Save(System.Collections.IEnumerable)</codeEntityReference>  methods, as shown in the example in the 
<link xlink:href="e4a57b52-bd14-4640-a7c7-0979dba1ad0a"/>.
    </para>
   	<para>
Note that <token>stocksharp</token> allows you to convert the trading object 
storage types to the corresponding types of message storages and vice versa. 
For example, IMarketDataStorage&lt;MarketDepth&gt; can be converted to the IMarketDataStorage&lt;QuoteChangeMessage&gt; type and vice versa.
    </para>
    <code language="C#">
	<![CDATA[
	
   var security = new Security() { Id = "ESM5@NYSE" };
   
   var depthStorage = _storage.GetMarketDepthStorage(_security);
   var quoteMessageStorage = depthStorage as IMarketDataStorage<QuoteChangeMessage>;
   
   var quoteMessageStorage1 = _storage.GetQuoteMessageStorage(_security);
   var depthStorage1 = quoteMessageStorage1 as IMarketDataStorage<MarketDepth>;

	]]>
</code>
<para>
It should pay attention to the relevance of using the message storage to store own 
orders and trades. The matter is that for these trading objects there are no corresponding 
storages. In this case, you must use the IMarketDataStorage&lt;ExecutionMessage&gt; 
message storage. The following example shows how to store own trades in the storage.
</para>
	
	</introduction>

	<procedure>
		<title>Example of saving own trades</title>
		<steps class="ordered">
			<step>
				<content>
				<para>
1.	First, an instance of the connector is created, as well as a storage. In addition, 
we specify the identifier of the instrument with which we will work and declare a 
variable for the transaction storage. The transaction storage itself for the specified 
instrument will be received in the instrument getting event using the 
<codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.Storages.IMessageStorageRegistry.GetTransactionStorage(StockSharp.Messages.SecurityId,StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)</codeEntityReference> method.
		</para>		

<code language="C#">
					<![CDATA[

var connector = new Connector();


var storagePath = @"....";

var securityId = "RIM5@FORTS";


var storage = new StorageRegistry() { DefaultDrive = new LocalMarketDataDrive(storagePath) };


IMarketDataStorage<ExecutionMessage> tranStorage = null;



connector.NewSecurity += security =>
{
		if (security.Id == securityId)
			tranStorage = storage.GetTransactionStorage(security.ToSecurityId());
};

 ]]>
					</code>
				</content>
			</step>
			<step>
		<content>

			<para>Saving own trades will be performed in the 
			<codeEntityReference qualifyHint="true">E:StockSharp.Algo.Connector.NewMyTrade</codeEntityReference> event handler using the 
			<codeEntityReference qualifyHint="true">M:StockSharp.Algo.Storages.IMarketDataStorage.Save(System.Collections.IEnumerable)</codeEntityReference>. 
method. Before saving, the list of own trades is converted to the IEnumerable&lt;ExecutionMessage&gt; 
type. The procedure for order registering itself in this example is omitted.
            </para>
					<code language="C#">
					<![CDATA[

connector.NewMyTrade += trade =>
{
    tranStorage.Save(new[] {trade.ToMessage()});
};
]]>
					</code>
				</content>
			</step>
		</steps>
	</procedure>
  
    
      <relatedTopics>
      <link xlink:href="e4a57b52-bd14-4640-a7c7-0979dba1ad0a">Api</link>
    </relatedTopics>
    
    
  </developerConceptualDocument>
</topic>
