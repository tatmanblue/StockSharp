<?xml version="1.0" encoding="utf-8"?>
<topic id="8b9125ee-9d74-444f-82d6-5dea51266fd4" revisionNumber="1">
  <developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>
      	<token>stocksharp</token> стандартно предоставляет более 70 индикаторов технического анализа. Это позволяет не создавать с нуля нужные индикаторы, а использовать
      	уже готовые. Кроме того можно создавать собственные индикаторы, взяв за основу существующие, как показано в разделе <link xlink:href="ec4c3abe-3779-4a5f-899c-697b049254d4">Собственный индикатор</link>. 
      	Все базовые классы для работы с индикаторами, а также сами индикаторы находятся в пространстве имен
      	<codeEntityReference qualifyHint="true">N:StockSharp.Algo.Indicators</codeEntityReference>. 
      </para>
    </introduction>
    <!-- <prerequisites><content>Optional prerequisites info</content></prerequisites> -->
    <!-- One or more procedure or section with procedure -->
    <procedure>
      <title>Подключение индикатора в робот</title>
      <steps class="ordered">
        <step>
          <content>
            <para>В самом начале нужно создать индикатор. Индикатор создается как и обычный .NET объект:</para>
			<code language="C#"><![CDATA[var longSma = new SimpleMovingAverage { Length = 80 };]]></code>
          </content>
        </step>
        <step>
          <content>
            <para>Далее, необходимо заполнять его данными. Например, это может быть цена закрытия свечи:</para>
            <code language="C#"><![CDATA[foreach (var candle in candles)
	longSma.Process(candle);]]></code>
			<para>
				Индикатор принимает на вход <codeEntityReference>T:StockSharp.Algo.Indicators.IIndicatorValue</codeEntityReference>. Некоторые из индикаторов
				оперируют простым числом, как, например, <codeEntityReference>T:StockSharp.Algo.Indicators.SimpleMovingAverage</codeEntityReference>.
				Другим требуются полностью свеча, как, например, <codeEntityReference>T:StockSharp.Algo.Indicators.MedianPrice</codeEntityReference>.
				Поэтому входящие значения необходимо приводить или к <codeEntityReference>T:StockSharp.Algo.Indicators.DecimalIndicatorValue</codeEntityReference>
				или к <codeEntityReference>T:StockSharp.Algo.Indicators.CandleIndicatorValue</codeEntityReference>. Результирующее значение индикатора
				работает по тем же правилам, что и входящее значение.
			</para>
          </content>
        </step>
        <step>
          <content>
            <para>Результирующее и входящее значение индикатора имеют свойство 
            <codeEntityReference qualifyHint="true">P:StockSharp.Algo.Indicators.IIndicatorValue.IsFinal</codeEntityReference>, 
            которое говорит о том, что значение  является окончательным и индикатор не будет изменяться в данной точке времени. 
            Например, индикатор <codeEntityReference>T:StockSharp.Algo.Indicators.SimpleMovingAverage</codeEntityReference> 
            формируется по цене закрытия свечи, но в текущий момент времени окончательная цена закрытия свечи неизвестна и меняется. 
            В таком случае результирующее значение <codeEntityReference qualifyHint="true">P:StockSharp.Algo.Indicators.IIndicatorValue.IsFinal</codeEntityReference>
            будет false. Eсли в индикатор передать законченную свечу, то входящее и результирующее значения  
            <codeEntityReference qualifyHint="true">P:StockSharp.Algo.Indicators.IIndicatorValue.IsFinal</codeEntityReference> будут true.</para>
			
          </content>
        </step>
        <step>
          <content>
            <para>Для того, чтобы получить текущее значение индикатора, используется метод <codeEntityReference qualifyHint="false" autoUpgrade="true">M:StockSharp.Algo.Indicators.IIndicatorValue.GetValue``1</codeEntityReference>:</para>
			<code language="C#"><![CDATA[// вычисляем новое положение относительно друг друга
var isShortLessThenLong = ShortSma.GetCurrentValue() < LongSma.GetCurrentValue();

// если произошло пересечение
if (_isShortLessThenLong != isShortLessThenLong)
{
	// если короткая меньше чем длинная, то продажа, иначе, покупка.
	var direction = isShortLessThenLong ? Sides.Sell : Sides.Buy;

	// регистрируем заявку
	var volume = Position == 0 ? Volume : Position.Abs().Min(Volume) * 2;
	var price = candle.ClosePrice + ((direction == Sides.Buy ? Security.PriceStep : -Security.PriceStep) ?? 1);
    RegisterOrder(this.CreateOrder(direction, price, volume));

	// запоминаем текущее положение относительно друг друга
	_isShortLessThenLong = isShortLessThenLong;
}]]></code>
          </content>
        </step>
                <step>
          <content>
          <para>У всех индикаторов есть свойство 
          <codeEntityReference qualifyHint="true">P:StockSharp.Algo.Indicators.BaseIndicator.IsFormed</codeEntityReference>,
          которое говорит о том готов ли индикатор к использованию. Например, индикатор 
          <codeEntityReference>T:StockSharp.Algo.Indicators.SimpleMovingAverage</codeEntityReference> 
          имеет период, и пока индикатор не обработает количество свечей, равное периоду индикатора, индикатор будет считаться не готовым 
          к использованию. И свойство <codeEntityReference qualifyHint="true">P:StockSharp.Algo.Indicators.BaseIndicator.IsFormed</codeEntityReference> будет false.</para>
          </content>
        </step>
      </steps>
    </procedure>
    <relatedTopics>
    </relatedTopics>
  </developerWalkthroughDocument>
</topic>