<?xml version="1.0" encoding="utf-8"?>
<topic id="e1d2c02b-ee6e-41ab-93c5-f2286f1fe897" revisionNumber="0">
  <developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>Along with <link xlink:href="24250c24-029c-4dbc-bc8b-4afde645e483">Quoting</link>, the <token>stocksharp</token> contains the 
	  <codeEntityReference>T:StockSharp.Algo.TraderHelper</codeEntityReference>  
	  class, which includes a variety of simple trading algorithms methods:</para>
    </introduction>

    <procedure>
         <steps class="ordered">
			  <step>
			  <content>
<para>To clear the order book from its own orders through the
<codeEntityReference>M:StockSharp.Algo.TraderHelper.GetFilteredQuotes(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Quote},System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order},System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order})</codeEntityReference>
method (to register the orders in relation to other market players and to prevent own algorithms to fight each other):</para>
<code language="C#"><![CDATA[
// the sample security
var someSecurity = _connector.Securities.First();

var someOrders = new List<Order>();
// fill the collection by own orders

// to get the best big price
Console.WriteLine(_connector.GetMarketDepth(someSecurity).GetFilteredQuotes(Sides.Buy, someOrders, null).Max(q => q.Price));
]]></code>
</content>
</step>
		  <step>
			  <content>
<para>
To adjust the price through the 
<codeEntityReference>M:StockSharp.Algo.TraderHelper.ShrinkPrice(StockSharp.BusinessEntities.Security,System.Decimal,StockSharp.Algo.ShrinkRules)</codeEntityReference>
method, so it become a multiple of price increment and trading system accepts the order:</para>
<code language="C#">
// the sample security
var someSecurity = _connector.Securities.First();
Console.WriteLine(someSecurity.ShrinkPrice(13453.65342));
</code>
			  </content>
		  </step>
		  <step>
			  <content>
<para>
To get the position on closed trades through the 
<codeEntityReference>Overload:StockSharp.Algo.TraderHelper.GetPosition</codeEntityReference> 
method:</para>
<code language="C#">
Console.WriteLine(_connector.GetPosition(Portfolio,Security, clientCode, depoName);
</code>
			  </content>
		  </step>
		  <step>
			  <content>
<para>
To check whether the current time traded (is session closed? is clearing started?) through the
<codeEntityReference>Overload:StockSharp.Algo.TraderHelper.IsTradeTime</codeEntityReference> method:
</para>
<code language="C#">
// the sample security
var someSecurity = _connector.Securities.First();

Console.WriteLine(someSecurity.Board.IsTradeTime(currentTime));</code>
			  </content>
		  </step>
		  <step>
			  <content>
				  <para>
					  The rest of the <codeEntityReference>T:StockSharp.Algo.TraderHelper</codeEntityReference>
					  class methods are described in the <link xlink:href="6267fec7-64e5-4488-ba08-c72cf61fcc9e">Order cancel</link> and
					  <link xlink:href="4b427409-9aa9-41d3-bb97-98745d1bba8e">Order replace</link> sections.
				  </para>
			  </content>
		  </step>
      </steps>
    </procedure>
    
    <relatedTopics>

		<link xlink:href="24250c24-029c-4dbc-bc8b-4afde645e483">Quoting</link>
		<link xlink:href="6267fec7-64e5-4488-ba08-c72cf61fcc9e">Order cancel</link>
		<link xlink:href="4b427409-9aa9-41d3-bb97-98745d1bba8e">Order replace</link>
    </relatedTopics>
    
  </developerWalkthroughDocument>
</topic>
