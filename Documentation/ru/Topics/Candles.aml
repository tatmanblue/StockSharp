<?xml version="1.0" encoding="utf-8"?>
<topic id="cd52cfcf-938c-4fce-9a56-4e9a001f0792" revisionNumber="1">
	<developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">

	<introduction>
		<para><token>stocksharp</token> поддерживает следующие виды:</para>
	  
		<list class="bullet">
			<listItem>
				<codeEntityReference>T:StockSharp.Algo.Candles.TimeFrameCandle</codeEntityReference> - свеча на основе временного отрезка, таймфрейма.
				Можно задавать как популярные отрезки (минутки, часовики, дневные), так и кастомизированные. Например, 21 секунда, 4.5 минуты и т.д.
			</listItem>
			
			<listItem>
				<codeEntityReference>T:StockSharp.Algo.Candles.RangeCandle</codeEntityReference> - свеча ценового разброса. Новая свеча создается,
				когда появляется сделка с ценой, выходящей за допустимые пределы. Допустимый предел формируется каждый раз на основе цены первой сделки.
			</listItem>
		  
			<listItem>
				<codeEntityReference>T:StockSharp.Algo.Candles.VolumeCandle</codeEntityReference> - свеча формируется до тех пор, пока суммарно по сделкам
				не будет превышен объем. Если новая сделка превышает допустимый объем, то она попадает уже в новую свечу.
			</listItem>
		  
			<listItem>
				<codeEntityReference>T:StockSharp.Algo.Candles.TickCandle</codeEntityReference> - то же самое, что и <codeEntityReference>T:StockSharp.Algo.Candles.VolumeCandle</codeEntityReference>,
				только в качестве ограничения вместо объема берется количество сделок.
			</listItem>
		  
			<listItem>
				<codeEntityReference>T:StockSharp.Algo.Candles.PnFCandle</codeEntityReference> - свеча пункто-цифрового графика (график крестики-нолики).
			</listItem>
		  
			<listItem>
				<codeEntityReference>T:StockSharp.Algo.Candles.RenkoCandle</codeEntityReference> - Рэнко свеча.
			</listItem>
		</list>
	  
		<para>Как работать со свечами, показано в примере SampleConnection, который расположен в папке <legacyItalic>Samples/Common/SampleConnection</legacyItalic>.</para>
		<para>На следующих рисунках представлены графики <codeEntityReference>T:StockSharp.Algo.Candles.TimeFrameCandle</codeEntityReference> и 
		<codeEntityReference>T:StockSharp.Algo.Candles.RangeCandle</codeEntityReference>:</para>
		
	  
		<mediaLink><image placement="center" xlink:href="sample_timeframecandles" /></mediaLink>
		<mediaLink><image placement="center" xlink:href="sample_rangecandles" /></mediaLink>
	</introduction>

    <procedure>
		<title>Запуск получения данных</title>

		<steps class="ordered">
												
					<step>
				<content>  			
<para>
Создадим серию свечей <codeEntityReference>T:StockSharp.Algo.Candles.CandleSeries</codeEntityReference>:
</para>
					<code language="C#">
					<![CDATA[
...
_candleSeries = new CandleSeries(CandleSettingsEditor.Settings.CandleType, security, CandleSettingsEditor.Settings.Arg);
...		
					]]>
					</code>
				</content>    		
			</step>
			
						<step>
				<content>
					<para>Все необходимые методы для получения свечей реализованы в классе 
					<codeEntityReference qualifyHint="false">T:StockSharp.Algo.Connector</codeEntityReference>.</para>
					<para>Для получения свечей необходимо подписаться на событие
					<codeEntityReference qualifyHint="true">E:StockSharp.Algo.Connector.CandleSeriesProcessing</codeEntityReference>,
					сигнализирующее о появлении нового значения для обработки:</para>
			
					<code language="C#">
					<![CDATA[
_connector.CandleSeriesProcessing += Connector_CandleSeriesProcessing;
...

private void Connector_CandleSeriesProcessing(CandleSeries candleSeries, Candle candle)
{
	Chart.Draw(_candleElement, candle);
}

...
					]]>
					</code>
					
					<alert class="note">
						Для отображения свечей используется графический компонент <codeEntityReference>T:StockSharp.Xaml.Charting.Chart</codeEntityReference>.
					</alert>
				</content>
			</step>
			
			<step>
				<content>
					<para>Далее передаём в коннектор созданную серию свечей и запускаем получение данных через 
<codeEntityReference qualifyHint="false">M:StockSharp.Algo.Connector.SubscribeCandles(StockSharp.Algo.Candles.CandleSeries,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int64},System.Nullable{System.Int64},StockSharp.Messages.IMessageAdapter)</codeEntityReference>:</para>

					<code language="C#">
					<![CDATA[
...
_connector.SubscribeCandles(_candleSeries, DateTime.Today.Subtract(TimeSpan.FromDays(30)), DateTime.Now);	
...
		
					]]>
					</code>
			
					<para>После этого этапа начнёт вызываться событие <codeEntityReference qualifyHint="true">E:StockSharp.Algo.Connector.CandleSeriesProcessing</codeEntityReference>.</para>
				</content>
			</step>
			<step>
				<content>
					<para>Событии 
		<codeEntityReference qualifyHint="true">E:StockSharp.Algo.Connector.CandleSeriesProcessing</codeEntityReference>
		вызывается не только при появлении новой свечи, но и при изменении текущей.</para>
		
		<para>Если же нужно отображать только <legacyBold>"целые"</legacyBold> свечи, то необходимо проверить свойство 
		<codeEntityReference qualifyHint="false">P:StockSharp.Algo.Candles.Candle.State</codeEntityReference> пришедшей свечи:</para>
		
		<code language="C#">
		<![CDATA[
...
private void Connector_CandleSeriesProcessing(CandleSeries candleSeries, Candle candle)
{
    if (candle.State == CandleStates.Finished) 
    {
       var chartData = new ChartDrawData();
       chartData.Group(candle.OpenTime).Add(_candleElement, candle);
       Chart.Draw(chartData);
    }
}
...
		]]>
		</code>	
				</content>
			</step>
<step>	
				<content>
				
<para>Для <codeEntityReference>T:StockSharp.Algo.Candles.CandleSeries</codeEntityReference> можно задать некоторые свойства:</para>

<list class="bullet">
  <listItem><para><codeEntityReference>P:StockSharp.Algo.Candles.CandleSeries.BuildCandlesMode</codeEntityReference> задает 
режим построения свечей. По умолчанию задан 
<codeEntityReference>F:StockSharp.Messages.MarketDataBuildModes.LoadAndBuild</codeEntityReference>, что говорит о том, 
что будут запрошены готовые данные, или построены из заданного в свойстве 
<codeEntityReference>P:StockSharp.Algo.Candles.CandleSeries.BuildCandlesFrom</codeEntityReference> 
типа данных. 
Также можно установить <codeEntityReference>F:StockSharp.Messages.MarketDataBuildModes.Load</codeEntityReference> для запроса только 
готовых данных. Или <codeEntityReference>F:StockSharp.Messages.MarketDataBuildModes.Build</codeEntityReference>, 
для построения из заданного в свойстве <codeEntityReference>P:StockSharp.Algo.Candles.CandleSeries.BuildCandlesFrom</codeEntityReference> 
типа данных без запроса готовых данных.
</para></listItem>
  <listItem>
  При построении свечей необходимо задать свойство 
  <codeEntityReference>P:StockSharp.Algo.Candles.CandleSeries.BuildCandlesFrom</codeEntityReference>, которое 
  говорит о том, какой именно тип данных используется как источник 
  (<codeEntityReference>F:StockSharp.Messages.MarketDataTypes.Level1</codeEntityReference>, 
  <codeEntityReference>F:StockSharp.Messages.MarketDataTypes.MarketDepth</codeEntityReference>,
  <codeEntityReference>F:StockSharp.Messages.MarketDataTypes.Trades</codeEntityReference> и тд.
  ).
  <para>
 </para></listItem>
  <listItem>
  Для некоторых типов данных необходимо дополнительно указать свойство
  <codeEntityReference>P:StockSharp.Algo.Candles.CandleSeries.BuildCandlesField</codeEntityReference>, 
  из которого будут построены данные.
Например, для 
<codeEntityReference>F:StockSharp.Messages.MarketDataTypes.Level1</codeEntityReference>
 можно указать 
 <codeEntityReference>F:StockSharp.Messages.Level1Fields.BestAskPrice</codeEntityReference>,
 что говорт о том, что свечи будут строиться из свойства 
 <codeEntityReference>F:StockSharp.Messages.Level1Fields.BestAskPrice</codeEntityReference>  
 данных 
<codeEntityReference>F:StockSharp.Messages.MarketDataTypes.Level1</codeEntityReference>.
  <para>
 </para></listItem>

</list>
				</content>
			</step>
			<step>
				<content>
				 <para>Рассмотрим несколько примеров построения разных типов свечей:</para>
				 
<list class="bullet">
  <listItem><para>Так как большинство источников предоставляют свечи стандартных 
  таймфреймом, то для получения таких свечей достаточно задать тип и таймфрейм:
  </para>
  <code language="C#">
					<![CDATA[
_candleSeries = new CandleSeries(typeof(TimeFrameCandle), security, TimeSpan.FromMinutes(5));
					]]>
					</code>
  </listItem>
    <listItem><para>
Если необходимо просто загрузить готовые свечи, то необходимо задать свойство 
<codeEntityReference>P:StockSharp.Algo.Candles.CandleSeries.BuildCandlesMode</codeEntityReference> в
<codeEntityReference>F:StockSharp.Messages.MarketDataBuildModes.Load</codeEntityReference>:
  </para>
  <code language="C#">
					<![CDATA[
_candleSeries = new CandleSeries(typeof(TimeFrameCandle), security, TimeSpan.FromMinutes(5))
{
	BuildCandlesMode = MarketDataBuildModes.Load,
};	
					]]>
					</code>
  </listItem>
    <listItem><para>Если источник не предоставляет свечей необходимого таймфрейма, 
    то их можно построить из других маркет данных. Ниже приведен приме построения свечей с таймфреймом 21 секунда из сделок:
  </para>
  <code language="C#">
					<![CDATA[
_candleSeries = new CandleSeries(typeof(TimeFrameCandle), security, TimeSpan.FromSeconds(21))
{
	BuildCandlesMode = MarketDataBuildModes.Build,
	BuildCandlesFrom = MarketDataTypes.Trades,
};	
					]]>
					</code>
  </listItem>
 
     <listItem><para>Если источник данных не предоставляет ни свечей, ни сделок свечи можно построить из спреда стакана:
  </para>
  <code language="C#">
					<![CDATA[
_candleSeries = new CandleSeries(typeof(TimeFrameCandle), security, TimeSpan.FromSeconds(21))
{
	BuildCandlesMode = MarketDataBuildModes.Build,
	BuildCandlesFrom = MarketDataTypes.MarketDepth,
	BuildCandlesField = Level1Fields.SpreadMiddle,
};	
					]]>
					</code>
  </listItem>
 
  <listItem><para>Так как не существует источников, предоставляющих готового <legacyBold>профиля объема</legacyBold>,
  его тоже необходимо строить из другого типа данных. Для прорисовки <legacyBold>профиля объема</legacyBold> 
  необходимо установить свойство
<codeEntityReference>P:StockSharp.Algo.Candles.CandleSeries.IsCalcVolumeProfile</codeEntityReference> в true, 
а также <codeEntityReference>P:StockSharp.Algo.Candles.CandleSeries.BuildCandlesMode</codeEntityReference> в 
<codeEntityReference>F:StockSharp.Messages.MarketDataBuildModes.Build</codeEntityReference>. 
И указать тип данных из которого будет построен <legacyBold>профиль объема</legacyBold>. 
В данном случае это <codeEntityReference>F:StockSharp.Messages.MarketDataTypes.Trades</codeEntityReference>:
</para>
					<code language="C#">
					<![CDATA[
_candleSeries = new CandleSeries(typeof(TimeFrameCandle), security, TimeSpan.FromMinutes(5))
{
	BuildCandlesMode = MarketDataBuildModes.Build,
	BuildCandlesFrom = MarketDataTypes.Trades,
    IsCalcVolumeProfile = true,
};	
					]]>
					</code>

</listItem>
  <listItem><para>
  Так как большинство источников данных не предоставляют готовые свечей, кроме <codeEntityReference>T:StockSharp.Algo.Candles.TimeFrameCandle</codeEntityReference>,
  то остальные типы свечей строятся аналогично <legacyBold>профилю объема</legacyBold>.
  Необходимо указать свойство 
  <codeEntityReference>P:StockSharp.Algo.Candles.CandleSeries.BuildCandlesMode</codeEntityReference> в
  <codeEntityReference>F:StockSharp.Messages.MarketDataBuildModes.Build</codeEntityReference> или 
  <codeEntityReference>F:StockSharp.Messages.MarketDataBuildModes.LoadAndBuild</codeEntityReference>. А также
  задать свойство 
  <codeEntityReference>P:StockSharp.Algo.Candles.CandleSeries.BuildCandlesFrom</codeEntityReference> и свойство 
  <codeEntityReference>P:StockSharp.Algo.Candles.CandleSeries.BuildCandlesField</codeEntityReference> если необходимо.
</para>
<para>
  Следующий код демонстрирует построение 
  <codeEntityReference>T:StockSharp.Algo.Candles.VolumeCandle</codeEntityReference> 
  с объемом в 1000 контрактов. 
  В качестве источника данных для построения используется середина спреда стакана.</para>
  					<code language="C#">
					<![CDATA[
_candleSeries = new CandleSeries(typeof(VolumeCandle), security, 1000m)
{
	BuildCandlesMode = MarketDataBuildModes.LoadAndBuild,
	BuildCandlesFrom = MarketDataTypes.MarketDepth,
	BuildCandlesField = Level1Fields.SpreadMiddle,
};
					]]>
					</code>
  </listItem>
    <listItem><para>
 Следующий код демонстрирует построение 
 <codeEntityReference>T:StockSharp.Algo.Candles.TickCandle</codeEntityReference> в 1000 сделок.
 В качестве источника данных для построения используются сделки.</para>
  					<code language="C#">
					<![CDATA[	   
_candleSeries = new CandleSeries(typeof(TickCandle), security, 1000)
{
	BuildCandlesMode = MarketDataBuildModes.Build,
	BuildCandlesFrom = MarketDataTypes.Trades,
};
					]]>
					</code>
  </listItem>
    <listItem><para>
  Следующий код демонстрирует построение 
  <codeEntityReference>T:StockSharp.Algo.Candles.RangeCandle</codeEntityReference> с диапазоном в 0.1 у.е.
  В качестве источника данных для построения используется лучшая покупка стакана:</para>
  					<code language="C#">
					<![CDATA[
_candleSeries = new CandleSeries(typeof(RangeCandle), security, new Unit(0.1m))
{
	BuildCandlesMode = MarketDataBuildModes.LoadAndBuild,
    BuildCandlesFrom = MarketDataTypes.MarketDepth,
    BuildCandlesField = Level1Fields.BestBid,
};
					]]>
					</code>
  </listItem>
    <listItem><para>
Следующий код демонстрирует построение 
<codeEntityReference>T:StockSharp.Algo.Candles.RenkoCandle</codeEntityReference>. 
В качестве источника данных для построения используется цена последней сделки из Level1:</para>
  					<code language="C#">
					<![CDATA[
_candleSeries = new CandleSeries(typeof(RenkoCandle), security, new Unit(0.1m))
{
	BuildCandlesMode = MarketDataBuildModes.LoadAndBuild,
    BuildCandlesFrom = MarketDataTypes.Level1,
    BuildCandlesField = Level1Fields.LastTradePrice,
};
					]]>
					</code>
  </listItem>
    <listItem><para>
  Следующий код демонстрирует построение 
  <codeEntityReference>T:StockSharp.Algo.Candles.PnFCandle</codeEntityReference>. 
   В качестве источника данных для построения используются сделки.</para>
  					<code language="C#">
					<![CDATA[
_candleSeries = new CandleSeries(typeof(PnFCandle), security, new PnFArg() { BoxSize = 0.1m, ReversalAmount =1})
{
	BuildCandlesMode = MarketDataBuildModes.Build,
	BuildCandlesFrom = MarketDataTypes.Trades,
};	
					]]>
					</code>
  </listItem>
</list>
			</content>
			</step>
		</steps>
	</procedure>
    
	<nextSteps>
		<content>
			<para><link xlink:href="287125e1-7c7e-4be3-a8ce-5018538e613f">График</link></para>
			<para><link xlink:href="ccc96909-8623-4f56-b3ee-fdc5070b3fde">Паттерны</link></para>
			<para><link xlink:href="99da6499-9ac1-4e7e-bcaf-a0c832dce4de">Собственный тип свечей</link></para>
		</content>
	</nextSteps>
	
	 
    
	</developerWalkthroughDocument>
</topic>