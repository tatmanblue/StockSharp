<?xml version="1.0" encoding="utf-8"?>
<topic id="24a5c734-199f-4090-943d-6324a04f335b" revisionNumber="0">
  <developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--<summary>
      <para>Optional abstract</para>
    </summary>-->

    <introduction>
		<para>
			To optimize the <link xlink:href="5b90a23e-24b9-474a-a699-da47b666194a">backtesting</link> process it is possible to use parallel computation based on
			multiple threads. On computers with multiple cores or processors this will reduce the overall testing time due concurrent execution of multiple operations.
		</para>
		<alert class="caution">
			Using multiple threads increases the memory consumption (approximately as many times as threads created, if each thread uses its time range in the history).
			Therefore, the use of parallel testing without sufficient memory, will not allow a significant increase in performance, and even reduce it.
		</alert>
    </introduction>

    <!--<prerequisites>
      <content>
        <para>Optional information on prerequisites</para>
      </content>
    </prerequisites>-->
    
    <!-- One or more procedure or section elements -->

    <procedure>
      <title>Example of moving averages strategy testing in several threads</title>

		<steps class="ordered">
			<step>
				<content>
					<para>
						The SampleHistoryTesting example, described in the <link xlink:href="5b90a23e-24b9-474a-a699-da47b666194a"/> testing section, is taken as the
						basis. This example is a modified conventional testing for testing with optimization through fitting of the optimum value of the moving averages
						lengths:
					</para>
					<mediaLink>
						<image placement="center" xlink:href="sample_history_test_parallel" />
					</mediaLink>
				</content>
			</step>
			<step>
				<content>
					<para>
						Creating a few settings of the moving averages lengths (the first value is responsible for the length of the longest, the second for the length
						of the shortest, and the third for the <link xlink:href="973860e9-8f2d-4035-98de-bb88b33b6751">equity curve</link> color):
					</para>
					<code language="C#"><![CDATA[
var periods = new[]
{
	new Tuple<int, int, Color>(80, 10, Colors.DarkGreen),
	new Tuple<int, int, Color>(70, 8, Colors.Red),
	new Tuple<int, int, Color>(60, 6, Colors.DarkBlue)
};
]]></code>
				</content>
			</step>
			
			<step>
				<content>
					<para>
						Creating an instance of the storage, the instrument, the message to set the values of Level1 and the portfolio:
					</para>
					<code language="C#"><![CDATA[
					
// storage to historical data
var storageRegistry = new StorageRegistry
{
	// set historical path
	DefaultDrive = new LocalMarketDataDrive(HistoryPath.Folder)
};

var timeFrame = TimeSpan.FromMinutes(5);

// create test security
var security = new Security
{
	Id = "ESM2@NYSE", // sec id has the same name as folder with historical data
	Code = "ESM2",
	Name = "ES-12.12",
	Board = ExchangeBoard.Nyse,
};

var startTime = new DateTime(2012, 10, 1);
var stopTime = new DateTime(2012, 10, 31);

var level1Info = new Level1ChangeMessage
{
	SecurityId = security.ToSecurityId(),
	ServerTime = startTime,
}
.TryAdd(Level1Fields.PriceStep, 10m)
.TryAdd(Level1Fields.StepPrice, 6m)
.TryAdd(Level1Fields.MinPrice, 10m)
.TryAdd(Level1Fields.MaxPrice, 1000000m)
.TryAdd(Level1Fields.MarginBuy, 10000m)
.TryAdd(Level1Fields.MarginSell, 10000m);

// test portfolio
var portfolio = new Portfolio
{
	Name = "test account",
	BeginValue = 1000000,
};

]]></code>
				</content>
			</step>
			
			<step>
				<content>
					<para>
						Creating a unified connector <codeEntityReference>T:StockSharp.Algo.Strategies.Testing.BatchEmulation</codeEntityReference>, which will contain
						all created in the next step <codeEntityReference>T:StockSharp.Algo.Testing.HistoryEmulationConnector</codeEntityReference>:
					</para>
					<code language="C#">
// create backtesting connector
var batchEmulation = new BatchEmulation(new[] { security }, new[] { portfolio }, storageRegistry)
{
	EmulationSettings =
	{
		MarketTimeChangedInterval = timeFrame,
		StartTime = startTime,
		StopTime = stopTime,

		// count of parallel testing strategies
		BatchSize = periods.Length,
	}
};
</code>
				</content>
			</step>
			<step>
				<content>
					<para>
						Next, the subscription to the unified gateway and the connector events is performed, testing parameters are configured, as well as the strategy
						is created for each period.
					</para>
					<code language="C#"><![CDATA[

// handle historical time for update ProgressBar
batchEmulation.ProgressChanged += (curr, total) => this.GuiAsync(() => TestingProcess.Value = total);

batchEmulation.StateChanged += (oldState, newState) =>
{
	if (batchEmulation.State != EmulationStates.Stopped)
		return;

	this.GuiAsync(() =>
	{
		if (batchEmulation.IsFinished)
		{
			TestingProcess.Value = TestingProcess.Maximum;
			MessageBox.Show(this, LocalizedStrings.Str3024.Put(DateTime.Now - _startEmulationTime));
		}
		else
			MessageBox.Show(this, LocalizedStrings.cancelled);
	});
};


// get emulation connector
var connector = batchEmulation.EmulationConnector;

logManager.Sources.Add(connector);

connector.NewSecurity += s =>
{
	if (s != security)
		return;

	// fill level1 values
	connector.SendInMessage(level1Info);

	connector.MarketDataAdapter.SendInMessage(new GeneratorMessage
	{
		IsSubscribe = true,
		Generator = new RandomWalkTradeGenerator(new SecurityId { SecurityCode = security.Code })
		{
			Interval = TimeSpan.FromSeconds(1),
			MaxVolume = maxVolume,
			MaxPriceStepCount = 3,	
			GenerateOriginSide = true,
			MinVolume = minVolume,
			RandomArrayLength = 99,
		}
	});				
};

TestingProcess.Maximum = 100;
TestingProcess.Value = 0;

_startEmulationTime = DateTime.Now;

var strategies = periods
	.Select(period =>
	{
		...
    
		// create strategy based SMA
		var strategy = new SmaStrategy(series, new SimpleMovingAverage { Length = period.Item1 }, new SimpleMovingAverage { Length = period.Item2 })
		{
			Volume = 1,
			Security = security,
			Portfolio = portfolio,
			Connector = connector,

			// by default interval is 1 min,
			// it is excessively for time range with several months
			UnrealizedPnLInterval = ((stopTime - startTime).Ticks / 1000).To<TimeSpan>()
		};

		...

    var curveItems = Curve.CreateCurve(LocalizedStrings.Str3026Params.Put(period.Item1, period.Item2), period.Item3, ChartIndicatorDrawStyles.Line);

		strategy.PnLChanged += () =>
		{
			var data = new EquityData
			{
				Time = strategy.CurrentTime,
				Value = strategy.PnL,
			};

			this.GuiAsync(() => curveItems.Add(data));
		};

		Stat.AddStrategies(new[] { strategy });

		return strategy;
	});
]]></code>
				</content>
			</step>
			<step>
				<content>
					<para>
						The testing starts:
					</para>
					<code language="C#"><![CDATA[
// start emulation
batchEmulation.Start(strategies, periods.Length);
]]></code>
				</content>
			</step>
		</steps>
    </procedure>

	<!--<nextSteps>
      <content>
        <para>Optional next steps after reading this walk-through</para>
      </content>
    </nextSteps>-->
    
    <relatedTopics>
      <!-- Supported Link Types
    
         All of the following linking mechanisms may be used in the topic's content 
         as well as in the related topics section.
    
    Linking to API reference documentation: 
    
		    <codeEntityReference>API reference ID</codeEntityReference>

    Linking to external resources and custom HTML topics: 

        <externalLink>
          <linkText>  Required hyperlink text  </linkText>
          <linkAlternateText>  Optional link title  </linkAlternateText>
          <linkUri>  Required URI  </linkUri>
        </externalLink>
    
    Linking to other conceptual topics: 
    
        <link xlink:href="GUID topic name (without file extension)" />
                
    Linking to named references:
    
        (Refer to the project's Help\Settings\links.xml file for more information)
    
        <link xref="id"> Optional link text </link>
        <link vref="id or URI"> Optional link text </link>
        
    -->

      <!-- Example Usage 

      <codeEntityReference>T:MyNamespace.MyClass</codeEntityReference>
      <codeEntityReference>P:MyNamespace.MyClass.MyProp</codeEntityReference>
      <codeEntityReference>M:System.IO.File.OpenText(System.String)</codeEntityReference>

      <externalLink>
        <linkText>Sandcastle Styles</linkText>
        <linkAlternateText>Sandcastle Styles on CodePlex</linkAlternateText>
        <linkUri>http://www.codeplex.com/SandcastleStyles</linkUri>
      </externalLink>

      <externalLink>
        <linkText>Change Log</linkText>
        <linkUri>ChangeLog.html</linkUri>
      </externalLink>

      <link xlink:href="2BFD9215-1216-403d-8C46-8420A4D01B83"/>
      
      <link xref="home">Our Home Page</link>
      <link vref="/controls/design.aspx">Control Architecture</link>
      -->
    </relatedTopics>
    
  </developerWalkthroughDocument>
</topic>
