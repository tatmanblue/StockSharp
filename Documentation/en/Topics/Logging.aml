<?xml version="1.0" encoding="utf-8"?>
<topic id="82437493-cd53-41eb-b756-d913af0f4f8e" revisionNumber="0">
	<developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">

		<introduction>
			<para>
				For the monitoring of trading algorithms written in <token>stocksharp</token>, you can use the special
				<codeEntityReference>T:StockSharp.Logging.LogManager</codeEntityReference> class. This class receives the
				<codeEntityReference>T:StockSharp.Logging.LogMessage</codeEntityReference> messages from the
				<codeEntityReference qualifyHint="true">P:StockSharp.Logging.LogManager.Sources</codeEntityReference> through the 
				<codeEntityReference qualifyHint="true">E:StockSharp.Logging.ILogSource.Log</codeEntityReference> event and passes them to the
				<codeEntityReference qualifyHint="true">P:StockSharp.Logging.LogManager.Listeners</codeEntityReference> listeners. Therefore, the algorithm
				code will be able to pass debug information (for example, about errors occurred during the operation, or additional information about mathematical
				calculations) and <codeEntityReference>T:StockSharp.Logging.LogManager</codeEntityReference> will decide how to display this information for the operator.
			</para>
			<para>
				Normally the <token>stocksharp</token> contains the following implementations of the <codeEntityReference>T:StockSharp.Logging.ILogListener</codeEntityReference>,
				whose choice affects where messages received from strategies will be passed:
			</para>
			<list class="ordered">
				<listItem>
					<codeEntityReference>T:StockSharp.Logging.FileLogListener</codeEntityReference> - writes messages into a text file. It is recommended to use for
					already created algorithm, and to use the logs in cases of force majeure.
				</listItem>
				<listItem>
					<codeEntityReference>T:StockSharp.Xaml.SoundLogListener</codeEntityReference> - plays the audio message when a new message arrives. It is
					recommended to use if the algorithm is not under continuous monitoring.
				</listItem>
				<listItem>
					<codeEntityReference>T:StockSharp.Logging.ConsoleLogListener</codeEntityReference> - outputs messages to the console window (if the algorithm does
					not have a window, it will be automatically created). It is recommended to use for debugging and testing the algorithm
				</listItem>
				<listItem>
					<codeEntityReference>T:StockSharp.Logging.DebugLogListener</codeEntityReference> - outputs messages to the debug window. This window can be viewed
					through special programs such as <token>dbgview</token>. It is recommended to use for debugging and testing the algorithm.
				</listItem>
				<listItem>
					<codeEntityReference>T:StockSharp.Logging.EmailLogListener</codeEntityReference> - sends messages to the specified email address. It is recommended
					to use if the algorithm is located at not controlled computer (at hoster’s server).
				</listItem>
				<listItem>
					<codeEntityReference>T:StockSharp.Xaml.GuiLogListener</codeEntityReference> - displays messages through the special
					<codeEntityReference>T:StockSharp.Xaml.LogWindow</codeEntityReference> window. Able to work in two modes: when all messages output in a single
					window, and when a separate window is created for each <codeEntityReference>T:StockSharp.Logging.ILogSource</codeEntityReference>.
					It is recommended to use if the algorithm has a graphical interface.
				</listItem>
			</list>
			<para>
				<codeEntityReference>T:StockSharp.Logging.LogListener</codeEntityReference> can be configured to filter messages through the
				<codeEntityReference>P:StockSharp.Logging.LogListener.Filters</codeEntityReference> property. For example, through the filters you can specify what type
				of messages should be processed. This is particularly useful when the <codeEntityReference>T:StockSharp.Xaml.SoundLogListener</codeEntityReference>
				or the <codeEntityReference>T:StockSharp.Logging.EmailLogListener</codeEntityReference> is used, in order that, for example, to send e-mail in emergency
				situations only (trade algorithm error) rather than on each debug message.
			</para>
		</introduction>

		

		<!-- One or more procedure or section elements -->

		<!--<section>
      <title>Optional section</title>

      <content>
        <para>Some topic content</para>
      </content>
    </section>-->

    <nextSteps>
      <content>
        <para><link xlink:href="eca7454c-0532-4aaf-92bf-7a3d0cba635b">Strategy logging</link></para>
        <para><link xlink:href="9619f1db-064f-421f-967e-4c15a5b0aa71">IConnector logging</link></para>
        <para><link xlink:href="f9e75266-8f0e-4983-8319-7a41d53e0f39">Other logs sources</link></para>
        <para><link xlink:href="1bed8343-9171-49ce-8259-f44007e01a78">Visual monitoring</link></para>
        <para><link xlink:href="a711d06d-9d1d-40b8-89bf-ee62d817a878">ILogListener creating</link></para>
      </content>
    </nextSteps>

		<relatedTopics>
			<!-- Supported Link Types
    
         All of the following linking mechanisms may be used in the topic's content 
         as well as in the related topics section.
    
    Linking to API reference documentation: 
    
		    <codeEntityReference>API reference ID</codeEntityReference>

    Linking to external resources and custom HTML topics: 

        <externalLink>
          <linkText>  Required hyperlink text  </linkText>
          <linkAlternateText>  Optional link title  </linkAlternateText>
          <linkUri>  Required URI  </linkUri>
        </externalLink>
    
    Linking to other conceptual topics: 
    
        <link xlink:href="GUID topic name (without file extension)" />
                
    Linking to named references:
    
        (Refer to the project's Help\Settings\links.xml file for more information)
    
        <link xref="id"> Optional link text </link>
        <link vref="id or URI"> Optional link text </link>
        
    -->

			<!-- Example Usage 

      <codeEntityReference>T:MyNamespace.MyClass</codeEntityReference>
      <codeEntityReference>P:MyNamespace.MyClass.MyProp</codeEntityReference>
      <codeEntityReference>M:System.IO.File.OpenText(System.String)</codeEntityReference>

      <externalLink>
        <linkText>Sandcastle Styles</linkText>
        <linkAlternateText>Sandcastle Styles on CodePlex</linkAlternateText>
        <linkUri>http://codeplex.com/SandcastleStyles</linkUri>
      </externalLink>

      <externalLink>
        <linkText>Change Log</linkText>
        <linkUri>ChangeLog.html</linkUri>
      </externalLink>

      <link xlink:href="2BFD9215-1216-403d-8C46-8420A4D01B83"/>
      
      <link xref="home">Our Home Page</link>
      <link vref="/controls/design.aspx">Control Architecture</link>
      -->
		</relatedTopics>

	</developerWalkthroughDocument>
</topic>
