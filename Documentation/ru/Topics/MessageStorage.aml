<?xml version="1.0" encoding="utf-8"?>
<topic id="ac584200-f06a-49e6-b2fd-141b5fc898f9" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
   	<introduction>
					<para>
	    Наряду с использованием хранилищ торговых объектов, можно использовать хранилища сообщений. Работа с этими хранилищами также осуществляется
	    через интерфейс <codeEntityReference>T:StockSharp.Algo.Storages.IMarketDataStorage`1</codeEntityReference>. Например, для работы со свечами
	    можно использовать хранилище типа IMarketDataStorage&lt;CandleMessage&gt;.
	    <codeEntityReference qualifyHint="false">T:StockSharp.Algo.Storages.IStorageRegistry</codeEntityReference> также содержит набор методов для получения
	    нужных хранилищ сообщений. Так хранилище временных свечей можно получить, как показано в следующем фрагменте кода.
    </para>
    <code language="C#">
	<![CDATA[
   var security = new Security() { Id = "RIM5@FORTS" };
   var candleMessageStorage = _storage.GetCandleMessageStorage(typeof(TimeFrameCandleMessage), security, TimeSpan.FromMinutes(1));
	]]>
</code>
	<para>
	    Далее с хранилищем можно работать при помощи методов
	    
	    <codeEntityReference qualifyHint="true">M:StockSharp.Algo.Storages.IMarketDataStorage.Load(System.DateTime)</codeEntityReference> и/или 
	    <codeEntityReference qualifyHint="true">M:StockSharp.Algo.Storages.IMarketDataStorage.Save(System.Collections.IEnumerable)</codeEntityReference>, как показано в примере в
	    <link xlink:href="e4a57b52-bd14-4640-a7c7-0979dba1ad0a">предыдущем разделе</link>.
    </para>
   	<para>
	    Обратите внимание, что <token>stocksharp</token> позволяет приводить типы хранилища торговых объектов к соответствующим типам
	    хранилищ сообщений и наоборот. Например, IMarketDataStorage&lt;MarketDepth&gt; можно привести к типу IMarketDataStorage&lt;QuoteChangeMessage&gt; и наоборот.
    </para>
    <code language="C#">
	<![CDATA[
	
   var security = new Security() { Id = "RIM5@FORTS" };
   
   var depthStorage = _storage.GetMarketDepthStorage(_security);
   var quoteMessageStorage = depthStorage as IMarketDataStorage<QuoteChangeMessage>;
   
   var quoteMessageStorage1 = _storage.GetQuoteMessageStorage(_security);
   var depthStorage1 = quoteMessageStorage1 as IMarketDataStorage<MarketDepth>;

	]]>
</code>
<para>
	Следует обратить внимание на актуальность использования хранилища сообщений для хранения собственных заявок и сделок. Дело в том, что для этих торговых
	объектов нет соответствующих хранилищ. В этом случае придется использовать хранилище сообщений IMarketDataStorage&lt;ExecutionMessage&gt;.
	В следующем примере показано, как сохранить в хранилище собственные сделки.
</para>
	
	</introduction>

	<procedure>
		<title>Пример сохранения собственных сделок</title>
		<steps class="ordered">
			<step>
				<content>
				<para>
				 Сначала создается экземпляр коннектора, а также хранилище. 
				 Кроме того мы определяем идентификатор инструмента, с которым будем работать
				 и декларируем переменную для хранилища транзакций. 
				 Само хранилище транзакций для заданного инструмента будет получено в событии получения
				 инструментов при помощи метода	
				 <codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.Storages.IMessageStorageRegistry.GetTransactionStorage(StockSharp.Messages.SecurityId,StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)</codeEntityReference>.
		</para>		

<code language="C#">
					<![CDATA[
// Создаем коннектор
var connector = new Connector();

// Путь к корневой папке хранилища
var storagePath = @"....";

var securityId = "RIM5@FORTS";

// Создаем хранилище
var storage = new StorageRegistry() { DefaultDrive = new LocalMarketDataDrive(storagePath) };

// Декларируем хранилище транзакций
IMarketDataStorage<ExecutionMessage> tranStorage = null;

// В обработчике событии получения инструментов
// получаем хранилище транзакций для заданного инструмента
connector.NewSecurity += security =>
{
		if (security.Id == securityId)
			tranStorage = storage.GetTransactionStorage(security.ToSecurityId());
};

 ]]>
					</code>
				</content>
			</step>
			<step>
		<content>

			<para>Сохранение собственных сделок будет выполняться в обработчике события
			<codeEntityReference qualifyHint="true">E:StockSharp.Algo.Connector.NewMyTrade</codeEntityReference> при помощи метода
			<codeEntityReference qualifyHint="true">M:StockSharp.Algo.Storages.IMarketDataStorage.Save(System.Collections.IEnumerable)</codeEntityReference>. 
			Перед сохранением список собственных сделок приводится к типу IEnumerable&lt;ExecutionMessage&gt;.
			Сама процедура выставления заявок в этим примере опущена. 
            </para>
					<code language="C#">
					<![CDATA[
// сохраняем сделки в хранилище
connector.NewMyTrade += trade =>
{
    tranStorage.Save(new[] {trade.ToMessage()});
};
]]>
					</code>
				</content>
			</step>
		</steps>
	</procedure>
  
    
      <relatedTopics>
      <link xlink:href="e4a57b52-bd14-4640-a7c7-0979dba1ad0a">Api</link>
    </relatedTopics>
    
    
  </developerConceptualDocument>
</topic>