<?xml version="1.0" encoding="utf-8"?>
<topic id="fb79e67d-945c-493d-bdac-85d0040af828" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
       <para>
       Механизм сообщений позволяет создавать собственные подключения к любой внешней торговой системе. Для этого необходимо 
       создать собственный класс <legacyItalic>адаптера сообщений</legacyItalic>, 
       унаследованный от абстрактного класса <codeEntityReference>T:StockSharp.Messages.MessageAdapter</codeEntityReference>.
       </para>
       <para>
       	При разработке собственного адаптера сообщений необходимо решить следующие задачи:
       </para>
       
		<list class="ordered">
  			<listItem>
  				<para>Написать код, преобразующий исходящие сообщения <token>stocksharp</token> в команды внешней системы.</para>
  			</listItem>
  			<listItem>
  				<para>Написать код, преобразующий информацию, поступающую от внешней системы, во входящие сообщения.</para>
  			</listItem>
  			<listItem>
  				<para>Выполнить преобразование кодированной информации внешней системы (коды инструментов и площадок, перечисления и т.п.) в типы <token>stocksharp</token>.</para>
  			</listItem>
  			<listItem>
  				<para>Выполнить дополнительные настройки, связанные с особенностями внешней торговой системы.</para>
  			</listItem>
		</list>
		
       <para>
       	Прежде чем приступить к описанию разработки собственного адаптера, рассмотрим процесс создания и обработки входящих и исходящих сообщений в <token>stocksharp</token>
		на примере сообщения	<codeEntityReference>T:StockSharp.Messages.ConnectMessage</codeEntityReference>. Предположим, что в программе был вызван метод
						<codeEntityReference>M:StockSharp.Algo.Connector.Connect</codeEntityReference>, тогда в базовом классе  
						<codeEntityReference>T:StockSharp.Algo.Connector</codeEntityReference> будет происходить следующее:
		</para>
		<list class="ordered">
  			<listItem>
  				<para>Вызывается защищенный метод
  				<codeEntityReference qualifyHint="true">M:StockSharp.Algo.Connector.OnConnect</codeEntityReference>, 
  				в котором создается сообщение и передается в метод
  					<codeEntityReference qualifyHint="true">M:StockSharp.Algo.Connector.SendInMessage(StockSharp.Messages.Message)</codeEntityReference>.</para>
  				<code language="C#">
protected virtual void OnConnect()
{
	SendInMessage(new ConnectMessage());
}
  				</code>
  			</listItem>
  			<listItem>
  			<para>В методе <codeEntityReference qualifyHint="true">M:StockSharp.Algo.Connector.SendInMessage(StockSharp.Messages.Message)</codeEntityReference>
  			сообщение передается в одноименный метод адаптера.</para>
  			<code language="C#">
public void SendInMessage(Message message)
{
	_inAdapter.SendInMessage(message);
}
  			</code>
  			</listItem>
  			<listItem>
  				<para>В методе <codeEntityReference qualifyHint="true">M:StockSharp.Messages.MessageAdapter.SendInMessage(StockSharp.Messages.Message)</codeEntityReference> адаптера
  					выполняются дополнительные проверки. Если все нормально, то сообщение передается в метод
  					<codeEntityReference qualifyHint="true">M:StockSharp.Messages.MessageAdapter.OnSendInMessage(StockSharp.Messages.Message)</codeEntityReference> (см.ниже).
  					Если сгенерирована ошибка, то создается создается
  					новое входящее сообщение аналогичного типа, в свойство 
  					<codeEntityReference>P:StockSharp.Messages.BaseConnectionMessage.Error</codeEntityReference>
  					сообщения передается объект исключения. Это новое сообщение передается в метод 
  					<codeEntityReference>M:StockSharp.Messages.MessageAdapter.SendOutMessage(StockSharp.Messages.Message)</codeEntityReference>,
  					в котором будет сгенерировано событие появления нового входящего сообщения 
  					<codeEntityReference>E:StockSharp.Messages.MessageAdapter.NewOutMessage</codeEntityReference>,
  					сигнализирующего об ошибке.
  				</para>
  			</listItem>
		</list>
		
		<para>
			Входящие сообщения создаются при помощи метода 
			<codeEntityReference qualifyHint="true">M:StockSharp.Messages.MessageAdapter.SendOutMessage(StockSharp.Messages.Message)</codeEntityReference>,
			в который передается объект сообщения. В этом методе генерируется событие нового входящего сообщения 
			<codeEntityReference>E:StockSharp.Messages.MessageAdapter.NewOutMessage</codeEntityReference>.
			Далее это событие обрабатывается в базовом классе коннектора в защищенном методе
			<codeEntityReference qualifyHint="true">M:StockSharp.Algo.Connector.OnProcessMessage(StockSharp.Messages.Message)</codeEntityReference>, 
			где в зависимости от ситуации сообщение преобразуется в соответствующий тип <token>stocksharp</token> и генерируется событие коннектора, 
			а также могут создаваться дополнительное исходящие сообщения.
		</para>
		
		<para>
		Ниже описан процесс создания собственного адаптера для <token>smartcom</token>.
		</para>
       
       
    </introduction>
    
    <procedure>
			<title>Пример создания адаптера сообщений SmartCom</title>
			<steps class="ordered">
			   <step>
					<content>
						<para>
						<legacyBold>Создание класса адаптера.</legacyBold>
						</para>
						<para>
						 Вначале создаем класс адаптера сообщений <legacyBold>SmartAdapter</legacyBold> унаследованный от
						 абстрактного класса <codeEntityReference>T:StockSharp.Messages.MessageAdapter</codeEntityReference>.
						 В область пространств имен, наряду с другими ссылками, необходимо добавить SmartCOM3Lib.
						 Также создадим переменную <legacyBold>_smartCom</legacyBold> для ссылки на объект библиотеки <token>smartcom</token>.
						</para>
						<code language="C#">
public class SmartAdapter: MessageAdapter 
{
	private SmartCOM3Lib.StServer _smartCom;
}						
						
</code>
					</content>
				</step>
				<step>
					<content>
						<para>
						<legacyBold>Конструктор адаптера.</legacyBold>
						</para>
						<list class="bullet">
  							<listItem>
  								<para>В конструктор адаптера передается генератор идентификаторов транзакций, который будет использоваться для создания идентификаторов сообщений.</para>
  							</listItem>
  							<!--<listItem>
  								<para>Далее заполняем словарь <codeEntityReference>P:StockSharp.Messages.MessageAdapter.SecurityClassInfo</codeEntityReference>. 
  								Этот словарь сопоставляет коды классов инструментов в <token>smartcom</token> с типом инструмента 
  								<codeEntityReference>P:StockSharp.BusinessEntities.Security.Type</codeEntityReference> и кодом площадки в <token>stocksharp</token>.</para>
  							</listItem>
  							<listItem>
  								<para>Заполняется словарь <legacyBold>PortfolioBoardCodes</legacyBold>, который сопоставляет
  								коды площадок для портфелей.</para>
  							</listItem>-->
  							<listItem>
  								<para>
  								При помощи метода 
  								<codeEntityReference>M:StockSharp.Messages.Extensions.AddSupportedMessage(StockSharp.Messages.IMessageAdapter,StockSharp.Messages.MessageTypes)</codeEntityReference>
    							добавляем в массив <codeEntityReference>P:StockSharp.Messages.MessageAdapter.SupportedInMessages</codeEntityReference> типы сообщений, 
    							которые будет поддерживать адаптер.
  								</para>
  							</listItem>
						</list>
	
						<code language="C#">
						<![CDATA[
public SmartAdapter(IdGenerator transactionIdGenerator)
			: base(transactionIdGenerator)
{
	// Сообщения, связанные с маркет-данными
    this.AddSupportedMessage(MessageTypes.MarketData);
    this.AddSupportedMessage(MessageTypes.SecurityLookup);

    // Сообщения, связанные с транзакциями
    this.AddSupportedMessage(MessageTypes.OrderCancel);
    this.AddSupportedMessage(MessageTypes.OrderGroupCancel);
    this.AddSupportedMessage(MessageTypes.OrderPairReplace);
    this.AddSupportedMessage(MessageTypes.OrderRegister);
    this.AddSupportedMessage(MessageTypes.OrderReplace);
    // this.AddSupportedMessage(MessageTypes.OrderStatus);
    this.AddSupportedMessage(MessageTypes.Portfolio);
    this.AddSupportedMessage(MessageTypes.PortfolioLookup);
    this.AddSupportedMessage(MessageTypes.Position);
    
    // обозначаем, что адаптер предоставляет результаты запросов поиска инструментов и портфелей
    this.AddSupportedOutMessage(MessageTypes.SecurityLookupResult);
	this.AddSupportedOutMessage(MessageTypes.PortfolioLookupResult);
}
						
]]>
						
						</code>
					</content>
				</step>
				<step>
					<content>
					<para>
					 Метод <codeEntityReference>M:StockSharp.Messages.MessageAdapter.OnSendInMessage(StockSharp.Messages.Message)</codeEntityReference>.
					</para>
						<para>
					    Далее необходимо переопределить метод 
					    <codeEntityReference>M:StockSharp.Messages.MessageAdapter.OnSendInMessage(StockSharp.Messages.Message)</codeEntityReference>. 
					    Как говорилось выше, в этот метод передаются все исходящие сообщения и для каждого типа сообщения нужно написать код, 
					    преобразующий сообщения в команды <token>smartcom</token>.
						</para>
						<para>
						При получении сообщения <codeEntityReference qualifyHint="true">F:StockSharp.Messages.MessageTypes.Reset</codeEntityReference> 
						необходимо выполнить "обнуление" состояния и освободить ресурсы.
						По завершении этих операций нужно отправить исходящие сообщение <codeEntityReference>T:StockSharp.Messages.ResetMessage</codeEntityReference>.
						</para>
						<para>
						 При поступлении сообщения <codeEntityReference qualifyHint="true">F:StockSharp.Messages.MessageTypes.Connect</codeEntityReference> 
						 инициализируем переменную _smartCom, подписываемся на события <token>smartcom</token> и устанавливаем соединение при помощи метода 
						 <legacyBold>Connect</legacyBold> нативного API. В случае удачного соединения должно наступить событие 
						 <legacyBold>StServer.Connected</legacyBold>.
						</para>

						<code language="C#">
						<![CDATA[
protected override void OnSendInMessage(Message message)
{
    switch (message.Type)
    {
         case MessageTypes.Reset:
         {
              _lookupSecuritiesId = 0;
              _lookupPortfoliosId = 0;

              if (_smartCom != null)
              {
                  try
                  {
                      DisposeSmartCom();
                  }
                  catch (Exception ex)
                  {
                      SendOutError(ex);
                  }

                  try
                  {
                      _smartCom.disconnect();
                  }
                  catch (Exception ex)
                  {
                      SendOutError(ex);
                  }

                   _smartCom = null;
              }

              SendOutMessage(new ResetMessage());

              break;
        }

        case MessageTypes.Connect:
        {
            if (_smartCom != null)
                throw new InvalidOperationException("smartCom != null");

            _smartCom = new StServer();

            _smartCom.Connected += smartCom_Connected;
            _smartCom.Disconnected += smartCom_Disconnected;
            _smartCom.AddPortfolio += smartCom_AddPortfolio;
            _smartCom.AddSymbol += smartCom_AddSymbol;
            _smartCom.SetPortfolio += smartCom_SetPortfolio;
            _smartCom.UpdatePosition += smartCom_UpdatePosition;
            _smartCom.AddTick += smartCom_AddTick;
            _smartCom.UpdateBidAsk += smartCom_UpdateBidAsk;
            _smartCom.UpdateQuote +=  smartCom_UpdateQuote;
            _smartCom.AddTrade += smartCom_AddTrade;
            _smartCom.UpdateOrder += smartCom_UpdateOrder;
            _smartCom.SetMyClosePos += smartCom_SetMyClosePos;
            _smartCom.SetMyOrder += smartCom_SetMyOrder;
            _smartCom.SetMyTrade += smartCom_SetMyTrade;
            _smartCom.OrderSucceeded += smartCom_OrderSucceeded;
            _smartCom.OrderFailed += smartCom_OrderFailed;
            _smartCom.OrderCancelFailed += smartCom_OrderCancelFailed;
            _smartCom.OrderCancelSucceeded += smartCom_OrderCancelSucceeded;
            _smartCom.OrderMoveFailed += smartCom_OrderMoveFailed;
            _smartCom.OrderMoveSucceeded += smartCom_OrderMoveSucceeded;

            _smartCom.connect(Address, Port, Login, Password);

            break;
        }

        case MessageTypes.Disconnect:
        {
            if (_smartCom == null)
                throw new InvalidOperationException(LocalizedStrings.Str1856);
                
            _smartCom.disconnect();

            break;
        }

        case MessageTypes.OrderRegister:
            // TODO
            break;

        case MessageTypes.OrderCancel:
            // TODO
            break;

        case MessageTypes.OrderGroupCancel:
             // TODO
             break;

        case MessageTypes.OrderReplace:
             // TODO
             break;

        case MessageTypes.Portfolio:
             // TODO
             break;

        case MessageTypes.PortfolioLookup:
             ProcessPortolioLookupMessage((PortfolioLookupMessage)message);
             break;

        case MessageTypes.MarketData:
             ProcessMarketDataMessage((MarketDataMessage)message);
             break;

        case MessageTypes.SecurityLookup:
             ProcessSecurityLookupMessage((SecurityLookupMessage)message);
             break;
    }
}
]]>			
						</code>
					</content>
				</step>
				<step>
				<content>
					<para>
					 Событие <legacyBold>StServer.Connected</legacyBold>.
					</para>
					<para>
					 В обработчике события соединения нативного API необходимо послать исходящее сообщение <codeEntityReference>T:StockSharp.Messages.ConnectMessage</codeEntityReference>.
					 При обработке этого сообщения в коде класса <codeEntityReference>T:StockSharp.Algo.Connector</codeEntityReference> 
					 будут проверены наличие в <codeEntityReference>P:StockSharp.Messages.MessageAdapter.SupportedInMessages</codeEntityReference> следующие типов сообщений:
					 </para>
					<list class="bullet">
  						<listItem>
  							<para>
  								<codeEntityReference>F:StockSharp.Messages.MessageTypes.PortfolioLookup</codeEntityReference> - необходимо ли сообщение
  								<codeEntityReference>T:StockSharp.Messages.PortfolioLookupMessage</codeEntityReference> для получения портфелей и позиций.
  							</para>
  						</listItem>
  						<listItem>
  							<para>
  								<codeEntityReference>F:StockSharp.Messages.MessageTypes.SecurityLookup</codeEntityReference> - необходимо ли сообщение
  								<codeEntityReference>T:StockSharp.Messages.SecurityLookupMessage</codeEntityReference> для получения инструментов.
  							</para>
  						</listItem>
  						<listItem>
  							<para>
  								<codeEntityReference>F:StockSharp.Messages.MessageTypes.OrderStatus</codeEntityReference> - необходимо ли сообщение
  								<codeEntityReference>T:StockSharp.Messages.OrderStatusMessage</codeEntityReference> для получения заявок и собственных сделок.
  							</para>
  						</listItem>
					</list>
					<para>
					 Если типы сообщения установлены у адаптера, то соответствующие сообщения будут посланы. В нашем примере (см. Конструктор адаптера.) в этот список
					 были добавлены типы <codeEntityReference qualifyHint="true">F:StockSharp.Messages.MessageTypes.SecurityLookup</codeEntityReference> и  
					 <codeEntityReference qualifyHint="true">F:StockSharp.Messages.MessageTypes.PortfolioLookup</codeEntityReference>, поэтому
					 следует ожидать получения исходящих сообщений <codeEntityReference>T:StockSharp.Messages.SecurityLookupMessage</codeEntityReference> и
					 <codeEntityReference>T:StockSharp.Messages.PortfolioLookupMessage</codeEntityReference>.
					</para>
					<code language="C#">
						<![CDATA[
private void smartCom_Connected()
{
    SendOutMessage(new ConnectMessage());
}
						]]>	
					</code>
				</content>
				</step>
				<step>
				<content>
				<para>
				Исходящие сообщения <codeEntityReference>T:StockSharp.Messages.PortfolioLookupMessage</codeEntityReference> и <codeEntityReference>T:StockSharp.Messages.SecurityLookupMessage</codeEntityReference>.
				</para>
				<para>
				При получении этих сообщений необходимо вызвать функции <token>smartcom</token>, запрашивающие портфели и инструменты соответственно.
				Вызов этих функций приведет к возникновению событий 
				<legacyBold>StServer.AddPortfolio</legacyBold> (портфели) и <legacyBold>StServer.AddSymbol</legacyBold> (инструменты).
				</para>
				<code language="C#">
						<![CDATA[
// Запрашиваем список портфелей
private void ProcessPortolioLookupMessage(PortfolioLookupMessage pfMsg)
{
    if (_lookupPortfoliosId == 0)
    {
        _lookupPortfoliosId = pfMsg.TransactionId;
        _smartCom.GetPrortfolioList(); 
    }
    else
        SendOutError(LocalizedStrings.Str1868);
}

// Запрашиваем инструменты
private void ProcessSecurityLookupMessage(SecurityLookupMessage message)
{
    if (_lookupSecuritiesId == 0)
    {
        _lookupSecuritiesId = message.TransactionId;
        _smartCom.GetSymbols();
    }
    else
        SendOutError(LocalizedStrings.Str1854);
}
						
						]]>	
				</code>
				
				</content>
				</step>
				<step>
				<content>
				<para>
					 Событие <legacyBold>StServer.AddPortfolio</legacyBold>.
				</para>
                <para>
					 В обработчике события <legacyBold>StServer.AddPortfolio</legacyBold> полученную информацию о портфеле
					 необходимо преобразовать во входящее сообщение <codeEntityReference>T:StockSharp.Messages.PortfolioMessage</codeEntityReference>.
					 А после получения всех портфелей необходимо послать сообщение 
					 <codeEntityReference>T:StockSharp.Messages.SubscriptionFinishedMessage</codeEntityReference>.
					 Обратите внимание, что в последнем случае свойству 
					 <codeEntityReference>P:StockSharp.Messages.BaseResultMessage`1.OriginalTransactionId</codeEntityReference> нужно
					 присвоить значение <legacyBold>TransactionId</legacyBold> соответствующего исходящего сообщения.  
				</para>
				<code language="C#">
				<![CDATA[
private void smartCom_AddPortfolio(int row, int nrows, string portfolioName, string portfolioExch, SmartCOM3Lib.StPortfolioStatus portfolioStatus)
{
	SendOutMessage(new PortfolioMessage
    {
		PortfolioName = portfolioName,
		BoardCode = PortfolioBoardCodes.TryGetValue(portfolioExch),
     });

     if ((row + 1) < nrows)
          return;

     SendOutMessage(new SubscriptionFinishedMessage { OriginalTransactionId = _lookupPortfoliosId });
     _lookupPortfoliosId = 0;
}
				]]>	
				</code>
				</content>
				</step>
				<step>
				<content>
				<para>
					 Событие <legacyBold>StServer.AddSymbol</legacyBold>.
				</para>
				<para>
					 В обработчике события <legacyBold>StServer.AddSymbol</legacyBold> полученную информацию об инструменте
					 необходимо преобразовать во входящее сообщение <codeEntityReference>T:StockSharp.Messages.SecurityMessage</codeEntityReference>.
					 А после получения всех инструментов необходимо послать сообщение 
					 <codeEntityReference>T:StockSharp.Messages.SubscriptionFinishedMessage</codeEntityReference>.
					 Обратите внимание, что свойству <legacyBold>OriginalTransactionId</legacyBold> обоих входящих сообщений нужно 
					 присвоить значение <legacyBold>TransactionId</legacyBold> соответствующего исходящего сообщения.  
				</para>
				<code language="C#">
				<![CDATA[
private void smartCom_AddSymbol(int row, int rowCount, string smartId, string name, string secCode, string secClass, int decimals, int lotSize, double stepPrice, double priceStep,
            string isin, string board, System.DateTime expiryDate, double daysBeforeExpiry, double strike)
{
	if (secCode.IsEmpty())
    	secCode = smartId;

    var securityId = new SecurityId
    {
        SecurityCode = secCode,
        BoardCode = board,
        Native = smartId,
        Isin = isin
    };

    if (secClass.IsEmpty())
        secClass = board;

    DateTime? expDate = DateTime.FromOADate(0) == expiryDate ? (DateTime?)null : expiryDate;


    var secMsg = new SecurityMessage
    {
        PriceStep = priceStep.ToDecimal(),
        Decimals = decimals,
        Multiplier = lotSize,
        Name = name,
        ShortName = name,
        ExpiryDate = expDate == null ? (DateTimeOffset?)null : expDate.Value.ApplyTimeZone(TimeHelper.Moscow),
        ExtensionInfo = new Dictionary<object, object>
		{
					{ "Class", secClass }
		},
        OriginalTransactionId = _lookupSecuritiesId
     };

     if (secClass.CompareIgnoreCase("IDX"))
     {
         secMsg.SecurityType = SecurityTypes.Index;

         switch (secMsg.SecurityId.BoardCode)
         {
             case "RUSIDX":
                  securityId.BoardCode = secCode.ContainsIgnoreCase("MICEX") || secCode.ContainsIgnoreCase("MCX") ? ExchangeBoard.Micex.Code : ExchangeBoard.Forts.Code;
                  break;
         }
     }
     else
     {
         var info = SecurityClassInfo.GetSecurityClassInfo(secClass);

         secMsg.SecurityType = info.Item1;
         securityId.BoardCode = info.Item2;

         if (ExchangeBoard.GetOrCreateBoard(info.Item2).IsMicex
             &&
             /* проверяем, что не началась ли трансляция правильных дробных шагов */
                    secMsg.PriceStep != null && secMsg.PriceStep == (int)secMsg.PriceStep)
         {
             secMsg.PriceStep = 1m / 10m.Pow(secMsg.PriceStep.Value);
         }
     }

     secMsg.SecurityId = securityId;

     if (secMsg.SecurityType == SecurityTypes.Option)
     {
         var optionInfo = secMsg.Name.GetOptionInfo(ExchangeBoard.Forts);

         if (optionInfo != null)
         {
             if (!secCode.IsEmpty())
             {
                 var futureInfo = optionInfo.UnderlyingSecurityId.GetFutureInfo(secCode, ExchangeBoard.Forts);
                 if (futureInfo != null)
                        secMsg.UnderlyingSecurityCode = futureInfo.SecurityId.SecurityCode;
             }

             secMsg.ExpiryDate = optionInfo.ExpiryDate;
             secMsg.OptionType = optionInfo.OptionType;
             secMsg.Strike = optionInfo.Strike;
        }
     }

     SendOutMessage(secMsg);

     var stpPrice = stepPrice.ToDecimal();

     if (stepPrice != null)
     {
         SendOutMessage(
             new Level1ChangeMessage
             {
                        SecurityId = securityId,
                        ServerTime = CurrentTime.Convert(TimeHelper.Moscow),
             }
             .TryAdd(Level1Fields.StepPrice, stpPrice.Value));
     }

     if ((row + 1) < rowCount)
          return;

     SendOutMessage(new SubscriptionFinishedMessage { OriginalTransactionId = _lookupSecuritiesId });
      _lookupSecuritiesId = 0;
}
				]]>	
				</code>
				</content>
				</step>
				
				<step>
				<content>
				<para>
				 <legacyBold>Регистрация/отмена регистрации сделок.</legacyBold>
				</para>
				<para>
				 При вызове методов 
<codeEntityReference>M:StockSharp.Algo.Connector.SubscribeTrades(StockSharp.BusinessEntities.Security,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int64},StockSharp.Messages.MarketDataBuildModes,System.Nullable{StockSharp.Messages.MarketDataTypes},StockSharp.Messages.IMessageAdapter)</codeEntityReference> 
или
				 <codeEntityReference>M:StockSharp.Algo.Connector.UnSubscribeTrades(StockSharp.BusinessEntities.Security)</codeEntityReference> 
будет получено исходящее сообщение 
<codeEntityReference>T:StockSharp.Messages.MarketDataMessage</codeEntityReference>
.
				 </para>
				 <para>
				 При обработке этого сообщения необходимо вызвать методы <token>smartcom</token> регистрирующий/отменяющий регистрацию получения сделок.
				 </para>
				 <para>
				 Так как сообщение используется для работы со всеми типами рыночных данных, то для вычленения конкретного типа нужно использовать свойство 
				 <codeEntityReference>P:StockSharp.Messages.MarketDataMessage.DataType</codeEntityReference>. Для сделок значение этого свойства равно
				 <codeEntityReference qualifyHint="true">F:StockSharp.Messages.MarketDataTypes.Trades</codeEntityReference>.
				</para>
				<para>
				  После вызова метода <legacyBold>StServer.ListenTicks</legacyBold> сделки будут поступать в событии <legacyBold>StServer.AddTick</legacyBold>.
				 </para>
				
				<code language="C#">
                <![CDATA[
private void ProcessMarketDataMessage(MarketDataMessage mdMsg)
{
    
    // Получаем код инструмента, используемый в SmartCom
    var smartId = (string)mdMsg.SecurityId.Native;

    if (smartId.IsEmpty())
        throw new InvalidOperationException(LocalizedStrings.Str1853Params.Put(mdMsg.SecurityId));

    switch (mdMsg.DataType)
    {
        case MarketDataTypes.Level1:
        {
             //TODO
             break;
        }
        case MarketDataTypes.MarketDepth:
        {
             //TODO
             break;
        }
        case MarketDataTypes.Trades:
        {
            if (mdMsg.From == null)
            {
                if (mdMsg.IsSubscribe)
                    _smartCom.ListenTicks(smartId);
                else
                    _smartCom.CancelTicks(smartId);
           }
           else
           {
                //TODO
           }
           
           break;
        }
        case MarketDataTypes.CandleTimeFrame:
        {
             //TODO
             break;
        }
        default:
        {
            SendOutMarketDataNotSupported(mdMsg.TransactionId);
            return;
     }
}
				]]>	
				</code>
			</content>
			</step>
			<step>
				<content>
				<para>
					Событие <legacyBold>StServer.AddTick</legacyBold>.
				</para>
				<para>
				В обработчике события <legacyBold>StServer.AddTick</legacyBold> полученную информацию о сделке 
				необходимо преобразовать во входящее сообщение <codeEntityReference>T:StockSharp.Messages.ExecutionMessage</codeEntityReference>.
				Обратите внимание, что сообщения <codeEntityReference>T:StockSharp.Messages.ExecutionMessage</codeEntityReference> используются как для сделок, так и для заявок. 
  				Поэтому в сообщении уточняется, что оно относится к сделке - 
  				<codeEntityReference>P:StockSharp.Messages.ExecutionMessage.ExecutionType</codeEntityReference> = 
  				<codeEntityReference qualifyHint="true">F:StockSharp.Messages.ExecutionTypes.Tick</codeEntityReference>.
				</para>
				<code language="C#">
				<![CDATA[
private void smartCom_AddTick(string smartId, System.DateTime time, double price, double volume, string tradeId, SmartCOM3Lib.StOrder_Action action)
{
    SendOutMessage(CreateTrade(smartId, time, price.ToDecimal(), volume.ToDecimal(), tradeId.To<long>(), action));
}

private static ExecutionMessage CreateTrade(string smartId, DateTime time, decimal? price, decimal? volume, long tradeId, SmartCOM3Lib.StOrder_Action action)
{
    return new ExecutionMessage
    {
         SecurityId = new SecurityId { Native = smartId },
         TradeId = tradeId,
         TradePrice = price,
         Volume = volume,
         OriginSide = action.ToSide(),
         ServerTime = time.ApplyTimeZone(TimeHelper.Moscow),
         ExecutionType = ExecutionTypes.Tick
   };
}


			    ]]>	
			   </code>
			</content>
				</step>
			</steps>
		</procedure>
    
  </developerConceptualDocument>
</topic>



