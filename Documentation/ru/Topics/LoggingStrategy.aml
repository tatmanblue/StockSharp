<?xml version="1.0" encoding="utf-8"?>
<topic id="eca7454c-0532-4aaf-92bf-7a3d0cba635b" revisionNumber="1">
  <developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>
		Класс <codeEntityReference>T:StockSharp.Algo.Strategies.Strategy</codeEntityReference> реализует интерфейс <codeEntityReference>T:StockSharp.Logging.ILogSource</codeEntityReference>.
		Поэтому стратегии можно передавать в <codeEntityReference qualifyHint="true">P:StockSharp.Logging.LogManager.Sources</codeEntityReference>,
		и все ее сообщения будут автоматически попадать в <codeEntityReference qualifyHint="true">P:StockSharp.Logging.LogManager.Listeners</codeEntityReference>.
	</para>
    </introduction>
    
    <prerequisites>
		<content>
			<para>
				<link xlink:href="2c3a0d3a-6e89-42a1-a158-9a258e0a62e1">Торговые стратегии</link>
			</para>
		</content>
	</prerequisites>
    <procedure>
			<title>Логирование в тестовый файл</title>

			<steps class="ordered">
				<step>
					<content>
						<para>
							В самом начале необходимо создать менеджер логирования:
						</para>
						<code language="C#">var logManager = new LogManager();</code>
					</content>
				</step>
				<step>
					<content>
						<para>
							Затем необходимо создать файловый логгер, передав в него имя файла, и добавить его в <codeEntityReference qualifyHint="true">P:StockSharp.Logging.LogManager.Listeners</codeEntityReference>:
						</para>
						<code language="C#">var fileListener = new FileLogListener("{0}_{1:00}_{2:00}.txt".Put(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day));
logManager.Listeners.Add(fileListener);</code>
					</content>
				</step>
				<step>
					<content>
						<para>
							Для логирования сообщений необходимо добавить стратегию в
							<codeEntityReference qualifyHint="true">P:StockSharp.Logging.LogManager.Sources</codeEntityReference>:
						</para>
						<code language="C#">logManager.Sources.Add(lkohSmaStrategy);</code>
					</content>
				</step>
				<step>
					<content>
						<para>
							После добавления стратегии в менеджер логирования все ее сообщения будут записаться в файл.
						</para>
					</content>
				</step>
			</steps>
		</procedure>

		<procedure>
			<title>Проигрывание звука</title>

			<steps class="ordered">
				<step>
					<content>
						<para>
							Создание логгера и передача в него имени звукового файла:
						</para>
						<code language="C#">var soundListener = new SoundLogListener("error.mp3");
						
logManager.Listeners.Add(soundListener);
logManager.Sources.Add(lkohSmaStrategy);</code>
					</content>
				</step>
				<step>
					<content>
						<para>
							Установка фильтра на проигрывание звука только при сообщениях типа
							<codeEntityReference qualifyHint="true">F:StockSharp.Logging.LogLevels.Error</codeEntityReference>:
						</para>
						<code language="C#">soundListener.Filters.Add(msg => msg.Level == LogLevels.Error);</code>
					</content>
				</step>
			</steps>
		</procedure>

		<procedure>
			<title>Отсылка Email</title>

			<steps class="ordered">
				<step>
					<content>
						<para>
							Создание логгера и передача в него параметров отсылаемых писем:
						</para>
						<code language="C#">var emailListener = new EmailLogListener("from@stocksharp.com", "to@stocksharp.com");

logManager.Listeners.Add(emailListener);
logManager.Sources.Add(lkohSmaStrategy);</code>
					</content>
				</step>
				<step>
					<content>
						<para>
							Установка фильтра на отсылку сообщений типов 
							<codeEntityReference qualifyHint="true">F:StockSharp.Logging.LogLevels.Error</codeEntityReference>
							и <codeEntityReference qualifyHint="true">F:StockSharp.Logging.LogLevels.Warning</codeEntityReference>:
						</para>
						<code language="C#">emailListener.Filters.Add(msg => msg.Level == LogLevels.Error);
emailListener.Filters.Add(msg => msg.Level == LogLevels.Warning);</code>
					</content>
				</step>
			</steps>
		</procedure>

		<procedure>
			<title>Логирование в LogWindow</title>

			<steps class="ordered">
				<step>
					<content>
						<para>
							Создание логгер <codeEntityReference>T:StockSharp.Xaml.GuiLogListener</codeEntityReference>:
						</para>
						<code language="C#">// каждая стратегия будет иметь свое собственное окно
var guiListener = new GuiLogListener();

logManager.Listeners.Add(guiListener);
logManager.Sources.Add(lkohSmaStrategy);</code>
					</content>
				</step>
				<step>
					<content>
						<para>
							Вот как выглядит окно логов при работе стратегии котирования заявок (<link xlink:href="24250c24-029c-4dbc-bc8b-4afde645e483"/>):
						</para>
						<mediaLink>
							<image placement="center" xlink:href="strategylogging" />
						</mediaLink>
					</content>
				</step>
			</steps>
		</procedure>
    
     <relatedTopics>
       <link xlink:href="4cd2b7f9-fe8d-404a-bec6-227783410beb">Визуальные компоненты логирования</link>
    </relatedTopics>
    
   
  </developerWalkthroughDocument>
</topic>
