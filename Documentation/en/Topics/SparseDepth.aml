<?xml version="1.0" encoding="utf-8"?>
<topic id="9feaabde-52ea-4562-a666-380ce49c6df6" revisionNumber="0">
  <developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
	  <introduction>
		  <para>
			  Order books in the <token>stocksharp</token> are presented by the <codeEntityReference>T:StockSharp.BusinessEntities.MarketDepth</codeEntityReference>
			  data type. A number of operations on the data in the order book can be performed with this type. For example, you can sparse or, vice versa,
			  groupe the data by price levels.
		  </para>
	  </introduction>
	  <procedure>
		  <title>Order book modifications</title>

		  <steps class="ordered">
			  <step>
				  <content>
					  <para>
						  The creating of sparse order book from the normal one is carried out through the <codeEntityReference qualifyHint="true">Overload:StockSharp.Algo.TraderHelper.Sparse</codeEntityReference> method:
					  </para>
					  <code language="C#">MarketDepth depth = ....;

var sparseDepth = depth.Sparse();</code>
					  <para>
						  All the <codeEntityReference>T:StockSharp.BusinessEntities.Quote</codeEntityReference> quotations in the resulting order book will have
						  zero volume, and they will created with the <codeEntityReference qualifyHint="true">P:StockSharp.BusinessEntities.Security.StepPrice</codeEntityReference> step.
					  </para>
					  <para>
						  To combine the sparse order book with the original one (to connect the real and sparse quotations), you must call the
						  <codeEntityReference qualifyHint="true">M:StockSharp.Algo.TraderHelper.Join(StockSharp.BusinessEntities.MarketDepth,StockSharp.BusinessEntities.MarketDepth)</codeEntityReference> method:
					  </para>
					  <code language="C#">var joinedDepth = sparseDepth.Join(depth);</code>
				  </content>
			  </step>
			  <step>
				  <content>
					  <para>
						  The grouping of the order book by price levels is carried out through the 
						  <codeEntityReference qualifyHint="true">M:StockSharp.Algo.TraderHelper.Group(StockSharp.BusinessEntities.MarketDepth,StockSharp.Messages.Unit)</codeEntityReference> method:
					  </para>
					  <code language="C#">MarketDepth depth = ....;

// grouping of the order book by 10 points price levels
var grouppedDepth = depth.Group(10.Points(depth.Security));</code>
					  <para>
						  The result of the grouping will be the <codeEntityReference>T:StockSharp.BusinessEntities.MarketDepth</codeEntityReference>
						  order book, consisting of quotations of the <codeEntityReference>T:StockSharp.BusinessEntities.AggregatedQuote</codeEntityReference> type.
						  Through the <codeEntityReference qualifyHint="true">P:StockSharp.BusinessEntities.AggregatedQuote.InnerQuotes</codeEntityReference>
						  property the real order book quotations  can get, on which the grouping by price level was done.
					  </para>
				  </content>
			  </step>
		  </steps>
	  </procedure>
    
    <section>
      <title>Data check</title>

      <content>
        <para>
        	Sometimes you need to check the data in the order book to reveal data collisions. For example, the check of downloaded order books from external sources,
        	or tracing the correctness of the exchange operation during the abnormal (the crisis, stop trading) period. To do this you can use the special
       		<codeEntityReference qualifyHint="true">M:StockSharp.BusinessEntities.MarketDepth.Verify</codeEntityReference> method, which checks whether bids and offers
       		are mixed among themselves.
       	</para>
      </content>
    </section>

    <!--<nextSteps>
      <content>
        <para>Optional next steps after reading this walk-through</para>
      </content>
    </nextSteps>-->
    
    <relatedTopics>
      <!-- Supported Link Types
    
         All of the following linking mechanisms may be used in the topic's content 
         as well as in the related topics section.
    
    Linking to API reference documentation: 
    
		    <codeEntityReference>API reference ID</codeEntityReference>

    Linking to external resources and custom HTML topics: 

        <externalLink>
          <linkText>  Required hyperlink text  </linkText>
          <linkAlternateText>  Optional link title  </linkAlternateText>
          <linkUri>  Required URI  </linkUri>
        </externalLink>
    
    Linking to other conceptual topics: 
    
        <link xlink:href="GUID topic name (without file extension)" />
                
    Linking to named references:
    
        (Refer to the project's Help\Settings\links.xml file for more information)
    
        <link xref="id"> Optional link text </link>
        <link vref="id or URI"> Optional link text </link>
        
    -->

      <!-- Example Usage 

      <codeEntityReference>T:MyNamespace.MyClass</codeEntityReference>
      <codeEntityReference>P:MyNamespace.MyClass.MyProp</codeEntityReference>
      <codeEntityReference>M:System.IO.File.OpenText(System.String)</codeEntityReference>

      <externalLink>
        <linkText>Sandcastle Styles</linkText>
        <linkAlternateText>Sandcastle Styles on CodePlex</linkAlternateText>
        <linkUri>http://www.codeplex.com/SandcastleStyles</linkUri>
      </externalLink>

      <externalLink>
        <linkText>Change Log</linkText>
        <linkUri>ChangeLog.html</linkUri>
      </externalLink>

      <link xlink:href="2BFD9215-1216-403d-8C46-8420A4D01B83"/>
      
      <link xref="home">Our Home Page</link>
      <link vref="/controls/design.aspx">Control Architecture</link>
      -->
    </relatedTopics>
    
  </developerWalkthroughDocument>
</topic>
