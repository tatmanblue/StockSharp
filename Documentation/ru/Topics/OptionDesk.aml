<?xml version="1.0" encoding="utf-8"?>
<topic id="0bcd3950-6fc9-463a-b473-6b0c6587f7f1" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
        <introduction>
      <para>
      	Графический компонент <codeEntityReference>T:StockSharp.Xaml.OptionDesk</codeEntityReference> - таблица для отображения доски опционов. Показывает "греки", вмененную волатильность,
                  	 теоретическую цену, лучший оффер и бид для Put и Call опционов.
      </para>
      <para>
      	Ниже показан пример OptionCalculator, в котором используется этот компонент. Исходные коды примера можно найти в папке <legacyItalic>Samples/Misc/SampleOptionQuoting</legacyItalic>.
      </para>
      <mediaLink><image placement="left" xlink:href="option_desk" /></mediaLink>
    </introduction>
    
   <procedure>
   	<title>Пример OptionCalculator</title>
    	<steps class="ordered">
			<step>
				<content>
					<para>В коде XAML добавляем элемент <codeEntityReference>T:StockSharp.Xaml.OptionDesk</codeEntityReference>
							и присваиваем ему имя <legacyBold>Desk</legacyBold>.</para>
            		<code title="XAML" language="XAML">
	  				<![CDATA[
<Window x:Class="OptionCalculator.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:loc="clr-namespace:StockSharp.Localization;assembly=StockSharp.Localization"
        xmlns:xaml="http://schemas.stocksharp.com/xaml"
        xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
        Title="{x:Static loc:LocalizedStrings.XamlStr396}" Height="400" Width="1030">
    <Grid Margin="5,5,5,5">
    
	    .........................................................
	    
	    <xaml:OptionDesk x:Name="Desk" Grid.Row="6" Grid.ColumnSpan="3" Grid.Column="0" />
    
	</Grid>
</Window>
	  				]]>
                  	</code>
				</content>
			</step>
			<step>
				<content>
				<para>В коде C# создаем подключение и подписываемся на необходимые события.
					</para>
            	<code title="C#" language="C#">
<![CDATA[
...                 
public readonly Connector Connector = new Connector();
...                 
// subscribe on connection successfully event
Connector.Connected += () =>
{
	// update gui labels
	this.GuiAsync(() => ChangeConnectStatus(true));
};

// subscribe on disconnection event
Connector.Disconnected += () =>
{
	// update gui labels
	this.GuiAsync(() => ChangeConnectStatus(false));
};

// subscribe on connection error event
Connector.ConnectionError += error => this.GuiAsync(() =>
{
	// update gui labels
	ChangeConnectStatus(false);

	MessageBox.Show(this, error.ToString(), LocalizedStrings.Str2959);
});

// fill underlying asset's list
Connector.NewSecurity += security =>
{
	if (security.Type == SecurityTypes.Future)
		_assets.Add(security);
};

Connector.SecurityChanged += security =>
{
	if (_model.UnderlyingAsset == security || _model.UnderlyingAsset.Id == security.UnderlyingSecurityId)
		_isDirty = true;
};

// subscribing on tick prices and updating asset price
Connector.NewTrade += trade =>
{
	if (_model.UnderlyingAsset == trade.Security || _model.UnderlyingAsset.Id == trade.Security.UnderlyingSecurityId)
		_isDirty = true;
};

Connector.NewPosition += position => this.GuiAsync(() =>
{
	var asset = SelectedAsset;

	if (asset == null)
		return;

	var assetPos = position.Security == asset;
	var newPos = position.Security.UnderlyingSecurityId == asset.Id;

	if (!assetPos && !newPos)
		return;

	if (assetPos)
		PosChart.AssetPosition = position;

	if (newPos)
		PosChart.Positions.Add(position);

	RefreshChart();
});

Connector.PositionChanged += position => this.GuiAsync(() =>
{
	if ((PosChart.AssetPosition != null && PosChart.AssetPosition == position) || PosChart.Positions.Cache.Contains(position))
		RefreshChart();
});

try
{
	if (File.Exists(_settingsFile))
		Connector.Load(new XmlSerializer<SettingsStorage>().Deserialize(_settingsFile));
}
...
]]>
                  	</code>
				</content>
				</step>
				<step>
					<content>
					<para>При подключении задаем провайдера сообщений для рыночных данных.</para>
            		<code title="C#" language="C#">
                  <![CDATA[
private void ConnectClick(object sender, RoutedEventArgs e)
{
	if (!_isConnected)
	{
		ConnectBtn.IsEnabled = false;

		_model.Clear();
		_model.MarketDataProvider = Connector;
...
		Connector.Connect();
	}
	else
		Connector.Disconnect();
}
]]>
                   </code>
				</content>
				</step>
				<step>
				<content>
					<para>При получении инструментов добавляем базовые активы в список.</para>
            		<code title="C#" language="C#">
                  <![CDATA[
// fill underlying asset's list
Connector.NewSecurity += security =>
{
	if (security.Type == SecurityTypes.Future)
		_assets.Add(security);
};
]]>
                  	</code>
					</content>
				</step>
				<step>
				<content>
					<para>При выборе инструмента:</para>
					<list class="bullet">
  							<listItem>Заполняем массив цепочкой опционов, где подлежащим активом выступает выбранный инструмент;</listItem>
  							<listItem>Присваиваем свойству <codeEntityReference qualifyHint="true">P:StockSharp.Xaml.OptionDeskModel.Options</codeEntityReference> этот массив;</listItem>
  							<listItem>Очищаем значения доски опционов при помощи метода 
  							<codeEntityReference qualifyHint="true">M:StockSharp.Xaml.OptionDeskModel.Clear</codeEntityReference>.</listItem>
					</list>
            		<code title="C#" language="C#">
                  <![CDATA[
private void Assets_OnSelectionChanged(object sender, SelectionChangedEventArgs e)
{
	var asset = SelectedAsset;

	_model.UnderlyingAsset = asset;

	_model.Clear();
	_options.Clear();

	var options = asset.GetDerivatives(Connector);

	foreach (var security in options)
	{
		_model.Add(security);
		_options.Add(security);
	}

	ProcessPositions();
}

]]>
                  	</code>
					</content>
				</step>
			</steps>
 	</procedure>

    <relatedTopics>
		<link xlink:href="063708c5-b6a8-45f6-9ff9-608f89796a88">Греки</link>
    </relatedTopics>
  </developerConceptualDocument>
</topic>
