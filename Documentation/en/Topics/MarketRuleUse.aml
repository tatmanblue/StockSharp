<?xml version="1.0" encoding="utf-8"?>
<topic id="12ef8365-1bd1-426d-afc5-5eee33d554a6" revisionNumber="1">
	<developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
	<introduction>
		<list class="bullet">
  			<listItem>
  				<para><legacyBold>Creating a rule for the order registration condition:</legacyBold></para>
  				<code language="C#">
				<![CDATA[
private void btnBuy_Click(object sender, RoutedEventArgs e)
{
   var order = new Order
   { 
       Portfolio = Portfolio.SelectedPortfolio,
       Price = _instr1.BestAsk.Price,
       Security = _instr1,
       Volume = 1,
       Direction = Sides.Buy,
   };

   order
       .WhenRegistered(Connector)
       .Do(() => Connector.AddInfoLog("The order was successfully registered."))
       .Once()
       .Apply(this);

    
	// registering the order
   Connector.RegisterOrder(order);
}
	  	  		]]>
				</code>
				<para>
					Now, when the event is triggered (the order will be registered on exchange), the action specified through the
					<codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.IMarketRule.Do(System.Action)</codeEntityReference>
					method will be called.
				</para>
				<para>
					At the end of the rule creating the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.MarketRuleHelper.Apply(StockSharp.Algo.IMarketRule)</codeEntityReference>
					method is called. As long as the method is not called for the rule - it is inactive (the handler in the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.IMarketRule.Do(System.Action)</codeEntityReference> will not be called).
				</para>
  			</listItem>
  			
  			<listItem>
  				<para><legacyBold>Rules creating within the strategy:</legacyBold></para>
  				<code language="C#">
				<![CDATA[
class FirstStrategy : Strategy
{
	...
	
	protected override void OnStarting()
	{
		_connector
			.WhenCandlesFinished(_series)
			.Do(FinishCandle)
			.Apply(this);

		Security
			.WhenNewTrade(_connector)
			.Do(NewTrade)
			.Apply(this);

		base.OnStarting();
	}
    
    ...
}    
	  	  		]]>
				</code>	  				
  			</listItem>
  			
  			<listItem>
  				<para><legacyBold>Unnecessary rules removing:</legacyBold></para>
  				
				<para>The <codeEntityReference qualifyHint="false">T:StockSharp.Algo.IMarketRule</codeEntityReference> has the
				<codeEntityReference qualifyHint="false">P:StockSharp.Algo.IMarketRule.Token</codeEntityReference> - this token is associated with the rule. For example, for the
				<codeEntityReference qualifyHint="false" autoUpgrade="true">M:StockSharp.Algo.MarketRuleHelper.WhenCanceled(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.ITransactionProvider)</codeEntityReference>
				rule the token will be the order.</para>  				
  				
  				<para>When the rule of the successful order cancel has worked, then it is better to remove all of the other rules related to this order:</para>
  				<code language="C#">
				<![CDATA[
var order = this.CreateOrder(direction, (decimal) Security.GetCurrentPrice(direction), Volume);

var ruleCanceled = order.WhenCanceled(Connector);

ruleCanceled
    .Do(() =>
    {
        this.AddInfoLog("The order was successfully cancelled.");

	// removing all rules associated with the specified order
        Rules.RemoveRulesByToken(ruleCanceled, (IMarketRule) ruleCanceled.Token);
    })
    .Once()
    .Apply(this);

order
    .WhenRegistered(Connector)
    .Do(() => this.AddInfoLog("The order was successfully registered."))
    .Once()
    .Apply(this);

order
    .WhenRegisterFailed(Connector)
    .Do(() => this.AddInfoLog("The order was not accepted by broker."))
    .Once()
    .Apply(this);

order
    .WhenMatched(Connector)
    .Do(() => this.AddInfoLog("The order was fully matched."))
    .Once()
    .Apply(this);

// registering the order
RegisterOrder(order);

	  	  		]]>
				</code>	  				
  			</listItem>  
  			
  			<listItem>
  				<para><legacyBold>Rules combination by the condition
  				<codeEntityReference qualifyHint="false" autoUpgrade="true">M:StockSharp.Algo.MarketRuleHelper.Or(StockSharp.Algo.IMarketRule,StockSharp.Algo.IMarketRule[])</codeEntityReference>
  				/
  				<codeEntityReference qualifyHint="false" autoUpgrade="true">M:StockSharp.Algo.MarketRuleHelper.And(StockSharp.Algo.IMarketRule,StockSharp.Algo.IMarketRule[])</codeEntityReference>.</legacyBold></para>

  				<para>When time is over <legacyBold>OR</legacyBold> the candle is closed:</para>
  				
  				<code language="C#">
				<![CDATA[
CandleSeries _series;
TimeSpan _holdTimeToOpen = TimeSpan.FromMilliseconds(5000);

...

_connector
	.WhenIntervalElapsed(_holdTimeToOpen)
	.Or(_connector.WhenCandlesStarted(_series))
	.Do(() => this.AddInfoLog("The candle is finished or time is over."))
	.Once()
	.Apply(this);
	  	  		]]>
				</code>	  	
				
  				<para>Or such writing format:</para>
  				
  				<code language="C#">
				<![CDATA[
MarketRuleHelper
	.Or(new IMarketRule[] {_connector.WhenIntervalElapsed(_holdTimeToOpen), _connector.WhenCandlesStarted(_series)})
	.Do(() => this.AddInfoLog("The candle is finished or time is over."))
	.Once()
	.Apply(this);
	  	  		]]>
				</code>	  				
  				
  				<para>When the last trade price will be higher than 135000 <legacyBold>AND</legacyBold> lower than 140000:</para>
  				<code language="C#">
				<![CDATA[
var priceMore = new Unit(135000m, UnitTypes.Limit);
var priceLess = new Unit(140000m, UnitTypes.Limit);
				
MarketRuleHelper
	.And(new IMarketRule[] {Security.WhenLastTradePriceMore(Connector, Connector, priceMore), Security.WhenLastTradePriceLess(Connector, Connector, priceLess)})
	.Do(() => this.AddInfoLog(string.Format("The price of the last transaction is in the range from {0} to {1}", priceMore, priceLess)))
	.Apply(this);
	  	  		]]>
				</code>

				<alert class="note">
					<para>The handler in the 
					<codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.IMarketRule.Do(System.Action)</codeEntityReference>
					will be called after the last rule added through the 
					<codeEntityReference qualifyHint="false" autoUpgrade="true">M:StockSharp.Algo.MarketRuleHelper.And(StockSharp.Algo.IMarketRule,StockSharp.Algo.IMarketRule[])</codeEntityReference>
					has worked.</para>
				</alert>
  			</listItem> 
  			
  			<listItem>
  				<para><legacyBold>Periodicity of the rule - <codeEntityReference qualifyHint="false" autoUpgrade="true">M:StockSharp.Algo.IMarketRule.Until(System.Func{System.Boolean})</codeEntityReference>:</legacyBold></para>
  				<code language="C#">
				<![CDATA[
bool flag = false;

...
				
Security
	.WhenNewTrade()
	.Do(() =>
			{
				if(...) flag = true;
			})
	.Until(() => flag)			
	.Apply(this);
	  	  		]]>
				</code>	  				
  			</listItem>  			
		</list>
	</introduction>
	</developerWalkthroughDocument>
</topic>
