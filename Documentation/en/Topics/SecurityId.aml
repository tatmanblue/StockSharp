<?xml version="1.0" encoding="utf-8"?>
<topic id="34a9c518-60ca-45c0-a118-5e2e42165efa" revisionNumber="1">
  <developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->
    <introduction>
      <!-- Uncomment this to generate an outline of the section and sub-section
           titles.  Specify a numeric value as the inner text to limit it to
           a specific number of sub-topics when creating the outline.  Specify
           zero (0) to limit it to top-level sections only.  -->
      <!-- <autoOutline /> -->
      <para>
      	The instruments in the <token>stocksharp</token> from different sources have the 
      	<codeEntityReference qualifyHint="true">P:StockSharp.BusinessEntities.Security.Id</codeEntityReference> uniform identifier.
      	This is done in order to the code of trading algorithm does not depend on the type of connection (<token>OpenECry</token>, <token>rithmic</token>, <token>ib</token> etc.).
      	For the instrument identifier the following syntax used - <legacyBold>[instrument code]@[board code]</legacyBold>.
      	For example, for the Apple inc shares identifier will be <legacyBold>AAPL@NASDAQ</legacyBold>. For the derivatives market instruments board will be
      	<legacyBold>NYSE</legacyBold> (or other board name where <legacyBold>AAPL</legacyBold> futures trades). For example, for the June futures on the ES index
      	the identifier will be <legacyBold>ESM5@NYSE</legacyBold>.
      </para>
      
      <alert class="note">
      	The <token>hydra</token> application for market data download enumerates folders with a history based on the same mechanism.
      </alert>
    </introduction>
    <!-- <prerequisites><content>Optional prerequisites info</content></prerequisites> -->
    <!-- One or more procedure or section with procedure -->
    <procedure>
      <title>Identifiers generation algorithm overriding</title>
      <steps class="ordered">
        <step>
          <content>
            <para>
            	To start the instrument identifiers generation on the own algorithm, you must create the descendant of the
            	<codeEntityReference>T:StockSharp.Algo.SecurityIdGenerator</codeEntityReference> class, and override the
            	<codeEntityReference qualifyHint="true">M:StockSharp.Algo.SecurityIdGenerator.GenerateId(System.String,StockSharp.BusinessEntities.ExchangeBoard)</codeEntityReference>
            	method:
            </para>
            <code language="C#">class CustomSecurityIdGenerator : SecurityIdGenerator
{
	public override string GenerateId(string secCode, ExchangeBoard board)
	{
		// will be generate in CODE--BOARD form
		return secCode + "--" + board.Code;
	}
}</code>
          </content>
        </step>
        <step>
          <content>
            <para>
            	Then, the created generator must be passed to the connector:
            </para>
            <code language="C#">var _connector.SecurityIdGenerator = new CustomSecurityIdGenerator();
</code>
          </content>
        </step>
      </steps>
      <!-- <conclusion>Optional conclusion</conclusion> -->
    </procedure>
    <!-- 
    <section address="Section1">
      <title>Optional section title</title>
      <content>
        <procedure>
          <title>Procedure #2</title>
          <steps class="ordered">
            <step>
              <content>
                <para>First step</para>
              </content>
            </step>
            <step>
              <content>
                <para>Second step</para>
              </content>
            </step>
          </steps>
          <conclusion>Optional conclusion</conclusion>
        </procedure>
      </content>
    </section>-->
    <!-- Optional next steps info
    <nextSteps>
      <content><para>Next steps info goes here</para></content>
    </nextSteps>
    -->
    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID">Link text</link>
      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>
      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on CodePlex</linkText>
          <linkAlternateText>Go to CodePlex</linkAlternateText>
          <linkUri>http://shfb.codeplex.com</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerWalkthroughDocument>
</topic>
