<?xml version="1.0" encoding="utf-8"?>
<topic id="9e72851f-2a19-4680-b344-cdc39d1b85e1" revisionNumber="1">
	<developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
	<introduction>
		<para>Extended settings of <codeEntityReference qualifyHint="false">T:StockSharp.Algo.Testing.HistoryEmulationConnector</codeEntityReference>.</para>
	
		<list class="bullet">
  			<listItem>
  				<para><codeEntityReference qualifyHint="true">P:StockSharp.Algo.Strategies.Testing.EmulationSettings.MarketTimeChangedInterval</codeEntityReference>
  				- time change event input interval. If trades generators are used, then the trades will be generated with this periodicity. The default is 1 minute.</para>
  			</listItem>

  			<listItem>
				<para><codeEntityReference qualifyHint="true">P:StockSharp.Algo.Testing.MarketEmulatorSettings.Latency</codeEntityReference> -
				The minimum value of the registered orders latency. By default, it is equal to <legacyBold>TimeSpan.Zero</legacyBold>, which means instant acceptance
				of the registered orders by the exchange.
				</para>
  			</listItem>

  			<listItem>
				<para><codeEntityReference qualifyHint="true">P:StockSharp.Algo.Testing.MarketEmulatorSettings.MatchOnTouch</codeEntityReference> -
				to execute the orders if the price "touches" the level (an assumption is sometimes too "optimistic" and the mode must be switched off for a realistic
				testing). If the mode is off, then limit orders will be executed if the price is "passed through them" at least in 1 step. The option is available in
				all modes except the order log. The default is off.</para>
  			</listItem>
  			
  		</list>

		<para>Even if the strategy is tested on the candles, it is necessary to subscribe to the tick trades:</para>
		<code language="C#">
		<![CDATA[
		_connector.SubscribeTrades(security);
		]]>
		</code>
		
		<para>If the strategy needs the order books, it is necessary to subscribe to the order books:</para>
		<code language="C#">
		<![CDATA[
		_connector.SubscribeMarketDepth(security);
		]]>
		</code>
		
		<para>If there are no order books, then to check the working ability of strategies that need order books, it is possible to enable the generation:</para>
		<code language="C#">
		<![CDATA[
var mdGenerator = new TrendMarketDepthGenerator(connector.GetSecurityId(security));
_connector.MarketDataAdapter.SendInMessage(new GeneratorMessage
{
    IsSubscribe = true,
    Generator = mdGenerator
});

		]]>
		</code>
		
		<list class="bullet">
  			<listItem>
				<para>The order book update interval <codeEntityReference qualifyHint="true">P:StockSharp.Algo.Testing.MarketDataGenerator.Interval</codeEntityReference>.
				The update can not be more often than tick trades come (because the order books are generated before each trade):</para>
				<code language="C#">
				<![CDATA[
mdGenerator.Interval = TimeSpan.FromSeconds(1);
				]]>
				</code>
  			</listItem>

  			<listItem>
				<para>The order books depth <codeEntityReference qualifyHint="true">P:StockSharp.Algo.Testing.MarketDepthGenerator.MaxBidsDepth</codeEntityReference>
				and <codeEntityReference qualifyHint="true">P:StockSharp.Algo.Testing.MarketDepthGenerator.MaxAsksDepth</codeEntityReference>.
				The more - the slower testing:</para>
				<code language="C#">
				<![CDATA[
mdGenerator.MaxAsksDepth = 1; 
mdGenerator.MaxBidsDepth = 1;
				]]>		
				</code>
  			</listItem>

  			<listItem>
				<para>Volumes of <codeEntityReference qualifyHint="true">P:StockSharp.BusinessEntities.MarketDepth.BestBid</codeEntityReference> and
				<codeEntityReference qualifyHint="true">P:StockSharp.BusinessEntities.MarketDepth.BestAsk</codeEntityReference>
				are taken from the volume of the trade on which there is generation. The 
				<codeEntityReference qualifyHint="true">P:StockSharp.Algo.Testing.MarketDepthGenerator.UseTradeVolume</codeEntityReference>
				option sets realistic volume level in the order book:</para>
				<code language="C#">
				<![CDATA[
mdGenerator.UseTradeVolume = true;
				]]>
				</code>
 			</listItem>

  			<listItem>
				<para>The volume level <codeEntityReference qualifyHint="true">P:StockSharp.Algo.Testing.MarketDataGenerator.MinVolume</codeEntityReference> and
				<codeEntityReference qualifyHint="true">P:StockSharp.Algo.Testing.MarketDataGenerator.MaxVolume</codeEntityReference>:</para>
				<code language="C#">
				<![CDATA[
mdGenerator.MinVolume = 1;
mdGenerator.MaxVolume = 1;
				]]>
				</code>
  			</listItem>

  			<listItem>
				<para>The minimum generated spread is equal to <codeEntityReference qualifyHint="true">P:StockSharp.BusinessEntities.Security.PriceStep</codeEntityReference>.
				It should not generate spread between <codeEntityReference qualifyHint="true">P:StockSharp.BusinessEntities.MarketDepth.BestBid</codeEntityReference> and
				<codeEntityReference qualifyHint="true">P:StockSharp.BusinessEntities.MarketDepth.BestAsk</codeEntityReference>
				more than 5 <codeEntityReference qualifyHint="true">P:StockSharp.BusinessEntities.Security.PriceStep</codeEntityReference>
				(so do not get too wide spread while the generation from candles is performed):</para>
				<code language="C#">
				<![CDATA[
mdGenerator.MinSpreadStepCount = 1;
mdGenerator.MaxSpreadStepCount = 5;
				]]>
				</code>
  			</listItem>
  		</list>		
	</introduction>
	</developerWalkthroughDocument>
</topic>
