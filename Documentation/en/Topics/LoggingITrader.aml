<?xml version="1.0" encoding="utf-8"?>
<topic id="9619f1db-064f-421f-967e-4c15a5b0aa71" revisionNumber="1">
  <developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
		<para>
			The <codeEntityReference>T:StockSharp.BusinessEntities.IConnector</codeEntityReference> objects similar <link xlink:href="eca7454c-0532-4aaf-92bf-7a3d0cba635b">strategies</link>
			also implement the <codeEntityReference>T:StockSharp.Logging.ILogSource</codeEntityReference> interface. Therefore, from the
			<codeEntityReference>T:StockSharp.BusinessEntities.IConnector</codeEntityReference> object you can receive messages through the
			<codeEntityReference>T:StockSharp.Logging.LogManager</codeEntityReference> by all means that are available for strategies.
		</para>
    </introduction>

    <procedure>
      <title>IConnector logging example</title>

      <steps class="ordered">
          <step>
          	<content>
			  	<para>
					First, you need to create a log manager:
			 	</para>
				<code language="C#">
...

private readonly Connector _connector = new Connector();
private readonly LogManager _logManager = new LogManager();

...
				
				</code>
			</content>
		  </step>
		  <step>
			<content>
				<para>
					Then you need to create a file logger, and to add it to the <codeEntityReference qualifyHint="true">P:StockSharp.Logging.LogManager.Listeners</codeEntityReference>:
				</para>
				<code language="C#">_logManager.Listeners.Add(new FileLogListener());</code>
			</content>
		</step>
		  <step>
			  <content>
				  <content>
						<para>
							The final step is to add the <codeEntityReference>T:StockSharp.InteractiveBrokers.InteractiveBrokersTrader</codeEntityReference>
							in <codeEntityReference qualifyHint="true">P:StockSharp.Logging.LogManager.Sources</codeEntityReference>:
						</para>
						<code language="C#">_logManager.Sources.Add(_connector);</code>
					</content>
			  </content>
		  </step>
		  <step>
			  <content>
				  <para>
					  As a result, the program will display messages as shown below after the start:
				  </para>
				  <code><![CDATA[18:43:15 | Info  | RithmicTrader
18:43:15 | Debug | RithmicTrader     | ReadPortfolios()
18:43:15 | Debug | RithmicTrader      | OnProcessPortfolios()
18:43:15 | Debug | RithmicTrader      | 41469|15152,43|15530,8|
18:43:15 | Debug | RithmicTrader     | ReadSecurities()
18:43:15 | Debug | RithmicTrader      | OnProcessSecurities
18:43:15 | Debug | RithmicTrader      | 291|ESU5|
]]></code>
			  </content>
		  </step>
      </steps>
    </procedure>
  </developerWalkthroughDocument>
</topic>
