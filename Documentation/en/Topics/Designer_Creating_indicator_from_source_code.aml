<?xml version="1.0" encoding="utf-8"?>
<topic id="de0fbe51-4b00-42ed-9b8a-20857bfa8b58" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
<para>Creating your own indicator in <token>stocksharpapi</token> is described in 
<link xlink:href="ec4c3abe-3779-4a5f-899c-697b049254d4" /> section.</para>
<para>Below, using the SMA indicator as an example, you will see how to integrate 
the created indicator into a schema in the form of a cube. As an example, 
you can take the source codes of other indicators that are in the 
<token>stocksharpgithub</token> repository.</para>
<para>First, you need to create a cube as described in 
<link xlink:href="22a4dc42-dc36-41cc-a849-32aa2a8194fe" /> section.</para>

<para>We describe the input and output parameters of the cube:</para>
<code language="C#" title="C#"><![CDATA[
		[DiagramExternal]
		public void ProcessCandle(Candle candle)
		{
            //...
		}
]]></code>
<code language="C#" title="C#"><![CDATA[
		[DiagramExternal]
		public event Action<IIndicatorValue> NewIndicator;
]]></code>

<para>Let's describe the indicator as a separate class:</para>
<code language="C#" title="C#"><![CDATA[
    /// <summary>
	/// Simple moving average.
	/// </summary>
	[DisplayName("SMA")]
	public class NewSimpleMovingAverage : LengthIndicator<decimal>
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="SimpleMovingAverage"/>.
		/// </summary>
		public NewSimpleMovingAverage()
		{
			Length = 32;
		}

		/// <summary>
		/// To handle the input value.
		/// </summary>
		/// <param name="input">The input value.</param>
		/// <returns>The resulting value.</returns>
		protected override IIndicatorValue OnProcess(IIndicatorValue input)
		{
			var newValue = input.GetValue<decimal>();

			if (input.IsFinal)
			{
				Buffer.Add(newValue);
				if (Buffer.Count > Length) Buffer.RemoveAt(0);
			}

			if (input.IsFinal) return new DecimalIndicatorValue(this, Buffer.Sum() / Length);
			return new DecimalIndicatorValue(this, (Buffer.Skip(1).Sum() + newValue) / Length);
		}
	}
]]></code>
<para>We add the indicator to the cube code and initialize it in the cube 
class constructor:</para>
<code language="C#" title="C#"><![CDATA[
		private SimpleMovingAverage _NewSMA;
		public NewSMA ()
		{
			_NewSMA = new SimpleMovingAverage();
		}
]]></code>

<para>The SMA indicator has a single property, it is the period length. We 
describe this property in the cube code:</para>
<code language="C#" title="C#"><![CDATA[
		public int Length
		{
			get { return _NewSMA.Length; }
			set { _NewSMA.Length = value;}
		}
]]></code>

<para>We add the <legacyBold>ProcessCandle</legacyBold> method so that it 
calculates the indicator value 
and generates an event of the output parameter:</para>
<code language="C#" title="C#"><![CDATA[
		[DiagramExternal]
		public void ProcessCandle(Candle candle)
		{
			NewIndicator?.Invoke(_NewSMA.Process(candle));
		}
]]></code>
<para>The complete cube code:</para> 
<code language="C#" title="C#"><![CDATA[
namespace StockSharp.Designer.Strategies
{
	using System;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Linq;
	using System.Windows.Media;
	using System.Runtime.InteropServices;

	using Ecng.Common;
	using Ecng.ComponentModel;
	using Ecng.Collections;

	using MoreLinq;

	using StockSharp.Messages;
	using StockSharp.Algo;
	using StockSharp.Algo.Candles;
	using StockSharp.Algo.Strategies;
	using StockSharp.Algo.Indicators;
	using StockSharp.Logging;
	using StockSharp.BusinessEntities;
	using StockSharp.Localization;
	using StockSharp.Xaml;
	using StockSharp.Xaml.Charting;
	using StockSharp.Xaml.Diagram.Elements;

	[Guid("eea2da25-de12-4b6c-b43a-6a98e2fdb01c")]
	public class NewSMA : Strategy
	{
		private SimpleMovingAverage _NewSMA;
		public NewSMA ()
		{
			_NewSMA = new SimpleMovingAverage();
		}

		[DiagramExternal]
		public event Action<IIndicatorValue> NewIndicator;

		public int Length
		{
			get { return _NewSMA.Length; }
			set { _NewSMA.Length = value;}
		}

		[DiagramExternal]
		public void ProcessCandle(Candle candle)
		{
			NewIndicator?.Invoke(_NewSMA.Process(candle));
		}
	}
	
	/// <summary>
	/// Simple moving average.
	/// </summary>
	[DisplayName("SMA")]
	public class NewSimpleMovingAverage : LengthIndicator<decimal>
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="SimpleMovingAverage"/>.
		/// </summary>
		public NewSimpleMovingAverage()
		{
			Length = 32;
		}

		/// <summary>
		/// To handle the input value.
		/// </summary>
		/// <param name="input">The input value.</param>
		/// <returns>The resulting value.</returns>
		protected override IIndicatorValue OnProcess(IIndicatorValue input)
		{
			var newValue = input.GetValue<decimal>();

			if (input.IsFinal)
			{
				Buffer.Add(newValue);
				if (Buffer.Count > Length) Buffer.RemoveAt(0);
			}

			if (input.IsFinal) return new DecimalIndicatorValue(this, Buffer.Sum() / Length);
			return new DecimalIndicatorValue(this, (Buffer.Skip(1).Sum() + newValue) / Length);
		}
	}
}
]]></code>
    </introduction>
  </developerConceptualDocument>
</topic>