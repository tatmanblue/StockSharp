<?xml version="1.0" encoding="utf-8"?>
<topic id="24a5c734-199f-4090-943d-6324a04f335b" revisionNumber="0">
  <developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--<summary>
      <para>Optional abstract</para>
    </summary>-->

    <introduction>
		<para>
			Для осуществления процесса оптимизации стратегии при тестировании <link xlink:href="5b90a23e-24b9-474a-a699-da47b666194a">на истории</link>
			можно применить параллельное вычисление, основанное на нескольких потоках. На компьютерах с несколькими ядрами или процессорами это позволит
			сократить общее время тестирования за счет одновременного выполнения нескольких действий.
		</para>
		<alert class="caution">
			Использование нескольких потоков увеличивает и потребление памяти (примерно во столько раз, сколько было создано потоков, если каждый поток
			использует свой диапазон времени в истории). Поэтому, использование параллельного тестирования без достаточного объема свободной памяти не
			даст существенного прироста в производительности, и даже ee снизит.
		</alert>
    </introduction>

    <!--<prerequisites>
      <content>
        <para>Optional information on prerequisites</para>
      </content>
    </prerequisites>-->
    
    <!-- One or more procedure or section elements -->

    <procedure>
      <title>Пример тестирования в несколько потоков стратегии скользящих средних</title>

		<steps class="ordered">
			<step>
				<content>
					<para>
						За основу взят пример SampleHistoryTesting, описанный в разделе тестирования <link xlink:href="5b90a23e-24b9-474a-a699-da47b666194a"/>.
						Данный пример с обычного тестирования изменен на тестирование с оптимизацией через подбор оптимального значения длин скользящих средних:
					</para>
					<mediaLink>
						<image placement="center" xlink:href="sample_history_test_parallel" />
					</mediaLink>
				</content>
			</step>
			<step>
				<content>
					<para>
						Создается несколько настроек длин скользящих средних (первое значение отвечает за длину длинной, второе за длину короткой, третье за
						цвет <link xlink:href="973860e9-8f2d-4035-98de-bb88b33b6751">кривой эквити</link>):
					</para>
					<code language="C#"><![CDATA[
var periods = new[]
{
	new Tuple<int, int, Color>(80, 10, Colors.DarkGreen),
	new Tuple<int, int, Color>(70, 8, Colors.Red),
	new Tuple<int, int, Color>(60, 6, Colors.DarkBlue)
};
]]></code>
				</content>
			</step>
			
			<step>
				<content>
					<para>
						Создается экземпляр хранилища, инструмент, сообщение для установки значений Level1  и портфель:
					</para>
					<code language="C#"><![CDATA[
					
// storage to historical data
var storageRegistry = new StorageRegistry
{
	// set historical path
	DefaultDrive = new LocalMarketDataDrive(HistoryPath.Folder)
};

var timeFrame = TimeSpan.FromMinutes(5);

// create test security
var security = new Security
{
	Id = "RIZ2@FORTS", // sec id has the same name as folder with historical data
	Code = "RIZ2",
	Name = "RTS-12.12",
	Board = ExchangeBoard.Forts,
};

var startTime = new DateTime(2012, 10, 1);
var stopTime = new DateTime(2012, 10, 31);

var level1Info = new Level1ChangeMessage
{
	SecurityId = security.ToSecurityId(),
	ServerTime = startTime,
}
.TryAdd(Level1Fields.PriceStep, 10m)
.TryAdd(Level1Fields.StepPrice, 6m)
.TryAdd(Level1Fields.MinPrice, 10m)
.TryAdd(Level1Fields.MaxPrice, 1000000m)
.TryAdd(Level1Fields.MarginBuy, 10000m)
.TryAdd(Level1Fields.MarginSell, 10000m);

// test portfolio
var portfolio = new Portfolio
{
	Name = "test account",
	BeginValue = 1000000,
};

]]></code>
				</content>
			</step>
			
			<step>
				<content>
					<para>
						Создание объединенного шлюза <codeEntityReference>T:StockSharp.Algo.Strategies.Testing.BatchEmulation</codeEntityReference>, который будет
						содержать все созданные на следующем шаге <codeEntityReference>T:StockSharp.Algo.Testing.HistoryEmulationConnector</codeEntityReference>:
					</para>
					<code language="C#">
// create backtesting connector
var batchEmulation = new BatchEmulation(new[] { security }, new[] { portfolio }, storageRegistry)
{
	EmulationSettings =
	{
		MarketTimeChangedInterval = timeFrame,
		StartTime = startTime,
		StopTime = stopTime,

		// count of parallel testing strategies
		BatchSize = periods.Length,
	}
};
</code>
				</content>
			</step>
			<step>
				<content>
					<para>
						Далее, выполняется подписка на события объединенного шлюза и коннектора, выполняется настройка параметров тестирования, а также для каждого периода создается стратегия.
					</para>
					<code language="C#"><![CDATA[

// handle historical time for update ProgressBar
batchEmulation.ProgressChanged += (curr, total) => this.GuiAsync(() => TestingProcess.Value = total);

batchEmulation.StateChanged += (oldState, newState) =>
{
	if (batchEmulation.State != EmulationStates.Stopped)
		return;

	this.GuiAsync(() =>
	{
		if (batchEmulation.IsFinished)
		{
			TestingProcess.Value = TestingProcess.Maximum;
			MessageBox.Show(this, LocalizedStrings.Str3024.Put(DateTime.Now - _startEmulationTime));
		}
		else
			MessageBox.Show(this, LocalizedStrings.cancelled);
	});
};


// get emulation connector
var connector = batchEmulation.EmulationConnector;

logManager.Sources.Add(connector);

connector.NewSecurity += s =>
{
	if (s != security)
		return;

	// fill level1 values
	connector.SendInMessage(level1Info);

	connector.MarketDataAdapter.SendInMessage(new GeneratorMessage
	{
		IsSubscribe = true,
		Generator = new RandomWalkTradeGenerator(new SecurityId { SecurityCode = security.Code })
		{
			Interval = TimeSpan.FromSeconds(1),
			MaxVolume = maxVolume,
			MaxPriceStepCount = 3,	
			GenerateOriginSide = true,
			MinVolume = minVolume,
			RandomArrayLength = 99,
		}
	});				
};

TestingProcess.Maximum = 100;
TestingProcess.Value = 0;

_startEmulationTime = DateTime.Now;

var strategies = periods
	.Select(period =>
	{
		...
    
		// create strategy based SMA
		var strategy = new SmaStrategy(series, new SimpleMovingAverage { Length = period.Item1 }, new SimpleMovingAverage { Length = period.Item2 })
		{
			Volume = 1,
			Security = security,
			Portfolio = portfolio,
			Connector = connector,

			// by default interval is 1 min,
			// it is excessively for time range with several months
			UnrealizedPnLInterval = ((stopTime - startTime).Ticks / 1000).To<TimeSpan>()
		};

		...

    var curveItems = Curve.CreateCurve(LocalizedStrings.Str3026Params.Put(period.Item1, period.Item2), period.Item3, ChartIndicatorDrawStyles.Line);

		strategy.PnLChanged += () =>
		{
			var data = new EquityData
			{
				Time = strategy.CurrentTime,
				Value = strategy.PnL,
			};

			this.GuiAsync(() => curveItems.Add(data));
		};

		Stat.AddStrategies(new[] { strategy });

		return strategy;
	});
]]></code>
				</content>
			</step>
			<step>
				<content>
					<para>
						Запуск тестирования:
					</para>
					<code language="C#"><![CDATA[
// start emulation
batchEmulation.Start(strategies, periods.Length);
]]></code>
				</content>
			</step>
		</steps>
    </procedure>

	<!--<nextSteps>
      <content>
        <para>Optional next steps after reading this walk-through</para>
      </content>
    </nextSteps>-->
    
    <relatedTopics>
      <!-- Supported Link Types
    
         All of the following linking mechanisms may be used in the topic's content 
         as well as in the related topics section.
    
    Linking to API reference documentation: 
    
		    <codeEntityReference>API reference ID</codeEntityReference>

    Linking to external resources and custom HTML topics: 

        <externalLink>
          <linkText>  Required hyperlink text  </linkText>
          <linkAlternateText>  Optional link title  </linkAlternateText>
          <linkUri>  Required URI  </linkUri>
        </externalLink>
    
    Linking to other conceptual topics: 
    
        <link xlink:href="GUID topic name (without file extension)" />
                
    Linking to named references:
    
        (Refer to the project's Help\Settings\links.xml file for more information)
    
        <link xref="id"> Optional link text </link>
        <link vref="id or URI"> Optional link text </link>
        
    -->

      <!-- Example Usage 

      <codeEntityReference>T:MyNamespace.MyClass</codeEntityReference>
      <codeEntityReference>P:MyNamespace.MyClass.MyProp</codeEntityReference>
      <codeEntityReference>M:System.IO.File.OpenText(System.String)</codeEntityReference>

      <externalLink>
        <linkText>Sandcastle Styles</linkText>
        <linkAlternateText>Sandcastle Styles on CodePlex</linkAlternateText>
        <linkUri>http://www.codeplex.com/SandcastleStyles</linkUri>
      </externalLink>

      <externalLink>
        <linkText>Change Log</linkText>
        <linkUri>ChangeLog.html</linkUri>
      </externalLink>

      <link xlink:href="2BFD9215-1216-403d-8C46-8420A4D01B83"/>
      
      <link xref="home">Our Home Page</link>
      <link vref="/controls/design.aspx">Control Architecture</link>
      -->
    </relatedTopics>
    
  </developerWalkthroughDocument>
</topic>
