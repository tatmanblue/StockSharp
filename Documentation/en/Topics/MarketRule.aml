<?xml version="1.0" encoding="utf-8"?>
<topic id="de6c121a-6a89-4c4b-80d1-804d7b98fda7" revisionNumber="1">
	<developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
		<para>
		  For the <codeEntityReference qualifyHint="false">T:StockSharp.Algo.IMarketRule</codeEntityReference> the <token>stocksharp</token> already has a number
		  of predefined conditions and actions for the most common scenarios. The <codeEntityReference qualifyHint="false">T:StockSharp.Algo.MarketRuleHelper</codeEntityReference>
		  class conditions lists grouped by trading objects are listed below:
		</para>
		  <para>
			  For the <codeEntityReference>T:StockSharp.BusinessEntities.Security</codeEntityReference>
		  </para>
		  <list class="bullet">
		  	  <listItem>
				  <codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.MarketRuleHelper.WhenChanged(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.IMarketDataProvider)</codeEntityReference>
				  - the instrument change event rule.
			  </listItem>
			  <listItem>
				  <codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.MarketRuleHelper.WhenNewTrade(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.IMarketDataProvider)</codeEntityReference>
				  - the rule when instrument has the new trade occurrence event.
			  </listItem>
			  <listItem>
				  <codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.MarketRuleHelper.WhenMarketDepthChanged(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.IMarketDataProvider)</codeEntityReference>
				  - the rule when instrument has the order book change event.
			  </listItem>
			  <listItem>
				  <codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.MarketRuleHelper.WhenBestBidPriceMore(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.IMarketDataProvider,StockSharp.Messages.Unit)</codeEntityReference>
				  - the rule for the event of the best bid increase above a specified level.
				</listItem>
			  <listItem>
				  <codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.MarketRuleHelper.WhenBestBidPriceLess(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.IMarketDataProvider,StockSharp.Messages.Unit)</codeEntityReference>
					- the rule for the event of the best bid decrease below a specified level.
				</listItem>
			  <listItem>
				  <codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.MarketRuleHelper.WhenBestAskPriceMore(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.IMarketDataProvider,StockSharp.Messages.Unit)</codeEntityReference>
					- the rule for the event of the best offer increase above a specified level.
				</listItem>
			  <listItem>
				  <codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.MarketRuleHelper.WhenBestAskPriceLess(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.IMarketDataProvider,StockSharp.Messages.Unit)</codeEntityReference>
					- the rule for the event of the best offer decrease below a specified level.
				</listItem>
			  <listItem>
				  <codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.MarketRuleHelper.WhenLastTradePriceMore(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.IMarketDataProvider,StockSharp.Messages.Unit)</codeEntityReference>
					- the rule for the event of the last trade price increase above a specified level.
				</listItem>
			  <listItem>
				  <codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.MarketRuleHelper.WhenLastTradePriceLess(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.IMarketDataProvider,StockSharp.Messages.Unit)</codeEntityReference>
					- the rule for the event of the last trade price decrease below a specified level.
				</listItem>
		  </list>
		  <para>
			  For the <codeEntityReference>T:StockSharp.BusinessEntities.MarketDepth</codeEntityReference>
		  </para>
		  <list class="bullet">
		  	  <listItem>
				  <codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.MarketRuleHelper.WhenChanged(StockSharp.BusinessEntities.MarketDepth,StockSharp.BusinessEntities.IMarketDataProvider)</codeEntityReference>
				  - the order book change event rule.
			  </listItem>
			  <listItem>
				  <codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.MarketRuleHelper.WhenSpreadMore(StockSharp.BusinessEntities.MarketDepth,StockSharp.Messages.Unit,StockSharp.BusinessEntities.IMarketDataProvider)</codeEntityReference>
					- the rule for the event of the book order spread size more then specified value.
				</listItem>
			  <listItem>
				  <codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.MarketRuleHelper.WhenSpreadLess(StockSharp.BusinessEntities.MarketDepth,StockSharp.Messages.Unit,StockSharp.BusinessEntities.IMarketDataProvider)</codeEntityReference>
					- the rule for the event of the book order spread size less then specified value.
				</listItem>
			  <listItem>
				  <codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.MarketRuleHelper.WhenBestBidPriceMore(StockSharp.BusinessEntities.MarketDepth,StockSharp.Messages.Unit,StockSharp.BusinessEntities.IMarketDataProvider)</codeEntityReference>
					- the rule for the event of the best bid increase above a specified level.
				</listItem>
			  <listItem>
				  <codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.MarketRuleHelper.WhenBestBidPriceLess(StockSharp.BusinessEntities.MarketDepth,StockSharp.Messages.Unit,StockSharp.BusinessEntities.IMarketDataProvider)</codeEntityReference>
					- the rule for the event of the best bid decrease below a specified level.
				</listItem>
			  <listItem>
				  <codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.MarketRuleHelper.WhenBestAskPriceMore(StockSharp.BusinessEntities.MarketDepth,StockSharp.Messages.Unit,StockSharp.BusinessEntities.IMarketDataProvider)</codeEntityReference>
					- the rule for the event of the best offer increase above a specified level.
				</listItem>
			  <listItem>
				  <codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.MarketRuleHelper.WhenBestAskPriceLess(StockSharp.BusinessEntities.MarketDepth,StockSharp.Messages.Unit,StockSharp.BusinessEntities.IMarketDataProvider)</codeEntityReference>
					- the rule for the event of the best offer decrease below a specified level.
				</listItem>
		  </list>
		  <para>
			  For the <codeEntityReference>T:StockSharp.BusinessEntities.Order</codeEntityReference>
		  </para>
		  <list class="bullet">
			  <listItem>
				  <codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.MarketRuleHelper.WhenRegistered(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.ITransactionProvider)</codeEntityReference>
				  - the rule for the event of the successful order registration on exchange.
			  </listItem>
				<!--<listItem>
					<codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.MarketRuleHelper.WhenActivated(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.ITransactionProvider)</codeEntityReference>
					- the rule for the event of the stop order activation.
				</listItem>-->
			  <listItem>
				  <codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.MarketRuleHelper.WhenPartiallyMatched(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.ITransactionProvider)</codeEntityReference>
				  - the rule for the event of the partially matched order.
			  </listItem>
			  <listItem>
				  <codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.MarketRuleHelper.WhenRegisterFailed(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.ITransactionProvider)</codeEntityReference>
				  - the rule for the event of the  failed order registration on exchange.
			  </listItem>
				<listItem>
					<codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.MarketRuleHelper.WhenCancelFailed(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.ITransactionProvider)</codeEntityReference>
					-  the rule for the event of the failed order cancel on exchange.
				</listItem>
			  <listItem>
				  <codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.MarketRuleHelper.WhenCanceled(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.ITransactionProvider)</codeEntityReference>
				  - the rule for the event of the order cancel on exchange.
			  </listItem>
			  <listItem>
				  <codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.MarketRuleHelper.WhenMatched(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.ITransactionProvider)</codeEntityReference>
				  - the rule for the event of the fully matched order on exchange.
			  </listItem>
			  <listItem>
				  <codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.MarketRuleHelper.WhenChanged(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.ITransactionProvider)</codeEntityReference>
				  - the rule for the event of the order change.
			  </listItem>
			  <listItem>
				  <codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.MarketRuleHelper.WhenNewTrade(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.ITransactionProvider)</codeEntityReference>
				  - the rule for the event of the trade occurrence by the order.
			  </listItem>
		  </list>
		  <para>
			  For the <codeEntityReference>T:StockSharp.BusinessEntities.Portfolio</codeEntityReference>
		  </para>
		  <list class="bullet">
				<listItem>
					<codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.MarketRuleHelper.WhenMoneyLess(StockSharp.BusinessEntities.Portfolio,StockSharp.BusinessEntities.IPortfolioProvider,StockSharp.Messages.Unit)</codeEntityReference>
					- the rule for the event of the money decrease in the portfolio below a specified level.
				</listItem>
				<listItem>
					<codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.MarketRuleHelper.WhenMoneyMore(StockSharp.BusinessEntities.Portfolio,StockSharp.BusinessEntities.IPortfolioProvider,StockSharp.Messages.Unit)</codeEntityReference>
					- the rule for the event of the money increase in the portfolio above a specified level.
				</listItem>
		  </list>
		  <para>
			  For <codeEntityReference>T:StockSharp.BusinessEntities.Position</codeEntityReference>
		  </para>
		  <list class="bullet">
				<listItem>
					<codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.MarketRuleHelper.WhenLess(StockSharp.BusinessEntities.Position,StockSharp.BusinessEntities.IPositionProvider,StockSharp.Messages.Unit)</codeEntityReference>
					- the rule for the event of the position decrease below a specified level.
				</listItem>
				<listItem>
					<codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.MarketRuleHelper.WhenMore(StockSharp.BusinessEntities.Position,StockSharp.BusinessEntities.IPositionProvider,StockSharp.Messages.Unit)</codeEntityReference>
					- the rule for the event of the position increase above a specified level.
				</listItem>
				<listItem>
					<codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.MarketRuleHelper.Changed(StockSharp.BusinessEntities.Position,StockSharp.BusinessEntities.IPositionProvider)</codeEntityReference>
					- the rule for the event of the position change.
				</listItem>
		  </list>
		  <para>
			  For the <codeEntityReference>T:StockSharp.Algo.PnL.IPnLManager</codeEntityReference>
		  </para>
		  <list class="bullet">
				<listItem>
					<codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.Strategies.StrategyHelper.WhenPnLLess(StockSharp.Algo.Strategies.Strategy,StockSharp.Messages.Unit)</codeEntityReference>
					- the rule for the event of the profit decrease below a specified level.
				</listItem>
				<listItem>
					<codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.Strategies.StrategyHelper.WhenPnLMore(StockSharp.Algo.Strategies.Strategy,StockSharp.Messages.Unit)</codeEntityReference>
					- the rule for the event of the profit increase above a specified level.
				</listItem>
				<listItem>
					<codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.Strategies.StrategyHelper.WhenPositionChanged(StockSharp.Algo.Strategies.Strategy)</codeEntityReference>
					- the rule for the event of the profit change.
				</listItem>
		  </list> 
		  
		  <para>
			  For the <codeEntityReference>T:StockSharp.Algo.Candles.Candle</codeEntityReference>
		  </para>
		  <list class="bullet">
			  <listItem>
				  <codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.MarketRuleHelper.WhenClosePriceMore(StockSharp.Algo.Candles.ICandleManager,StockSharp.Algo.Candles.Candle,StockSharp.Messages.Unit)</codeEntityReference>
					- the rule for the event of the candle closing price increase above a specified level.
				</listItem>
			  <listItem>
				  <codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.MarketRuleHelper.WhenClosePriceLess(StockSharp.Algo.Candles.ICandleManager,StockSharp.Algo.Candles.Candle,StockSharp.Messages.Unit)</codeEntityReference>
					- the rule for the event of the candle closing price decrease below a specified level.
				</listItem>
				<listItem>
					<codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.MarketRuleHelper.WhenTotalVolumeMore(StockSharp.Algo.Candles.ICandleManager,StockSharp.Algo.Candles.Candle,StockSharp.Messages.Unit)</codeEntityReference>
					- the rule for the event of the candle total volume increase above a specified level.
				</listItem>
				<listItem>
					<codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.MarketRuleHelper.WhenCurrentCandleTotalVolumeMore(StockSharp.Algo.Candles.ICandleManager,StockSharp.Algo.Candles.CandleSeries,StockSharp.Messages.Unit)</codeEntityReference>
					- the rule for the event of the current candle total volume increase above a specified level.
				</listItem>
			  <listItem>
				  <codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.MarketRuleHelper.WhenCandlesStarted(StockSharp.Algo.Candles.ICandleManager,StockSharp.Algo.Candles.CandleSeries)</codeEntityReference>
				  - the rule for the event of the new candles occurrence.
			  </listItem>
			  <listItem>
				  <codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.MarketRuleHelper.WhenCandlesChanged(StockSharp.Algo.Candles.ICandleManager,StockSharp.Algo.Candles.CandleSeries)</codeEntityReference>
				  - the rule for the event of the candles change.
			  </listItem>
			  <listItem>
				  <codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.MarketRuleHelper.WhenCandlesFinished(StockSharp.Algo.Candles.ICandleManager,StockSharp.Algo.Candles.CandleSeries)</codeEntityReference>
				  - the rule for the event of the candles end.
			  </listItem>
			  <listItem>
				  <codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.MarketRuleHelper.WhenChanged(StockSharp.Algo.Candles.ICandleManager,StockSharp.Algo.Candles.Candle)</codeEntityReference>
				  - the rule for the event of the candle change.
			  </listItem>
			  <listItem>
				  <codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.MarketRuleHelper.WhenFinished(StockSharp.Algo.Candles.ICandleManager,StockSharp.Algo.Candles.Candle)</codeEntityReference>
				  - the rule for the event of the candle finish.
			  </listItem>
			  <listItem>
				  <codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.MarketRuleHelper.WhenPartiallyFinished(StockSharp.Algo.Candles.ICandleManager,StockSharp.Algo.Candles.Candle,StockSharp.BusinessEntities.IConnector,System.Decimal)</codeEntityReference>
				  - the rule for the event of the candle partial finish.
			  </listItem>
			  <listItem>
				  <codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.MarketRuleHelper.WhenPartiallyFinishedCandles(StockSharp.Algo.Candles.ICandleManager,StockSharp.Algo.Candles.CandleSeries,StockSharp.BusinessEntities.IConnector,System.Decimal)</codeEntityReference>
				  - the rule for the event of the candles partial finish.
			  </listItem>
		  </list>
		  <para>
			  For the <codeEntityReference>T:StockSharp.Algo.Strategies.Strategy</codeEntityReference>
		  </para>
		  <list class="bullet">
		  	  <listItem>
				  <codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.Strategies.StrategyHelper.WhenNewMyTrade(StockSharp.Algo.Strategies.Strategy)</codeEntityReference>
				  - the rule for the event of the strategy new trades occurrence.
			  </listItem>
			  <listItem>
				  <codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.Strategies.StrategyHelper.WhenPositionChanged(StockSharp.Algo.Strategies.Strategy)</codeEntityReference>
				  - the rule for the event of the strategy position change.
			  </listItem>
				<listItem>
					<codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.Strategies.StrategyHelper.WhenStarted(StockSharp.Algo.Strategies.Strategy)</codeEntityReference>
					- the rule for the event of the strategy work start.
				</listItem>
			  <listItem>
			  	  <codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.Strategies.StrategyHelper.WhenStopping(StockSharp.Algo.Strategies.Strategy)</codeEntityReference>
				  - the rule for the event of the strategy work stopping.
			  </listItem>
			  <listItem>
				  <codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.Strategies.StrategyHelper.WhenStopped(StockSharp.Algo.Strategies.Strategy)</codeEntityReference>
				  - the rule for the event of the strategy work stopped.
			  </listItem>
			  <listItem>
				  <codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.Strategies.StrategyHelper.WhenError(StockSharp.Algo.Strategies.Strategy,System.Boolean)</codeEntityReference>
				  - the rule for the event of the strategy error.
			  </listItem>
			  <listItem>
				  <codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.Strategies.StrategyHelper.WhenWarning(StockSharp.Algo.Strategies.Strategy)</codeEntityReference>
				  - the rule for the event of the strategy warning.
			  </listItem>
		  </list>
			<para>
				For the <codeEntityReference>T:StockSharp.BusinessEntities.IConnector</codeEntityReference>
			</para>
			<list class="bullet">
				<listItem>
					<codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.MarketRuleHelper.WhenIntervalElapsed(StockSharp.BusinessEntities.IConnector,System.TimeSpan)</codeEntityReference>
					- the rule for the event of the 
					<codeEntityReference qualifyHint="true" autoUpgrade="true">E:StockSharp.BusinessEntities.IConnector.MarketTimeChanged</codeEntityReference> 
					change on value, which greater than or equal to the parameter.
				</listItem>
				<listItem>
					<codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.MarketRuleHelper.WhenTimeCome(StockSharp.BusinessEntities.IConnector,System.DateTimeOffset[])</codeEntityReference>
					- a rule that is activated upon the exact time occurrence.
				</listItem>
		  	    
		  	    <listItem>
			        <codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.MarketRuleHelper.WhenNewMyTrade(StockSharp.BusinessEntities.ITransactionProvider)</codeEntityReference>
			  	    - the rule for the event of the new trade occurrence.
			    </listItem>
		  	    <listItem>
		  	  	    <codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.MarketRuleHelper.WhenNewOrder(StockSharp.BusinessEntities.ITransactionProvider)</codeEntityReference>
				    - the rule for the event of the new order occurrence.
			    </listItem>
			</list>
			<para>
			  Similarly to the conditions there are predefined actions:
		  </para>
		  <list class="bullet">
			  <listItem>
				  <codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.Strategies.StrategyHelper.Register(StockSharp.Algo.IMarketRule,StockSharp.BusinessEntities.Order)</codeEntityReference>
				  - the action which registers the order.
			  </listItem>
			  <listItem>
				  <codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.Strategies.StrategyHelper.ReRegister(StockSharp.Algo.IMarketRule,StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order)</codeEntityReference>
				  - the action which reregisters the order.
			  </listItem>
			  <listItem>
				  <codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.Strategies.StrategyHelper.Cancel(StockSharp.Algo.IMarketRule,StockSharp.BusinessEntities.Order)</codeEntityReference>
				  - the action which cancels the order.
			  </listItem>

				
				<listItem>
				 	<codeEntityReference qualifyHint="false" autoUpgrade="true">Overload:StockSharp.Algo.Strategies.Extensions.Protect</codeEntityReference>
					- the action which protects trades simultaneously with <codeEntityReference>T:StockSharp.Algo.Strategies.Protective.TakeProfitStrategy</codeEntityReference>
					and <codeEntityReference>T:StockSharp.Algo.Strategies.Protective.StopLossStrategy</codeEntityReference> strategies.
				</listItem>
		  </list>
		  <para>
		  	If you need to create your own unique rule (on any event, which is not provided as standard), you must create the derived
		  	<codeEntityReference qualifyHint="false">T:StockSharp.Algo.MarketRule`2</codeEntityReference> class, which will work with a prerequisite. Below is the
		  	<codeEntityReference qualifyHint="false" autoUpgrade="true">M:StockSharp.Algo.MarketRuleHelper.WhenMoneyMore(StockSharp.BusinessEntities.Portfolio,StockSharp.BusinessEntities.IPortfolioProvider,StockSharp.Messages.Unit)</codeEntityReference>
		  	method implementation:
		  </para>
		  <code language="C#">
			<![CDATA[		
private sealed class PortfolioRule : MarketRule<Portfolio, Portfolio>
{
	private readonly Func<Portfolio, bool> _changed;
	private readonly Portfolio _portfolio;
	private readonly IConnector _connector;

	public PortfolioRule(Portfolio portfolio, IConnector connector, Func<Portfolio, bool> changed) : base(portfolio)
	{
		if (portfolio == null)
			throw new ArgumentNullException("portfolio");

		if (changed == null)
			throw new ArgumentNullException("changed");

		_changed = changed;

		_portfolio = portfolio;
		_connector = connector;
		_connector.PortfolioChanged += OnPortfolioChanged;
	}

	private void OnPortfolioChanged(Portfolio portfolio)
	{
		if ((portfolio==_portfolio) && _changed(_portfolio))
			Activate(_portfolio);
	}

	protected override void DisposeManaged()
	{
		_connector.PortfolioChanged -= OnPortfolioChanged;
		base.DisposeManaged();
	}
}
		
public static MarketRule<Portfolio, Portfolio> WhenMoneyMore(this Portfolio portfolio, Unit money)
{
	if (portfolio == null)
		throw new ArgumentNullException("portfolio");

	if (money == null)
		throw new ArgumentNullException("money");

	var finishMoney = money.Type == UnitTypes.Limit ? money : portfolio.CurrentValue + money;

	return new PortfolioRule(portfolio, pf => pf.CurrentValue > finishMoney)
	{
		Name = "Money increase of portfolio {0} above {1}".Put(portfolio, finishMoney)
	};
}
		]]></code>
		<para>
			The <legacyItalic>PortfolioRule</legacyItalic> rule subscribes to the
			<codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.IPortfolioProvider.PortfolioChanged</codeEntityReference>
			event, and as soon as it is called, then the condition is checked to exceed the current level of money in the portfolio above a specified limit.
			If the condition returns <legacyBold>true</legacyBold>, then the rule is activated through the
			<codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.MarketRule`2.Activate</codeEntityReference> method.
		</para>	

    </introduction>
	</developerWalkthroughDocument>
</topic>
