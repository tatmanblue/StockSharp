<?xml version="1.0" encoding="utf-8"?>
<topic id="8063e30a-394a-4fea-bc49-b7661b2222b6" revisionNumber="1">
  <developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->
    <introduction>
      <para>Помимо стандартного набора таблиц шлюз <codeEntityReference>T:StockSharp.Plaza.PlazaMessageAdapter</codeEntityReference>
      поддерживает дополнительные таблицы. Таблицы, по которым возможно получение данных, описаны в 
      пространстве имен <codeEntityReference>N:StockSharp.Plaza.Metadata</codeEntityReference>.
      Для получения информации по таблице необходимо добавить поток данных, соответствующий данной таблице, в 
      <codeEntityReference qualifyHint="false">P:StockSharp.Plaza.PlazaMessageAdapter.Tables</codeEntityReference>. Все потоки данных описаны в классе
      <codeEntityReference>T:StockSharp.Plaza.PlazaStreamRegistry</codeEntityReference>.
      </para>
	  <code language="C#"><![CDATA[// Добавление таблицы об обязательствах маркетмейкера по фьючерсам
Connector Connector = new Connector();				
...				
var address = "<Address>".To<IPAddress>();
var messageAdapter = new PlazaMessageAdapter(Connector.TransactionIdGenerator)
{
    Login = "<Your Login>",
    Password = "<Your Password>".To<SecureString>(),
    Address = SmartComAddresses.Demo,
};

Connector.Adapter.InnerAdapters.Add(messageAdapter);
...	
messageAdapter.Tables.Add(messageAdapter.TableRegistry.MarketMakingFuture);]]></code>

      <para>После добавления таблицы вся информация по ней будет приходить в обработчики событий
      <codeEntityReference qualifyHint="false">E:StockSharp.Plaza.Metadata.PlazaTable.Inserted</codeEntityReference> и 
      <codeEntityReference qualifyHint="false">E:StockSharp.Plaza.Metadata.PlazaTable.End</codeEntityReference>.</para>
      
	  <code language="C#"><![CDATA[
//Подписка на событие добавления информации по таблице
messageAdapter.TableRegistry.MarketMakingFuture.Inserted += OnMarketMakingFutureStreamInserted;

void OnMarketMakingFutureStreamInserted(PlazaRecord record)
{
    //Метадата для колонок таблицы обязательств ММ по фьючерсам
    var metadata = messageAdapter.TableRegistry.ColumnRegistry.MarketMakingFutureParams;

    //Получение текущего процента выполнения обязательств
    var percentTime = record.Get<decimal>(metadata.PercentTime);
    Console.WriteLine("Текущий процент выполнения обязательств: {0}".Put(percentTime));
}
]]></code>
    </introduction>
    <!-- <prerequisites><content>Optional prerequisites info</content></prerequisites> -->
    <!-- One or more procedure or section with procedure -->
    <nextSteps>
      <content>
        <para>
			<link xlink:href="e2759043-dd8c-40dc-837a-f314fa21163d">Подключение нескольких роботов к одному роутеру</link>
		</para>
      </content>
    </nextSteps>
    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID">Link text</link>
      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>
      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on CodePlex</linkText>
          <linkAlternateText>Go to CodePlex</linkAlternateText>
          <linkUri>http://shfb.codeplex.com</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerWalkthroughDocument>
</topic>