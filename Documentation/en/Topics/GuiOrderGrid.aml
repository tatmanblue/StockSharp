<?xml version="1.0" encoding="utf-8"?>
<topic id="5bb4f6f0-9057-4a88-b968-a5fd60641d4d" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para><codeEntityReference>T:StockSharp.Xaml.OrderGrid</codeEntityReference> - the table to display orders. 
      In addition, the context menu of this table contains commands for operations with orders: registration, 
      replacement and cancellation of orders. Selecting a menu item leads to the generation of events: 
      <codeEntityReference qualifyHint="true">E:StockSharp.Xaml.OrderGrid.OrderRegistering</codeEntityReference>,
      <codeEntityReference qualifyHint="true">E:StockSharp.Xaml.OrderGrid.OrderReRegistering</codeEntityReference> or  
      <codeEntityReference qualifyHint="true">E:StockSharp.Xaml.OrderGrid.OrderCanceling</codeEntityReference> respectively.</para>
       <mediaLink><image placement="left" xlink:href="GUI_OrderGrid" /></mediaLink>
	<alert class="note">
  		<para>The operation itself (registration, replacement, cancellation) is not performed. The appropriate code must be written in the event handlers independently.</para>
	</alert>

	<para>
		<legacyBold>Main members</legacyBold>
	</para>
      
	<list class="bullet">
  		<listItem>
  			<para><codeEntityReference>P:StockSharp.Xaml.OrderGrid.Orders</codeEntityReference> - the list of orders.</para>
  		</listItem>
  		<listItem>
  			<para><codeEntityReference>P:StockSharp.Xaml.OrderGrid.SelectedOrder</codeEntityReference> - the selected order.</para>
  		</listItem>
  		<listItem>
  			<para><codeEntityReference>P:StockSharp.Xaml.OrderGrid.SelectedOrders</codeEntityReference> - - selected orders.</para>
  		</listItem>
  		<listItem>
  			<para><codeEntityReference>M:StockSharp.Xaml.OrderGrid.AddRegistrationFail(StockSharp.BusinessEntities.OrderFail)</codeEntityReference> - the method that adds a message about order registration error in the comment field.</para>
  		</listItem>
  		<listItem>
  			<para><codeEntityReference>E:StockSharp.Xaml.OrderGrid.OrderRegistering</codeEntityReference> - the order registration event (occurs after selecting the appropriate item in the context menu).</para>
  		</listItem>
  		<listItem>
  			<para><codeEntityReference>E:StockSharp.Xaml.OrderGrid.OrderReRegistering</codeEntityReference> - the order replacement event (occurs after selecting the appropriate item in the context menu).</para>
  		</listItem>
  		<listItem>
  			<para><codeEntityReference>E:StockSharp.Xaml.OrderGrid.OrderCanceling</codeEntityReference> - the order cancellation (occurs after selecting the appropriate item in the context menu).</para>
  		</listItem>
  		
	</list>

      
     	  <para>
Below is the code snippet with its use. The code example is taken from <legacyItalic>Samples/InteractiveBrokers/SampleIB</legacyItalic>.
      </para>

      <code title="XAML" language="XAML">
	  				<![CDATA[
<Window x:Class="Sample.OrdersWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:loc="clr-namespace:StockSharp.Localization;assembly=StockSharp.Localization"
    xmlns:xaml="http://schemas.stocksharp.com/xaml"
    Title="{x:Static loc:LocalizedStrings.Orders}" Height="410" Width="930">
	<xaml:OrderGrid x:Name="OrderGrid" x:FieldModifier="public" OrderCanceling="OrderGrid_OnOrderCanceling" OrderReRegistering="OrderGrid_OnOrderReRegistering" />
</Window>
	  				]]>
              </code>
              <code title="C#" language="C#">
					  <![CDATA[
private readonly Connector _connector = new Connector();

private void ConnectClick(object sender, RoutedEventArgs e)
{
 	.......................................	

	_connector.NewOrder += order => _ordersWindow.OrderGrid.Orders.Add(order);
	

	_connector.NewStopOrder += order => _stopOrdersWindow.OrderGrid.Orders.Add(order);
	.......................................			
}
              	

private void OrderGrid_OnOrderCanceling(IEnumerable<Order> orders)
{
	orders.ForEach(_connector.CancelOrder);
}


private void OrderGrid_OnOrderReRegistering(Order order)
{
	var window = new OrderWindow
	{
		Title = LocalizedStrings.Str2976Params.Put(order.TransactionId),
		SecurityProvider = _connector,
		MarketDataProvider = _connector,
		Portfolios = new PortfolioDataSource(_connector),
		Order = order.ReRegisterClone(newVolume: order.Balance)
	};

	if (window.ShowModal(this))
		_connector.ReRegisterOrder(order, window.Order);
}
	  				]]>
             </code>
    </introduction>
  </developerConceptualDocument>
</topic>
