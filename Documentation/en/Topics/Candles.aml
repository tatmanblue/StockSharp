<?xml version="1.0" encoding="utf-8"?>
<topic id="cd52cfcf-938c-4fce-9a56-4e9a001f0792" revisionNumber="1">
	<developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">

	<introduction>
		<para><token>stocksharp</token> supports the following types:</para>
	  
		<list class="bullet">
			<listItem>
				<codeEntityReference>T:StockSharp.Algo.Candles.TimeFrameCandle</codeEntityReference> - 
candle based on timeframe. You can set both popular intervals (minute, hour, day), and customized. For example, 21 seconds, 4.5 minutes, etc.
			</listItem>
			
			<listItem>
				<codeEntityReference>T:StockSharp.Algo.Candles.RangeCandle</codeEntityReference> - 
price range candle. A new candle is created when a trade appears with a price that is out of range. An allowable range is formed each time based on the price of the first trade.
			</listItem>
		  
			<listItem>
				<codeEntityReference>T:StockSharp.Algo.Candles.VolumeCandle</codeEntityReference> - 
a candle is created until the total volume of trades is exceeded. If the new trade exceeds the permissible volume, then it falls into the new candle already.
			</listItem>
		  
			<listItem>
				<codeEntityReference>T:StockSharp.Algo.Candles.TickCandle</codeEntityReference> - 
is the same as <codeEntityReference>T:StockSharp.Algo.Candles.VolumeCandle</codeEntityReference>, only the number of trades is taken as a restriction instead of volume.
			</listItem>
		  
			<listItem>
				<codeEntityReference>T:StockSharp.Algo.Candles.PnFCandle</codeEntityReference> - a candle of the point-and-figure chart (tic-tac-toe chart).
			</listItem>
		  
			<listItem>
				<codeEntityReference>T:StockSharp.Algo.Candles.RenkoCandle</codeEntityReference> - Renko candle.
			</listItem>
		</list>
	  
		<para>How to work with candles is shown in the SampleConnection example, which is located in the 
		<legacyItalic>Samples/Common/SampleConnection</legacyItalic>.</para>
		<para>The following figures show <codeEntityReference>T:StockSharp.Algo.Candles.TimeFrameCandle</codeEntityReference> and   
		<codeEntityReference>T:StockSharp.Algo.Candles.RangeCandle</codeEntityReference> charts:</para>
		
	  
		<mediaLink><image placement="center" xlink:href="sample_timeframecandles" /></mediaLink>
		<mediaLink><image placement="center" xlink:href="sample_rangecandles" /></mediaLink>
	</introduction>

    <procedure>
		<title>Start getting data</title>

		<steps class="ordered">
												
					<step>
				<content>  			
<para>
1.	Create a series of <codeEntityReference>T:StockSharp.Algo.Candles.CandleSeries</codeEntityReference> candles:
</para>
					<code language="C#">
					<![CDATA[
...
_candleSeries = new CandleSeries(CandleSettingsEditor.Settings.CandleType, security, CandleSettingsEditor.Settings.Arg);
...		
					]]>
					</code>
				</content>    		
			</step>
			
						<step>
				<content>
					<para>All the necessary methods for getting candles are implemented in the 
					<codeEntityReference qualifyHint="false">T:StockSharp.Algo.Connector</codeEntityReference> class.</para>
					<para>To get candles, you need to subscribe to the 
					<codeEntityReference qualifyHint="true">E:StockSharp.Algo.Connector.CandleSeriesProcessing</codeEntityReference>,
					event, which signals the appearance of a new value for processing:</para>
			
					<code language="C#">
					<![CDATA[
_connector.CandleSeriesProcessing += Connector_CandleSeriesProcessing;
...

private void Connector_CandleSeriesProcessing(CandleSeries candleSeries, Candle candle)
{
	Chart.Draw(_candleElement, candle);
}

...
					]]>
					</code>
					
					<alert class="note">
						To display the candles, the <codeEntityReference>T:StockSharp.Xaml.Charting.Chart</codeEntityReference> graphic component is used.
					</alert>
				</content>
			</step>
			
			<step>
				<content>
					<para>Next, pass the created candle series to the connector and start getting data through 
<codeEntityReference qualifyHint="false">M:StockSharp.Algo.Connector.SubscribeCandles(StockSharp.Algo.Candles.CandleSeries,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int64},System.Nullable{System.Int64},StockSharp.Messages.IMessageAdapter)</codeEntityReference>:</para>

					<code language="C#">
					<![CDATA[
...
_connector.SubscribeCandles(_candleSeries, DateTime.Today.Subtract(TimeSpan.FromDays(30)), DateTime.Now);	
...
		
					]]>
					</code>
			
					<para>After this stage, the <codeEntityReference qualifyHint="true">E:StockSharp.Algo.Connector.CandleSeriesProcessing</codeEntityReference> event will be raised.</para>
				</content>
			</step>
			<step>
				<content>
					<para>The  
		<codeEntityReference qualifyHint="true">E:StockSharp.Algo.Connector.CandleSeriesProcessing</codeEntityReference>
event is raised not only when a new candle appears, but also when the current one changes.</para>
		
		<para>If you want to display only <legacyBold>"whole"</legacyBold> candles, then you need to check the 
		<codeEntityReference qualifyHint="false">P:StockSharp.Algo.Candles.Candle.State</codeEntityReference> property of the arrived candle:</para>
		
		<code language="C#">
		<![CDATA[
...
private void Connector_CandleSeriesProcessing(CandleSeries candleSeries, Candle candle)
{
    if (candle.State == CandleStates.Finished) 
    {
       var chartData = new ChartDrawData();
       chartData.Group(candle.OpenTime).Add(_candleElement, candle);
       Chart.Draw(chartData);
    }
}
...
		]]>
		</code>	
				</content>
			</step>
<step>	
				<content>
				
<para>You can set some properties for <codeEntityReference>T:StockSharp.Algo.Candles.CandleSeries</codeEntityReference>:</para>

<list class="bullet">
  <listItem><para>
<codeEntityReference>P:StockSharp.Algo.Candles.CandleSeries.BuildCandlesMode</codeEntityReference> sets the mode of building candles. By default,
<codeEntityReference>F:StockSharp.Messages.MarketDataBuildModes.LoadAndBuild</codeEntityReference> is specified, which means that finished data will be requested, or built from the data type specified in the 
<codeEntityReference>P:StockSharp.Algo.Candles.CandleSeries.BuildCandlesFrom</codeEntityReference> property. You can also set 
<codeEntityReference>F:StockSharp.Messages.MarketDataBuildModes.Load</codeEntityReference> to request only finished data. Or 
<codeEntityReference>F:StockSharp.Messages.MarketDataBuildModes.Build</codeEntityReference>, for building from the data type specified in the  
<codeEntityReference>P:StockSharp.Algo.Candles.CandleSeries.BuildCandlesFrom</codeEntityReference> property without requesting the finished data.
</para></listItem>
  <listItem>
When building candles, you need to set the 
  <codeEntityReference>P:StockSharp.Algo.Candles.CandleSeries.BuildCandlesFrom</codeEntityReference>, property, which indicates which data type is used as a source 
  (<codeEntityReference>F:StockSharp.Messages.MarketDataTypes.Level1</codeEntityReference>, 
  <codeEntityReference>F:StockSharp.Messages.MarketDataTypes.MarketDepth</codeEntityReference>,
  <codeEntityReference>F:StockSharp.Messages.MarketDataTypes.Trades</codeEntityReference> and etc.
  ).
  <para>
 </para></listItem>
  <listItem>
For some data types, you need to additionally specify the 
  <codeEntityReference>P:StockSharp.Algo.Candles.CandleSeries.BuildCandlesField</codeEntityReference>, 
property from which the data will be built. For example, for 
<codeEntityReference>F:StockSharp.Messages.MarketDataTypes.Level1</codeEntityReference>
, you can specify 
 <codeEntityReference>F:StockSharp.Messages.Level1Fields.BestAskPrice</codeEntityReference>,
, which means that candles will be built from the 
 <codeEntityReference>F:StockSharp.Messages.Level1Fields.BestAskPrice</codeEntityReference>  
property of 
<codeEntityReference>F:StockSharp.Messages.MarketDataTypes.Level1</codeEntityReference> data.
  <para>
 </para></listItem>

</list>
				</content>
			</step>
			<step>
				<content>
				 <para>Let's consider a few examples of building different candle types:</para>
				 
<list class="bullet">
  <listItem><para>Since most sources provide candles with standard timeframes, it’s enough to set the type and timeframe to get such candles:
  </para>
  <code language="C#">
					<![CDATA[
_candleSeries = new CandleSeries(typeof(TimeFrameCandle), security, TimeSpan.FromMinutes(5));
					]]>
					</code>
  </listItem>
    <listItem><para>
If you just want to load the finished candles, then you need to set the 
<codeEntityReference>P:StockSharp.Algo.Candles.CandleSeries.BuildCandlesMode</codeEntityReference> property in 
<codeEntityReference>F:StockSharp.Messages.MarketDataBuildModes.Load</codeEntityReference>:
  </para>
  <code language="C#">
					<![CDATA[
_candleSeries = new CandleSeries(typeof(TimeFrameCandle), security, TimeSpan.FromMinutes(5))
{
	BuildCandlesMode = MarketDataBuildModes.Load,
};	
					]]>
					</code>
  </listItem>
    <listItem><para>If the source does not provide the necessary timeframe candles, then they can be built from other market data. Below is an example of building candles with a timeframe of 21 seconds from trades:
  </para>
  <code language="C#">
					<![CDATA[
_candleSeries = new CandleSeries(typeof(TimeFrameCandle), security, TimeSpan.FromSeconds(21))
{
	BuildCandlesMode = MarketDataBuildModes.Build,
	BuildCandlesFrom = MarketDataTypes.Trades,
};	
					]]>
					</code>
  </listItem>
 
     <listItem><para>If the data source provides neither candles nor trades, candles can be built from the market depth spread:
  </para>
  <code language="C#">
					<![CDATA[
_candleSeries = new CandleSeries(typeof(TimeFrameCandle), security, TimeSpan.FromSeconds(21))
{
	BuildCandlesMode = MarketDataBuildModes.Build,
	BuildCandlesFrom = MarketDataTypes.MarketDepth,
	BuildCandlesField = Level1Fields.SpreadMiddle,
};	
					]]>
					</code>
  </listItem>
 
  <listItem><para>Since there are no sources providing a ready <legacyBold>volume profile</legacyBold>, it also needs to be built from another data type. To draw a <legacyBold>volume profile</legacyBold>, you need to set the 
<codeEntityReference>P:StockSharp.Algo.Candles.CandleSeries.IsCalcVolumeProfile</codeEntityReference> property to 'true', as well as 
<codeEntityReference>P:StockSharp.Algo.Candles.CandleSeries.BuildCandlesMode</codeEntityReference> to 
<codeEntityReference>F:StockSharp.Messages.MarketDataBuildModes.Build</codeEntityReference>. 
And specify the data type from which the <legacyBold>volume profile</legacyBold> will be built. 
In this case, it's <codeEntityReference>F:StockSharp.Messages.MarketDataTypes.Trades</codeEntityReference>:
</para>
					<code language="C#">
					<![CDATA[
_candleSeries = new CandleSeries(typeof(TimeFrameCandle), security, TimeSpan.FromMinutes(5))
{
	BuildCandlesMode = MarketDataBuildModes.Build,
	BuildCandlesFrom = MarketDataTypes.Trades,
    IsCalcVolumeProfile = true,
};	
					]]>
					</code>

</listItem>
  <listItem><para>
  o	Since most data sources do not provide finished candles, except for 
  <codeEntityReference>T:StockSharp.Algo.Candles.TimeFrameCandle</codeEntityReference>,
, other candle types are built similarly to the <legacyBold>volume profile</legacyBold>. You need to set the 
  <codeEntityReference>P:StockSharp.Algo.Candles.CandleSeries.BuildCandlesMode</codeEntityReference> property to 
  <codeEntityReference>F:StockSharp.Messages.MarketDataBuildModes.Build</codeEntityReference> or 
  <codeEntityReference>F:StockSharp.Messages.MarketDataBuildModes.LoadAndBuild</codeEntityReference>. Also set the 
  <codeEntityReference>P:StockSharp.Algo.Candles.CandleSeries.BuildCandlesFrom</codeEntityReference> property and the 
  <codeEntityReference>P:StockSharp.Algo.Candles.CandleSeries.BuildCandlesField</codeEntityReference> property, if necessary.
</para>
<para>
The following code shows building a 
  <codeEntityReference>T:StockSharp.Algo.Candles.VolumeCandle</codeEntityReference> 
with a volume of 1000 contracts. The middle of the market depth spread is used as the data source for building.</para>
  					<code language="C#">
					<![CDATA[
_candleSeries = new CandleSeries(typeof(VolumeCandle), security, 1000m)
{
	BuildCandlesMode = MarketDataBuildModes.LoadAndBuild,
	BuildCandlesFrom = MarketDataTypes.MarketDepth,
	BuildCandlesField = Level1Fields.SpreadMiddle,
};
					]]>
					</code>
  </listItem>
    <listItem><para>
The following code shows building a 
 <codeEntityReference>T:StockSharp.Algo.Candles.TickCandle</codeEntityReference> of 1000 trades. Trades are used as a data source for building.</para>
  					<code language="C#">
					<![CDATA[	   
_candleSeries = new CandleSeries(typeof(TickCandle), security, 1000)
{
	BuildCandlesMode = MarketDataBuildModes.Build,
	BuildCandlesFrom = MarketDataTypes.Trades,
};
					]]>
					</code>
  </listItem>
    <listItem><para>
The following code shows building a 
  <codeEntityReference>T:StockSharp.Algo.Candles.RangeCandle</codeEntityReference> with a range of 0.1 c.u. The best buy of a market depth is used as a data source for building:</para>
  					<code language="C#">
					<![CDATA[
_candleSeries = new CandleSeries(typeof(RangeCandle), security, new Unit(0.1m))
{
	BuildCandlesMode = MarketDataBuildModes.LoadAndBuild,
    BuildCandlesFrom = MarketDataTypes.MarketDepth,
    BuildCandlesField = Level1Fields.BestBid,
};
					]]>
					</code>
  </listItem>
    <listItem><para>
The following code shows the building 
<codeEntityReference>T:StockSharp.Algo.Candles.RenkoCandle</codeEntityReference>. 
The price of the last trade from Level1 is used as a data source for building:</para>
  					<code language="C#">
					<![CDATA[
_candleSeries = new CandleSeries(typeof(RenkoCandle), security, new Unit(0.1m))
{
	BuildCandlesMode = MarketDataBuildModes.LoadAndBuild,
    BuildCandlesFrom = MarketDataTypes.Level1,
    BuildCandlesField = Level1Fields.LastTradePrice,
};
					]]>
					</code>
  </listItem>
    <listItem><para>
The following code shows the building 
  <codeEntityReference>T:StockSharp.Algo.Candles.PnFCandle</codeEntityReference>. Trades are used as a data source for building.</para>
  					<code language="C#">
					<![CDATA[
_candleSeries = new CandleSeries(typeof(PnFCandle), security, new PnFArg() { BoxSize = 0.1m, ReversalAmount =1})
{
	BuildCandlesMode = MarketDataBuildModes.Build,
	BuildCandlesFrom = MarketDataTypes.Trades,
};	
					]]>
					</code>
  </listItem>
</list>
			</content>
			</step>
		</steps>
	</procedure>
        <relatedTopics>
<link xlink:href="287125e1-7c7e-4be3-a8ce-5018538e613f"/>
<link xlink:href="ccc96909-8623-4f56-b3ee-fdc5070b3fde"/>
<link xlink:href="99da6499-9ac1-4e7e-bcaf-a0c832dce4de"/>
    </relatedTopics>    
	</developerWalkthroughDocument>
</topic>
