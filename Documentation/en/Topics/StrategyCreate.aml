<?xml version="1.0" encoding="utf-8"?>
<topic id="a8159c99-256b-46e4-80fe-7cf92944b4c9" revisionNumber="0">
  <developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>
		Along with the event-driven approach for <link xlink:href="a8159c99-256b-46e4-80fe-7cf92944b4c9">strategies creating</link>, in the <token>stocksharp</token> 
		you can create code for a strategy based on an iteration model. This approach should be used when you want a simple strategy implementation, is not critical
		to the execution speed.
      </para>

      <para>
	  	To create a strategy based on an iteration model the <codeEntityReference>T:StockSharp.Algo.Strategies.TimeFrameStrategy</codeEntityReference> class is used.
	  	When you use this class, the main trading algorithm code should be focused in the <codeEntityReference>M:StockSharp.Algo.Strategies.TimeFrameStrategy.OnProcess</codeEntityReference> method.
	  	This method call frequency depends on the <codeEntityReference>P:StockSharp.Algo.Strategies.TimeFrameStrategy.Interval</codeEntityReference> value.
	  	The approach in the <codeEntityReference>T:StockSharp.Algo.Strategies.TimeFrameStrategy</codeEntityReference>
		using is iteration processing: the beginning of the method -> check the state of the market -> orders registration (or cancel) -> method end. With this approach,
		you need to store the states for the next method call could get the data created in the previous call.
      </para>

      <para>
		The example of the <token>ma</token> trading algorithm (its simple implementation) shows the iteration model work. In example the inheriting class
		<codeEntityReference>T:StockSharp.Algo.Strategies.TimeFrameStrategy</codeEntityReference> implemented, which stores the state of moving crosses (the long
		is above or below the short one) between the <codeEntityReference>M:StockSharp.Algo.Strategies.TimeFrameStrategy.OnProcess</codeEntityReference> method calls.	 
	 </para>
	  <para>
		<mediaLink>
		  <image placement="center" xlink:href="samplesma" />
		</mediaLink>
	  </para>
    </introduction>

	<procedure>
	  <title>The moving average algorithm:</title>

	  <steps class="ordered">
		<step>
		  <content>
		  	<para>
			  Historical data are necessary for this algorithm, so, for example, the 5-minutes were downloaded from the <token>IQFeed</token> site on the AAPL paper
			  and saved to the AAPL_history.txt file.
			</para>
			<alert class="note">
			  <para>
				Before starting the program it is recommended to update the data by downloading them from the website. The correct data format can be viewed in the test file.
			  </para>
			</alert>
		  </content>
		</step>
		<step>
		  <content>
		    <para>
		  		The simple moving average formula:
		  	</para>
			<math>
			  SMA = (P<subscript>m</subscript> + P<subscript>m-1</subscript> + ... + P<subscript>m-n</subscript>) / n
			</math>
			<para>
				Indicators implemented in the <codeEntityReference>N:StockSharp.Algo.Indicators</codeEntityReference> namespace. For more details see
				<link xlink:href="8b9125ee-9d74-444f-82d6-5dea51266fd4">Indicators</link>.
			</para>
		  </content>
		</step>
		<step>
		  <content>
			<para>
			  The implementation code of the trading strategy for moving average:
			</para>
			<code language="C#">
				<![CDATA[
class SmaStrategy : Strategy
{
	private readonly Connector _connector;
	private readonly CandleSeries _series;
	private bool _isShortLessThenLong;

	public SmaStrategy(CandleSeries series, SimpleMovingAverage longSma, SimpleMovingAverage shortSma)
	{
		_series = series;
		_connector = ((Connector)this.Connector);
		LongSma = longSma;
		ShortSma = shortSma;
	}

	public SimpleMovingAverage LongSma { get; }
	public SimpleMovingAverage ShortSma { get; }

	protected override void OnStarted()
	{
		_connector
			.WhenCandlesFinished(_series)
			.Do(ProcessCandle)
			.Apply(this);

		// store current values for short and long
		_isShortLessThenLong = ShortSma.GetCurrentValue() < LongSma.GetCurrentValue();

		base.OnStarted();
	}

	private void ProcessCandle(Candle candle)
	{
		// strategy are stopping
		if (ProcessState == ProcessStates.Stopping)
		{
			CancelActiveOrders();
			return;
		}

		// process new candle
		LongSma.Process(candle);
		ShortSma.Process(candle);

		// calc new values for short and long
		var isShortLessThenLong = ShortSma.GetCurrentValue() < LongSma.GetCurrentValue();

		// crossing happened
		if (_isShortLessThenLong != isShortLessThenLong)
		{
			// if short less than long, the sale, otherwise buy
			var direction = isShortLessThenLong ? Sides.Sell : Sides.Buy;

			// calc size for open position or revert
			var volume = Position == 0 ? Volume : Position.Abs() * 2;

			// register order (limit order)
			//RegisterOrder(this.CreateOrder(direction, (decimal)Security.GetCurrentPrice(direction), volume));

			// or revert position via market quoting
			var strategy = new MarketQuotingStrategy(direction, volume);
			ChildStrategies.Add(strategy);

			// store current values for short and long
			_isShortLessThenLong = isShortLessThenLong;
		}
	}
}
]]></code>
			<para>
			  At the beginning of the method through the <codeEntityReference qualifyHint="true">P:StockSharp.Algo.Strategies.Strategy.ProcessState</codeEntityReference>
			  property it is checked to see if the strategy is in the process of stopping (for example, the <codeEntityReference qualifyHint="true">M:StockSharp.Algo.Strategies.Strategy.Stop</codeEntityReference>
			  method has been called or an error occurred). If the strategy is in the process of stopping, then all active orders are cancelled through the
			  <codeEntityReference qualifyHint="true">M:StockSharp.Algo.Strategies.Strategy.CancelActiveOrders</codeEntityReference>,
			  method, to prevent their activation at unfavorable prices. If you want not only to cancel orders, but also to close the position, you can use the
			  <codeEntityReference qualifyHint="true">M:StockSharp.Algo.Strategies.StrategyHelper.ClosePosition(StockSharp.Algo.Strategies.Strategy,System.Decimal)</codeEntityReference> method.
			 </para>
			<para> 
			  If it is impossible to stop the strategy at the moment for some reason, and it takes some time, it is necessary to return the
			  <codeEntityReference qualifyHint="true">F:StockSharp.Algo.Strategies.ProcessResults.Continue</codeEntityReference> value, and to try to finalize the
			  strategy work in the next iteration of the <codeEntityReference>M:StockSharp.Algo.Strategies.TimeFrameStrategy.OnProcess</codeEntityReference> call.
			  That is why after calling the <codeEntityReference qualifyHint="true">M:StockSharp.Algo.Strategies.Strategy.Stop</codeEntityReference> method the strategy
			  is not immediately changing its state to the <codeEntityReference qualifyHint="true">F:StockSharp.Algo.ProcessStates.Stopped</codeEntityReference>.
			  In case of the SmaStrategy such a situation can not occured, as there are no special circumstances in the implementation of the moving average. Therefore,
			  the <codeEntityReference qualifyHint="true">F:StockSharp.Algo.Strategies.ProcessResults.Stop</codeEntityReference> is returned immediately when strategy stops.
			</para>
			<para>
			  The code of work with moving average goes after checking. <legacyBold>Important!</legacyBold> The <codeEntityReference>T:StockSharp.Algo.Strategies.Strategy</codeEntityReference>
			  class has the <codeEntityReference>M:StockSharp.Algo.Strategies.Strategy.RegisterOrder(StockSharp.BusinessEntities.Order)</codeEntityReference>
			  method, which must be called instead of direct registration through the (<codeEntityReference qualifyHint="true">M:StockSharp.Algo.Connector.RegisterOrder(StockSharp.BusinessEntities.Order)</codeEntityReference>)
			  connector. All trades that have taken place on such order will be captured by the <codeEntityReference>T:StockSharp.Algo.Strategies.Strategy</codeEntityReference>.
			  And on the basis of these trades the calculation of position, slippage, P&amp;L etc. will be done. In addition, such orders and trades will be added to the
			  <codeEntityReference qualifyHint="true">P:StockSharp.Algo.Strategies.Strategy.Orders</codeEntityReference> and
			  <codeEntityReference qualifyHint="true">P:StockSharp.Algo.Strategies.Strategy.MyTrades</codeEntityReference> collections, so you can view all the orders
			  and trades created within the framework of the strategy.
			</para>
			<alert class-="note">
			  <para>
				If you want to change the registered order, you also have to call <codeEntityReference>M:StockSharp.Algo.Strategies.Strategy.ReRegisterOrder(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order)</codeEntityReference>
				method, and not to apply directly to the connector through the <codeEntityReference qualifyHint="true">M:StockSharp.Algo.Connector.ReRegisterOrder(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order)</codeEntityReference>
				method.
			  </para>
			</alert>
			<para>
			  At the end of the method the <codeEntityReference qualifyHint="true">F:StockSharp.Algo.Strategies.ProcessResults.Continue</codeEntityReference>,
			  value returned, which means that the strategy has not finished its work and you need to call it again. If any other algorithm that has a termination
			  criterion (for example, the position change until a certain value) implements, then in case of operation termination of such algorithm it is necessary
			  to return the <codeEntityReference qualifyHint="true">F:StockSharp.Algo.Strategies.ProcessResults.Stop</codeEntityReference> value.
			</para>
		  </content>
		</step>
		<step>
		  <content>
			<para>
			  Initialization of the strategy itself and filling in its by the historical data:
			</para>
			<code language="C#">
	<![CDATA[
_connector.Connected += () =>
{
	_connector.NewSecurity += security =>
	{
		if (!security.Code.CompareIgnoreCase("AAPL"))
			return;

		_aapl = security;
		this.GuiAsync(() =>
		{
			Start.IsEnabled = true;
		});
	};

	_connector.NewMyTrade += trade =>
	{
		if (_strategy != null)
		{
			if (_strategy.Orders.Contains(trade.Order))
				Trades.Trades.Add(trade);
		}
	};

	_connector.CandleSeriesProcessing += (series, candle) =>
	{
		if (_isTodaySmaDrawn && candle.State == CandleStates.Finished)
			ProcessCandle(candle);
	};
	//_connector.Error += ex => this.GuiAsync(() => MessageBox.Show(this, ex.ToString()));
	_connector.ConnectionError += ex =>
	{
		if (ex != null)
			this.GuiAsync(() => MessageBox.Show(this, ex.ToString()));
	};

	this.GuiAsync(() =>
	{
		ConnectBtn.IsEnabled = false;
		Report.IsEnabled = true;
	});
};

...

private void StartClick(object sender, RoutedEventArgs e)
{
	if (_strategy == null)
	{
		if (Portfolios.SelectedPortfolio == null)
		{
			MessageBox.Show(this, LocalizedStrings.Str3009);
			return;
		}

		var series = new CandleSeries(typeof(TimeFrameCandle), _aapl, _timeFrame);

		_strategy = new SmaStrategy(series, new SimpleMovingAverage { Length = 80 }, new SimpleMovingAverage { Length = 10 })
		{
			Volume = 1,
			Security = _aapl,
			Portfolio = Portfolios.SelectedPortfolio,
			Connector = _connector,
		};
		_strategy.Log += OnLog;
		_strategy.PropertyChanged += OnStrategyPropertyChanged;

		_candlesElem = new ChartCandleElement();
		_area.Elements.Add(_candlesElem);

		_longMaElem = new ChartIndicatorElement
		{
			Title = LocalizedStrings.Long,
			Color = Colors.OrangeRed
		};
		_area.Elements.Add(_longMaElem);

		_shortMaElem = new ChartIndicatorElement
		{
			Title = LocalizedStrings.Short,
			Color = Colors.RoyalBlue
		};
		_area.Elements.Add(_shortMaElem);

		IEnumerable<Candle> candles = CultureInfo.InvariantCulture.DoInCulture(() => File.ReadAllLines("AAPL_history.txt").Select(line =>
		{
			var parts = line.Split(',');
			var time = (parts[0] + parts[1]).ToDateTime("yyyyMMddHHmmss").ApplyTimeZone(TimeHelper.Moscow);
			return (Candle)new TimeFrameCandle
			{
				OpenPrice = parts[2].To<decimal>(),
				HighPrice = parts[3].To<decimal>(),
				LowPrice = parts[4].To<decimal>(),
				ClosePrice = parts[5].To<decimal>(),
				TimeFrame = _timeFrame,
				OpenTime = time,
				CloseTime = time + _timeFrame,
				TotalVolume = parts[6].To<decimal>(),
				Security = _aapl,
				State = CandleStates.Finished,
			};
		}).ToArray());

		var lastCandleTime = default(DateTimeOffset);

		foreach (var candle in candles)
		{
			ProcessCandle(candle);
			lastCandleTime = candle.OpenTime;
		}

		_connector.SubscribeCandles(_candleSeries, DateTime.Today.Subtract(TimeSpan.FromDays(30)), DateTime.Now);
...
]]></code>
		  </content>
		</step>
		<step>
		  <content>
			<para>
			  Start and stop of the trading strategy is as follows:
			</para>
			<code language="C#"><![CDATA[
...
	if (_strategy.ProcessState == ProcessStates.Stopped)
	{
		_connector.SubscribeMarketDepth(_strategy.Security);
		_strategy.Start();
		Start.Content = LocalizedStrings.Str242;
	}
	else
	{
		_connector.UnSubscribeMarketDepth(_strategy.Security);
		_strategy.Stop();
		Start.Content = LocalizedStrings.Str2421;
	}
...	

	]]></code>
			<para>
			  An error can occur in the process of trading strategy work. In this case, the <codeEntityReference>T:StockSharp.Algo.Strategies.Strategy</codeEntityReference>
			  captures the error through the <codeEntityReference qualifyHint="true">M:StockSharp.Algo.Strategies.Strategy.OnError(StockSharp.Algo.Strategies.Strategy,System.Exception)</codeEntityReference> method,
			  the <codeEntityReference qualifyHint="true">P:StockSharp.Algo.Strategies.Strategy.ErrorState</codeEntityReference> value changes on
			  <codeEntityReference qualifyHint="true">F:StockSharp.Logging.LogLevels.Error</codeEntityReference>, the error text is displayed through the
			  <codeEntityReference qualifyHint="true">E:StockSharp.Logging.ILogSource.Log</codeEntityReference> 
			  event and strategy termination begins by itself.
			</para>
			<note class="note">
			  The <codeEntityReference qualifyHint="true">F:StockSharp.Logging.LogLevels.Warning</codeEntityReference> value is aimed to alert about anything unusual.
			  For example, to display information to the user that clearing started, or the account has not sufficient funds and there is a probability that the next
			  order can not be registered.
			</note>
		  </content>
		</step>
		<step>
		  <content>
			<para>
			  Drawing on the chart of new data lines of moving average and candles showing the trend:
			</para>
			<code language="C#">
			<![CDATA[
foreach (var candle in candles)
{
	ProcessCandle(candle);
	lastCandleTime = candle.OpenTime;
}

_connector.Start(series);

var bounds = _timeFrame.GetCandleBounds(_connector.CurrentTime);

candles = _connector.GetCandles(series, new Range<DateTimeOffset>(lastCandleTime + _timeFrame, bounds.Min));

foreach (var candle in candles)
{
	ProcessCandle(candle);
}
...
private void ProcessCandle(Candle candle)
{
	var longValue = candle.State == CandleStates.Finished ? _strategy.LongSma.Process(candle) : null;
	var shortValue = candle.State == CandleStates.Finished ? _strategy.ShortSma.Process(candle) : null;

	var chartData = new ChartDrawData();

	chartData
		.Group(candle.OpenTime)
			.Add(_candlesElem, candle)
			.Add(_longMaElem, longValue)
			.Add(_shortMaElem, shortValue);

	Chart.Draw(chartData);
}


]]></code>
		  </content>
		</step>
	  </steps>
	</procedure>
    

    <nextSteps>
      <content>
        <para><link xlink:href="8ea639f6-ce74-4a00-9f13-db59c8c2396f">Child strategies</link></para>
      </content>
    </nextSteps>
    
    <relatedTopics>
    </relatedTopics>
    
  </developerWalkthroughDocument>
</topic>
