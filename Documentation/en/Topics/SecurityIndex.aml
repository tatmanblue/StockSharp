<?xml version="1.0" encoding="utf-8"?>
<topic id="ee8f7be8-80ad-4ab9-a5aa-14754fe024f1" revisionNumber="1">
	<developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">

	<introduction>
		<para><codeEntityReference>T:StockSharp.Algo.IndexSecurity</codeEntityReference> - the index built from instruments. 
		For example, to set a spread in arbitrage or pair trading. It has the following implementations.</para>
		<para>1.	<codeEntityReference>T:StockSharp.Algo.Expressions.ExpressionIndexSecurity</codeEntityReference> - 
is the index built from a combination of several instruments through the <codeEntityReference>P:StockSharp.Algo.Expressions.ExpressionIndexSecurity.Formula</codeEntityReference> mathematical formula.</para>
		<para>2.	<codeEntityReference>T:StockSharp.Algo.WeightedIndexSecurity</codeEntityReference> - 
		is the index built from instruments using weighting factors <codeEntityReference>P:StockSharp.Algo.WeightedIndexSecurity.Weights</codeEntityReference>.</para>
	</introduction>
<procedure>
			<title>The ExpressionIndexSecurity creating</title>
				<steps class="ordered">
					<step>
						<content>
<para>To declare the compound instruments that will be included in <codeEntityReference>T:StockSharp.Algo.Expressions.ExpressionIndexSecurity</codeEntityReference> 
and in the <codeEntityReference>T:StockSharp.Algo.Expressions.ExpressionIndexSecurity</codeEntityReference> itself:</para>
            				<code language="C#">
            				<![CDATA[

ConfigManager.RegisterService<ICompilerService>(new RoslynCompilerService());
// Or
//ConfigManager.RegisterService<ICompilerService>(new Fw40CompilerService(Directory.GetCurrentDirectory(), Directory.GetCurrentDirectory()));

private Security _instr1;
private Security _instr2;

private ExpressionIndexSecurity _indexInstr;

private const string _secCode1 = "GZM5";
private const string _secCode2 = "LKM5";
							]]>
							</code>
						</content>
					</step>

					<step>
						<content>
<para>To create the <codeEntityReference>T:StockSharp.Algo.Expressions.ExpressionIndexSecurity</codeEntityReference>:</para>
            				<code language="C#">
            				<![CDATA[
_indexInstr = new ExpressionIndexSecurity
{
    Id = "IndexInstr@NYSE",
    Expression = "ESM5@NYSE/APM5@NYSE",
    Board = ExchangeBoard.Nyse,
};
							]]>
							</code>						
						</content>
					</step>
				</steps>
		</procedure>
		<procedure>
			<title>The WeightedIndexSecurity creating</title>
				<steps class="ordered">
					<step>
						<content>
							<para>To declare the compound instruments that will be included in 
							<codeEntityReference>T:StockSharp.Algo.WeightedIndexSecurity</codeEntityReference> and in the 
							<codeEntityReference>T:StockSharp.Algo.WeightedIndexSecurity</codeEntityReference> itself:</para>
            				<code language="C#">
            				<![CDATA[
private Security _instr1;
private Security _instr2;

private WeightedIndexSecurity _indexInstr;

private const string _secCode1 = "GZM5";
private const string _secCode2 = "LKM5";
							]]>
							</code>
						</content>
					</step>

					<step>
						<content>
							<para>To create the  <codeEntityReference>T:StockSharp.Algo.WeightedIndexSecurity</codeEntityReference>:</para>
            				<code language="C#">
            				<![CDATA[
_indexInstr = new WeightedIndexSecurity() { ExchangeBoard = ExchangeBoard.Nyse, Id = "IndexInstr" };
							]]>
							</code>						
						</content>
					</step>
					
					<step>
						<content>
							<para>To add the compound instruments to it:</para>
            				<code language="C#">
            				<![CDATA[
_indexInstr.Weights.Add(_instr1, 1);
_indexInstr.Weights.Add(_instr2, -1);
							]]>
							</code>						
						</content>
					</step>

				</steps>
		</procedure>

	</developerWalkthroughDocument>
</topic>
