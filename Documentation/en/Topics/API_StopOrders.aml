<?xml version="1.0" encoding="utf-8"?>
<topic id="2587051d-1e94-4fb2-b5c1-d57cb5af1b6d" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
	  <para>
To create a new stop order, you need to create an 
<codeEntityReference>T:StockSharp.BusinessEntities.Order</codeEntityReference>,
object that contains information about the order and register it on the exchange.</para>
<para>Unlike a regular order, for a stop order, you need to specify the 
<codeEntityReference qualifyHint="true">P:StockSharp.BusinessEntities.Order.Type</codeEntityReference> 
property as 
<codeEntityReference>F:StockSharp.Messages.OrderTypes.Conditional</codeEntityReference> 
and set the 
<codeEntityReference qualifyHint="true">P:StockSharp.BusinessEntities.Order.Condition</codeEntityReference> 
property with the necessary order conditions.</para>
<para>Further, if you need to work with the order (for example, cancel it or change it), then this 
<codeEntityReference>T:StockSharp.BusinessEntities.Order</codeEntityReference>.
object shall be used. To register orders on the exchange, the 
<codeEntityReference>M:StockSharp.Algo.Connector.RegisterOrder(StockSharp.BusinessEntities.Order)</codeEntityReference>
method is provided, which sends an order to the server.</para>
            				<code language="C#">
            				<![CDATA[
Connector Connector = new Connector();		
...   
private void StopOrder_Click(object sender, RoutedEventArgs e)
{
	var order = new Order
	{
		Security = SecurityEditor.SelectedSecurity,
		Portfolio = PortfolioEditor.SelectedPortfolio,
		Price = decimal.Parse(TextBoxPrice.Text),
		Volume = decimal.Parse(TextBoxVolumePrice.Text),
		Direction = Sides.Buy,
        Type = OrderTypes.Conditional,
        Condition = new FixOrderCondition()
        {
            Type = FixOrderConditionTypes.StopLimit,
            StopLimitPrice = decimal.Parse(TextBoxStopLimitPrice.Text),
        }
	};

	Connector.RegisterOrder(order);
}

...
							]]>
							</code>	
<para>
Each connection has its own implementation of the 
<codeEntityReference>T:StockSharp.Messages.OrderCondition</codeEntityReference> 
class, since each connection has its own unique features. For example, for 
<link xlink:href="d2379d21-9bea-4199-8432-c25f73cb1594" /> it is 
<codeEntityReference>T:StockSharp.Kucoin.KucoinOrderCondition</codeEntityReference>, etc.
</para>
    </introduction>

    <relatedTopics>
<link xlink:href="718fbbc7-efa5-45ed-80ef-e0a32fd4a8e2" />
    </relatedTopics>
  </developerConceptualDocument>
</topic>