<?xml version="1.0" encoding="utf-8"?>
<topic id="41a3b3e7-a7cd-43ba-842f-13f6a7199d26" revisionNumber="0">
  <developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
	  <introduction>
		  <para>The order during it’s life goes through the following states:</para>
		  <mediaLink><image placement="center" xlink:href="OrderStates"/></mediaLink>
		  <list class="bullet">
			  <listItem>
				  <codeEntityReference>F:StockSharp.Messages.OrderStates.None</codeEntityReference> - the order has been created in the algorithm and has not been sent to the registration.
			  </listItem>
			  <listItem>
				  <codeEntityReference>F:StockSharp.Messages.OrderStates.Pending</codeEntityReference> - the order has been sent to the registration
				  (<codeEntityReference qualifyHint="true">M:StockSharp.Algo.Connector.RegisterOrder(StockSharp.BusinessEntities.Order)</codeEntityReference>) and the
				  <codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.ITransactionProvider.NewOrder</codeEntityReference> event for it has been called.
				  The confirmation of the order acceptance from the exchange is expected. If successful, the <codeEntityReference qualifyHint="true">E:StockSharp.Algo.Connector.OrderChanged</codeEntityReference>,
				  event will be called and the order will be changed to the <codeEntityReference>F:StockSharp.Messages.OrderStates.Active</codeEntityReference> state.
				  Also the <codeEntityReference qualifyHint="true">P:StockSharp.BusinessEntities.Order.Id</codeEntityReference> and <codeEntityReference qualifyHint="true">P:StockSharp.BusinessEntities.Order.Time</codeEntityReference>
				  properties will be initialized. In the case of the order rejection the <codeEntityReference qualifyHint="true">E:StockSharp.Algo.Connector.OrderRegisterFailed</codeEntityReference>
				  event with the error description will be called and the order will be changed to the <codeEntityReference>F:StockSharp.Messages.OrderStates.Failed</codeEntityReference> state.
			  </listItem>
			  <listItem>
				  <codeEntityReference>F:StockSharp.Messages.OrderStates.Active</codeEntityReference> - the order is active on exchange. Such order will be active as long as all of the order
				  <codeEntityReference qualifyHint="true">P:StockSharp.BusinessEntities.Order.Volume</codeEntityReference> volume is matched, or it will be forcibly cancelled through
				  <codeEntityReference qualifyHint="true">M:StockSharp.BusinessEntities.ITransactionProvider.CancelOrder(StockSharp.BusinessEntities.Order)</codeEntityReference>.
				  If the order matched partially the <codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.ITransactionProvider.NewMyTrade</codeEntityReference>
				  events about new trades on issued order have been called, as well as the <codeEntityReference qualifyHint="true">E:StockSharp.Algo.Connector.OrderChanged</codeEntityReference> 
				  event, which the <codeEntityReference qualifyHint="true">P:StockSharp.BusinessEntities.Order.Balance</codeEntityReference> notification about the order balance change passed.
				  The latest event will be arised in the case of the order cancellation.
			  </listItem>
			  <listItem>
				  <codeEntityReference>F:StockSharp.Messages.OrderStates.Done</codeEntityReference> - the order is no longer active on the exchange (been fully matched
				  or cancelled).
			  </listItem>
			  <listItem>
				  <codeEntityReference>F:StockSharp.Messages.OrderStates.Failed</codeEntityReference> - the order has not been accepted by the exchange (or intermediate
				  system, such as the broker server) for any reason.
			  </listItem>
		  </list>
		  <para>
			  To find out the order trading state (what volume is matched, whether the order fully matched, and so on) the
			  <codeEntityReference>M:StockSharp.Algo.TraderHelper.IsCanceled(StockSharp.BusinessEntities.Order)</codeEntityReference>,
			  <codeEntityReference>M:StockSharp.Algo.TraderHelper.IsMatchedEmpty(StockSharp.BusinessEntities.Order)</codeEntityReference>,
			  <codeEntityReference>M:StockSharp.Algo.TraderHelper.IsMatchedPartially(StockSharp.BusinessEntities.Order)</codeEntityReference>,
			  <codeEntityReference>M:StockSharp.Algo.TraderHelper.IsMatched(StockSharp.BusinessEntities.Order)</codeEntityReference> and
			  <codeEntityReference>M:StockSharp.Algo.TraderHelper.GetMatchedVolume(StockSharp.BusinessEntities.Order)</codeEntityReference>
			  methods should be used:
		  </para>
		  <code language="C#">// any order
Order order = ....

// is the order was cancelled
Console.WriteLine(order.IsCanceled());

// or fully matched
Console.WriteLine(order.IsMatched());

// or just partially
Console.WriteLine(order.IsMatchedPartially());

// or non of any contracts was matched 
Console.WriteLine(order.IsMatchedEmpty());

// so we are getting the realized (=matched) order size.
Console.WriteLine(order.GetMatchedVolume());</code>
	  </introduction>
  </developerWalkthroughDocument>
</topic>
