<?xml version="1.0" encoding="utf-8"?>
<topic id="d27245ae-abfd-4d6b-b8c4-d1a24a45116f" revisionNumber="0">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--<summary>
      <para>Optional abstract</para>
    </summary>-->

	  <introduction>
		  <para>
			  Testing on market data is trading with a real connection to the exchange ("live" quotes), but without actual orders registering on the exchange. All the
			  registered orders are intercepted, and their execution is emulated based on market order books. Such testing can be useful, for example, if trading
			  simulator is developed. Or it is necessary to check the trading algorithm at short period of time with the real quotes.
		 </para>
		 <para>
			  To emulate the trading on real data it is necessary to use <codeEntityReference>T:StockSharp.Algo.Testing.RealTimeEmulationTrader`1</codeEntityReference>, 
			  which acts as a "wrapper" of the specific trading system connector (<token>openecry</token>, <token>rithmic</token> etc.). Below is a description of an
			  example of working with the emulator using the connection to <token>openecry</token>. The example itself is in the
			  <legacyItalic>Samples/Testing/SampleRealTimeEmulation</legacyItalic> folder.
		  </para>
	  </introduction>

	  <procedure>
		  <title>Work with the trading emulator on real data</title>
		  <steps class="ordered">
			  <step>
				  <content>
					  <para>
						  Creating the <codeEntityReference>T:StockSharp.Algo.Testing.RealTimeEmulationTrader`1</codeEntityReference> instance and passing to its
						  constructor the <codeEntityReference>T:StockSharp.OpenECry.OpenECryMessageAdapter</codeEntityReference> adapter. To create identifiers of the
						  "virtual" transactions using the <legacyBold>MillisecondIncrementalIdGenerator</legacyBold> identifier generator.
					  </para>
					  <code language="C#"><![CDATA[
					_connector = new RealTimeEmulationTrader<SmartComMessageAdapter>(new SmartComMessageAdapter(new MillisecondIncrementalIdGenerator())
					{
						Login = Login.Text,
						Password = Password.Password.To<SecureString>(),
						Address = Address.SelectedAddress
					});
					  ]]></code>
				  </content>
			  </step>
			  <step>
				  <content>
					  <para>
						  The created connector is used as a usual connector. In our case, subscribing to events, 
						  passing an information to the graphical components and establishing the connection.
					  </para>
					  <code language="C#"><![CDATA[
SecurityPicker.SecurityProvider = new FilterableSecurityProvider(_connector);
SecurityPicker.MarketDataProvider = _connector;

_logManager.Sources.Add(_connector);
					
_connector.Connected += () =>
{
	// update gui labels
	this.GuiAsync(() => { ChangeConnectStatus(true); });
};

// subscribe on disconnection event
_connector.Disconnected += () =>
{
	// update gui labels
	this.GuiAsync(() => { ChangeConnectStatus(false); });
};

// subscribe on connection error event
_connector.ConnectionError += error => this.GuiAsync(() =>
{
	// update gui labels
	ChangeConnectStatus(false);

	MessageBox.Show(this, error.ToString(), LocalizedStrings.Str2959);
});

_connector.NewMarketDepth += OnDepth;
_connector.MarketDepthChanged += OnDepth;

_connector.NewPortfolio += PortfolioGrid.Portfolios.Add;
_connector.NewPosition += PortfolioGrid.Positions.Add;

_connector.NewOrder += OrderGrid.Orders.Add;
_connector.NewMyTrade += TradeGrid.Trades.Add;

// subscribe on error of order registration event
_connector.OrderRegisterFailed += OrderGrid.AddRegistrationFail;

_connector.CandleSeriesProcessing += (s, candle) =>
{
	if (candle.State == CandleStates.Finished)
		_buffer.Add(candle);
};
_connector.SubscribeCandles(series, DateTime.Today.Subtract(TimeSpan.FromDays(5)), DateTime.Now);	

_connector.MassOrderCancelFailed += (transId, error) =>
	this.GuiAsync(() => MessageBox.Show(this, error.ToString(), LocalizedStrings.Str716));

// subscribe on error event
_connector.Error += error =>
	this.GuiAsync(() => MessageBox.Show(this, error.ToString(), LocalizedStrings.Str2955));

// subscribe on error of market data subscription event
_connector.MarketDataSubscriptionFailed += (security, msg, error) =>
{
	if (error == null)
		return;

	this.GuiAsync(() => MessageBox.Show(this, error.ToString(), LocalizedStrings.Str2956Params.Put(msg.DataType, security)));
};
					  ]]></code>
				  </content>
			  </step>

			  <step>
				  <content>
					  <para>
						  The following figure shows the result of the example work.
					  </para>
					  <mediaLink>
						  <image placement="left" xlink:href="sample_realtaime_emulation" />
					  </mediaLink>
				  </content>
			  </step>
		  </steps>
	  </procedure>

    <relatedTopics>
    
    
    
    
    
      <!-- Supported Link Types
    
         All of the following linking mechanisms may be used in the topic's content 
         as well as in the related topics section.
    
    Linking to API reference documentation: 
    
		    <codeEntityReference>API reference ID</codeEntityReference>

    Linking to external resources and custom HTML topics: 

        <externalLink>
          <linkText>  Required hyperlink text  </linkText>
          <linkAlternateText>  Optional link title  </linkAlternateText>
          <linkUri>  Required URI  </linkUri>
        </externalLink>
    
    Linking to other conceptual topics: 
    
        <link xlink:href="GUID topic name (without file extension)" />
        
    Linking to named references:
    
        (Refer to the project's Help\Settings\links.xml file for more information)
    
        <link xref="id"> Optional link text </link>
        <link vref="id or URI"> Optional link text </link>
        
    -->

      <!-- Example Usage 

      <codeEntityReference>T:MyNamespace.MyClass</codeEntityReference>
      <codeEntityReference>P:MyNamespace.MyClass.MyProp</codeEntityReference>
      <codeEntityReference>M:System.IO.File.OpenText(System.String)</codeEntityReference>

      <externalLink>
        <linkText>Sandcastle Styles</linkText>
        <linkAlternateText>Sandcastle Styles on CodePlex</linkAlternateText>
        <linkUri>http://www.codeplex.com/SandcastleStyles</linkUri>
      </externalLink>

      <externalLink>
        <linkText>Change Log</linkText>
        <linkUri>ChangeLog.html</linkUri>
      </externalLink>

      <link xlink:href="2BFD9215-1216-403d-8C46-8420A4D01B83"/>
      
      <link xref="home">Our Home Page</link>
      <link vref="/controls/design.aspx">Control Architecture</link>
      -->
    </relatedTopics>

  </developerConceptualDocument>
</topic>
